generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://doadmin:AVNS__XJW01bZjuI2pG6@db-postgresql-sfo3-16817-do-user-11088919-0.b.db.ondigitalocean.com:25061/unloney_staging_pool_2?pgbouncer=true"
}

model User {
  address      String  @id
  username     String? @unique
  signature    String?
  sigTimestamp BigInt?

  reputation Int @default(0)
  isFCUser Boolean @default(false)

  bio String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  videos Video[]
  comments Comment[]
  likes Like[]
}

model Video {
  id           Int     @id @default(autoincrement())
  youtubeId String     @unique
  title String         
  thumbnail String
  description String
  score Int @default(0)
  skip Int @default(0)
  pause Int @default(0)

  comments Comment[]
  likes Like[]

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)
  currentVideo Boolean @default(false)
}

model Comment {
  id           Int     @id @default(autoincrement())
  text String
  videoTimestamp Decimal
  score Int @default(0)
  location_x Int
  location_y Int
  color String

  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])
  videoId Int
  video Video @relation(fields: [videoId], references: [id])
}

model Like {
  id       Int     @id @default(autoincrement())
  value    Int @default(1)
  likerAddr String
  liker     User   @relation(fields: [likerAddr], references: [address])

  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  videoId Int?
  video  Video? @relation(fields: [videoId], references: [id])
}
