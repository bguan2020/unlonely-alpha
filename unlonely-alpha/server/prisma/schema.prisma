generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://doadmin:AVNS__XJW01bZjuI2pG6@db-postgresql-sfo3-16817-do-user-11088919-0.b.db.ondigitalocean.com:25061/unloney_staging_pool_2?pgbouncer=true"
  // switch to this db url when pushing db changes
  // url = "postgresql://doadmin:AVNS__XJW01bZjuI2pG6@db-postgresql-sfo3-16817-do-user-11088919-0.b.db.ondigitalocean.com:25060/unlonely_v1_staging?sslmode=require"
}

model User {
  address      String  @id
  username     String? @unique
  signature    String?
  sigTimestamp BigInt?

  reputation Int @default(0)
  isFCUser Boolean @default(false)
  FCImageUrl String? @default("")

  isLensUser Boolean @default(false)
  lensHandle String? @default("")
  lensImageUrl String? @default("")

  bio String @default("")
  powerUserLvl Int @default(0)
  videoSavantLvl Int @default(0)
  nfcRank Int @default(0)

  notificationsTokens String @default("")
  notificationsLive Boolean @default(false)
  notificationsNFCs Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  videos Video[]
  tasks Task[]
  comments Comment[]
  likes Like[]
  poaps Poap[]
  chats Chat[]
  host HostEvent[]
  NFCs NFC[]
  streamInteractions StreamInteraction[]
  channel Channel[]
  tokens UserCreatorToken[]
}

model Subscription {
  id              Int    @id @default(autoincrement())
  endpoint        String @unique
  p256dh          String
  auth            String
  expirationTime  DateTime?
  softDelete      Boolean @default(false)
  allowedChannels Int[]

  createdAt DateTime @default(now())
}

model Like {
  id       Int     @id @default(autoincrement())
  value    Int @default(1)
  likerAddr String
  liker     User   @relation(fields: [likerAddr], references: [address])

  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  videoId Int?
  video  Video? @relation(fields: [videoId], references: [id])
  hostEventId Int?
  hostEvent HostEvent? @relation(fields: [hostEventId], references: [id]) 
  NFCId Int?
  NFC NFC? @relation(fields: [NFCId], references: [id]) 
}

model Chat {
  id       Int     @id @default(autoincrement())
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])
  channelId Int @default(3)
  channel   Channel  @relation(fields: [channelId], references: [id])
}

model NFC {
  id           Int     @id @default(autoincrement())

  title String? @default("")
  videoLink String? @default("")
  videoThumbnail String? @default("")
  openseaLink String? @default("")
  score Int @default(0)

  likes Like[]

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StreamInteraction {
  id           Int     @id @default(autoincrement())

  interactionType String
  text String?

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])


  channelId Int
  channel Channel @relation(fields: [channelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id           Int     @id @default(autoincrement())
  awsId String @unique
  channelArn String

  name String
  description String
  playbackUrl String
  slug String @unique
  isLive Boolean @default(false)
  allowNFCs Boolean @default(true)

  bannedUsers String[]

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chats Chat[]
  streamInteractions StreamInteraction[]
  chatCommands ChatCommand[]
  token CreatorToken?
  customButtonAction String?
  customButtonPrice Int?
  sharesEvent SharesEvent?
}

model CreatorToken {
  id        Int      @id @default(autoincrement())
  address  String   @unique
  symbol    String   @unique
  name      String   
  price    Float
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId Int      @unique
  users     UserCreatorToken[]
}

model UserCreatorToken {
  userAddress  String
  tokenAddress String
  quantity Int     @default(0)
  user    User     @relation(fields: [userAddress], references: [address])
  token   CreatorToken    @relation(fields: [tokenAddress], references: [address])
  
  @@id([userAddress, tokenAddress])
}

model ChatCommand {
  id        Int      @id @default(autoincrement())
  command String
  response String 
  channelId Int      
  channel   Channel  @relation(fields: [channelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  softDelete Boolean @default(false)
}

enum SharesEventState {
  LIVE
  PAYOUT
}

model SharesEvent {
  id        Int      @id @default(autoincrement())
  sharesSubjectQuestion String
  sharesSubjectAddress String
  eventState SharesEventState?

  channel Channel @relation(fields: [channelId], references: [id])
  channelId Int       @unique
}

// ------- DEPRECATED MODELS -------
// DONT DELETE



model Video {
  id           Int     @id @default(autoincrement())
  youtubeId String     
  title String         
  thumbnail String
  description String
  score Int @default(0)
  skip Int @default(0)
  pause Int @default(0)
  duration Int @default(0)

  comments Comment[]
  likes Like[]

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)
  currentVideo Boolean @default(false)
}

model Task {
  id           Int     @id @default(autoincrement())
  taskType String
  youtubeId String?     
  title String?         
  thumbnail String?
  link String?
  description String
  completed Boolean @default(false)

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)
}

model Comment {
  id           Int     @id @default(autoincrement())
  text String
  videoTimestamp Decimal
  score Int @default(0)
  location_x Int
  location_y Int
  color String

  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])
  videoId Int
  video Video @relation(fields: [videoId], references: [id])
}

model Poap {
  id           Int     @id @default(autoincrement())
  date String
  link String
  isUsed Boolean @default(false)

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HostEvent {
  id           Int     @id @default(autoincrement())
  hostDate DateTime
  title String
  description String?
  score Int @default(0)
  likes Like[]

  isChallenger Boolean @default(false)

  challengerId Int? @unique
  challenger HostEvent? @relation("challenger", fields: [challengerId], references: [id])
  challenge HostEvent? @relation("challenger")

  ownerAddr String
  owner User @relation(fields: [ownerAddr], references: [address])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeviceToken {
  id           Int     @id @default(autoincrement())
  token String @unique
  address String?

  notificationsLive Boolean @default(true)
  notificationsNFCs Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}