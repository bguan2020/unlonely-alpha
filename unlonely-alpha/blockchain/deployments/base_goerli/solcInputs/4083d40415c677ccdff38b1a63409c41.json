{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/UnlonelySideBetsV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\npragma solidity ^0.8.8;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract UnlonelySideBetsV1 is Ownable, ReentrancyGuard {\r\n    address public protocolFeeDestination;\r\n    uint256 public protocolFeePercent;\r\n    uint256 public subjectFeePercent;\r\n\r\n    struct SideBet {\r\n        address initiator;\r\n        // person who initiates or creates the bet\r\n        address opponent;\r\n        // person who accepts the bet\r\n        uint256 wagerAmount;\r\n        // amount ETH wagered by each party\r\n        uint256 expirationTime;\r\n        // timestamp that closes bet if no opponents take the bet\r\n        bool isWinnerPicked;\r\n        // self-explanatory\r\n        address winner;\r\n        // winning address\r\n    }\r\n\r\n    event SideBetOpened(SideBet sideBet);\r\n    event SideBetAccepted(SideBet sideBet);\r\n    event WinnerPicked(bytes32 eventByte, address winner);\r\n    event SideBetClosed(SideBet sideBet);\r\n\r\n    mapping(bytes32 => SideBet) public sideBetStructs;\r\n\r\n    // user roles\r\n    mapping(address => bool) public isVerifier;\r\n\r\n    modifier onlyVerifier() {\r\n        require(isVerifier[msg.sender], \"Caller is not a verifier\");\r\n        _;\r\n    }\r\n\r\n    enum EventType {\r\n        YayNayVote,\r\n        VipBadge,\r\n        SideBet\r\n    }\r\n\r\n    modifier validEventType(EventType eventType) {\r\n        require(\r\n            eventType == EventType.SideBet,\r\n            \"Invalid event type\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        // Set the contract deployer as the initial verifier\r\n        isVerifier[msg.sender] = true;\r\n\r\n        protocolFeePercent = 5 * 10**16; // 5%\r\n        subjectFeePercent = 5 * 10**16;  // 5%\r\n    }\r\n\r\n    function setFeeDestination(address _feeDestination) public onlyOwner {\r\n        protocolFeeDestination = _feeDestination;\r\n    }\r\n\r\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\r\n        protocolFeePercent = _feePercent;\r\n    }\r\n\r\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\r\n        subjectFeePercent = _feePercent;\r\n    }\r\n\r\n    function setVerifier(address verifier, bool value) public onlyOwner {\r\n        isVerifier[verifier] = value;\r\n    }\r\n\r\n\tfunction generateKey(address eventAddress, uint256 eventId, EventType eventType) public pure validEventType(eventType) returns (bytes32) {\r\n        require(eventId < 10000000, \"ID must be less than 10 million\");\r\n        return keccak256(abi.encodePacked(eventAddress, eventId, eventType));\r\n    }\r\n\r\n    function openSideBet(\r\n        address eventAddress, \r\n        uint256 eventId, \r\n        EventType eventType, \r\n        uint256 wagerAmount, \r\n        uint256 expirationTime\r\n    ) public payable onlyVerifier validEventType(eventType) nonReentrant {\r\n        bytes32 eventBytes = generateKey(eventAddress, eventId, eventType);\r\n        require(sideBetStructs[eventBytes].initiator == address(0), \"Sidebet already created\");\r\n\r\n        uint256 protocolFee = wagerAmount * protocolFeePercent / 1 ether;\r\n        uint256 subjectFee = wagerAmount * subjectFeePercent / 1 ether;\r\n        require(msg.value >= wagerAmount + protocolFee + subjectFee, \"Insufficient payment\");\r\n\r\n        // TO DO: refund user their excess ETH\r\n\r\n        sideBetStructs[eventBytes] = SideBet({\r\n            initiator: msg.sender,\r\n            opponent: address(0), // No opponent yet\r\n            wagerAmount: wagerAmount,\r\n            expirationTime: expirationTime,\r\n            isWinnerPicked: false,\r\n            winner: address(0) // No winner yet\r\n        });\r\n\r\n        emit SideBetOpened(sideBetStructs[eventBytes]);\r\n\r\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\"\");\r\n        (bool success2, ) = eventAddress.call{value: subjectFee}(\"\");\r\n        require(success1 && success2, \"Unable to send funds\");\r\n    }\r\n\r\n    function acceptSideBet(\r\n        address eventAddress, \r\n        uint256 eventId, \r\n        EventType eventType\r\n    ) public payable {\r\n        bytes32 eventBytes = generateKey(eventAddress, eventId, eventType);\r\n\r\n        // Check if the sidebet exists and is open for an opponent\r\n        require(sideBetStructs[eventBytes].initiator != address(0), \"Sidebet does not exist\");\r\n        require(sideBetStructs[eventBytes].opponent == address(0), \"Sidebet already taken\");\r\n        require(sideBetStructs[eventBytes].expirationTime > block.timestamp, \"Sidebet expired\");\r\n        \r\n        // Validate the wager amount\r\n        uint256 wagerAmount = sideBetStructs[eventBytes].wagerAmount;\r\n        uint256 protocolFee = wagerAmount * protocolFeePercent / 1 ether;\r\n        uint256 subjectFee = wagerAmount * subjectFeePercent / 1 ether;\r\n        require(msg.value >= wagerAmount + protocolFee + subjectFee, \"Insufficient payment\");\r\n\r\n        // Update the sidebet with the opponent details\r\n        sideBetStructs[eventBytes].opponent = msg.sender;\r\n\r\n        emit SideBetAccepted(sideBetStructs[eventBytes]);\r\n\r\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\"\");\r\n        (bool success2, ) = eventAddress.call{value: subjectFee}(\"\");\r\n        require(success1 && success2, \"Unable to send funds\");\r\n    }\r\n\r\n    function pickWinner(\r\n        address eventAddress,\r\n        uint256 eventId,\r\n        EventType eventType,\r\n        address winnerAddress\r\n    ) public onlyVerifier {\r\n        bytes32 eventBytes = generateKey(eventAddress, eventId, eventType);\r\n\r\n        // Ensure the sidebet exists and is valid\r\n        require(sideBetStructs[eventBytes].initiator != address(0), \"Sidebet does not exist\");\r\n        require(sideBetStructs[eventBytes].opponent != address(0), \"Sidebet not yet accepted\");\r\n        require(!sideBetStructs[eventBytes].isWinnerPicked, \"Winner already picked\");\r\n\r\n        // Assign the winner\r\n        sideBetStructs[eventBytes].winner = winnerAddress;\r\n        sideBetStructs[eventBytes].isWinnerPicked = true;\r\n\r\n        emit WinnerPicked(eventBytes, winnerAddress);\r\n\r\n        // Handle payout\r\n        uint256 totalWager = sideBetStructs[eventBytes].wagerAmount * 2; // Sum of both wagers\r\n        (bool success, ) = winnerAddress.call{value: totalWager}(\"\");\r\n        require(success, \"Failed to transfer winnings\");\r\n    }\r\n\r\n    function closeSideBet(\r\n        address eventAddress,\r\n        uint256 eventId,\r\n        EventType eventType\r\n    ) public {\r\n        bytes32 eventBytes = generateKey(eventAddress, eventId, eventType);\r\n\r\n        // Check if the sidebet exists\r\n        require(sideBetStructs[eventBytes].initiator != address(0), \"Sidebet does not exist\");\r\n        // Ensure that the msg.sender is the initiator of the sidebet\r\n        require(sideBetStructs[eventBytes].initiator == msg.sender, \"Only initiator can close the sidebet\");\r\n        // Check if sidebet has expired and not yet accepted\r\n        require(block.timestamp >= sideBetStructs[eventBytes].expirationTime, \"Sidebet not yet expired\");\r\n        require(sideBetStructs[eventBytes].opponent == address(0), \"Sidebet already accepted\");\r\n\r\n        // Refund the wager to the initiator\r\n        uint256 wager = sideBetStructs[eventBytes].wagerAmount;\r\n        address initiator = sideBetStructs[eventBytes].initiator;\r\n\r\n        // Reset the sidebet to free up storage and refund gas\r\n        delete sideBetStructs[eventBytes];\r\n\r\n        (bool success, ) = initiator.call{value: wager}(\"\");\r\n        require(success, \"Refund failed\");\r\n\r\n        emit SideBetClosed(sideBetStructs[eventBytes]);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}