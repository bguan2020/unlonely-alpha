{
  "address": "0xa05281a8a8F80C30D5793cCAbA6137F37D71E739",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "eventByte",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "isBuy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "badgeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "subjectEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tournamentEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pooledEth",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct UnlonelyTournament.TradeInfo",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyVIPBadge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTournamentPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "generateKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "getHolderBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTournamentPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTournamentCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "selectTournamentWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellVIPBadge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "setFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setSubjectFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setTournamentCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setTournamentFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournament",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPayoutClaimable",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "winningBadge",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "vipPooledEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournamentFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vipBadgeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vipBadgeSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8feed4d87c61f10645296e2e85b14947466823246b4047cb192b5d766f7d2f69",
  "receipt": {
    "to": null,
    "from": "0x34Bb9e91dC8AC1E13fb42A0e23f7236999e063D4",
    "contractAddress": "0xa05281a8a8F80C30D5793cCAbA6137F37D71E739",
    "transactionIndex": 2,
    "gasUsed": "3337540",
    "logsBloom": "0x0000000000000000200000000000000000000000000000000080000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000001000000400000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000001000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4a781d3a2ccb8a671b47ee85b718ee4f131f146c76bb65b782672931a553a97d",
    "transactionHash": "0x8feed4d87c61f10645296e2e85b14947466823246b4047cb192b5d766f7d2f69",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 12144548,
        "transactionHash": "0x8feed4d87c61f10645296e2e85b14947466823246b4047cb192b5d766f7d2f69",
        "address": "0xa05281a8a8F80C30D5793cCAbA6137F37D71E739",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000034bb9e91dc8ac1e13fb42a0e23f7236999e063d4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4a781d3a2ccb8a671b47ee85b718ee4f131f146c76bb65b782672931a553a97d"
      }
    ],
    "blockNumber": 12144548,
    "cumulativeGasUsed": "3425785",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f93411a7a745afdc9885a4c89ac64815",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"eventByte\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"badgeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tournamentEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pooledEth\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct UnlonelyTournament.TradeInfo\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyVIPBadge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTournamentPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"generateKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getHolderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTournamentPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTournamentCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"selectTournamentWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellVIPBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTournamentCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setTournamentFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournament\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPayoutClaimable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"winningBadge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vipPooledEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipBadgeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vipBadgeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnlonelyTournament.sol\":\"UnlonelyTournament\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"contracts/UnlonelyTournament.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract UnlonelyTournament is Ownable, ReentrancyGuard {\\r\\n    // Tournament is a struct that holds the state of a tournament, eventByte key pointing to the winning VIPBadge as well as the vip pooled ETH. Only one tournament is allowed at a time. This is intentional.\\r\\n    \\r\\n    enum EventType {\\r\\n        YayNayVote,\\r\\n        VIPBadge\\r\\n    }\\r\\n\\r\\n    struct Tournament {\\r\\n        bool isActive;\\r\\n        bool isPayoutClaimable;\\r\\n        bytes32 winningBadge;\\r\\n        uint256 vipPooledEth;\\r\\n    }\\r\\n\\r\\n    struct TradeInfo {\\r\\n        address trader;\\r\\n        bytes32 eventByte;\\r\\n        bool isBuy;\\r\\n        uint256 badgeAmount;\\r\\n        uint256 ethAmount;\\r\\n        uint256 protocolEthAmount;\\r\\n        uint256 subjectEthAmount;\\r\\n        uint256 tournamentEthAmount;\\r\\n        uint256 supply;\\r\\n        uint256 pooledEth;\\r\\n    }\\r\\n\\r\\n    Tournament public tournament;\\r\\n\\r\\n    address public protocolFeeDestination;\\r\\n    uint256 public protocolFeePercent;\\r\\n    uint256 public subjectFeePercent;\\r\\n    uint256 public tournamentFeePercent;\\r\\n\\r\\n    event Trade(TradeInfo trade);\\r\\n    event Payout(address indexed voter, uint256 amount);\\r\\n\\r\\n    mapping(bytes32 => uint256) public vipBadgeSupply;\\r\\n    mapping(bytes32 => mapping(address => uint256)) public vipBadgeBalance;\\r\\n    mapping(address => bool) public isTournamentCreator;\\r\\n\\r\\n    modifier onlyTournamentCreator() {\\r\\n        require(isTournamentCreator[msg.sender], \\\"Caller is not a tournament creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validEventType(EventType eventType) {\\r\\n        require(\\r\\n            eventType == EventType.VIPBadge,\\r\\n            \\\"Invalid event type\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        // Set the contract deployer as the initial tournament creator\\r\\n        isTournamentCreator[msg.sender] = true;\\r\\n\\r\\n        protocolFeePercent = 5 * 10**16; // 5%\\r\\n        subjectFeePercent = 5 * 10**16;  // 5%\\r\\n        tournamentFeePercent = 5 * 10**16;  // 5%\\r\\n    }\\r\\n\\r\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\r\\n        protocolFeeDestination = _feeDestination;\\r\\n    }\\r\\n\\r\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        protocolFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        subjectFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setTournamentFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        tournamentFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setTournamentCreator(address creator, bool value) public onlyOwner {\\r\\n        isTournamentCreator[creator] = value;\\r\\n    }\\r\\n\\r\\n\\tfunction generateKey(address streamerAddress, uint256 eventId, EventType eventType) public pure validEventType(eventType) returns (bytes32) {\\r\\n        require(eventId < 1000000, \\\"ID must be less than 1 million\\\");\\r\\n        return keccak256(abi.encodePacked(streamerAddress, eventId, eventType));\\r\\n    }\\r\\n\\r\\n    function getTournamentPayout(address _address) public view returns (uint256){\\r\\n        if (!tournament.isPayoutClaimable) return 0;\\r\\n        uint256 totalPool = tournament.vipPooledEth;\\r\\n        uint256 totalWinningShares = vipBadgeSupply[tournament.winningBadge];\\r\\n        uint256 userPayout = totalWinningShares == 0 ? 0 : (totalPool * vipBadgeBalance[tournament.winningBadge][_address] / totalWinningShares);\\r\\n        return userPayout;\\r\\n    }\\r\\n\\r\\n    function getHolderBalance(address streamerAddress, uint256 eventId, EventType eventType, address holder) public view validEventType(eventType) returns (uint256 balance) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        return vipBadgeBalance[key][holder];\\r\\n    }\\r\\n\\r\\n    function getPrice(uint256 supply, uint256 amount) public pure returns (uint256) {\\r\\n        if (supply == 0 && amount == 0) return 0;\\r\\n\\r\\n        uint256 sum1 = supply == 0 ? 0 : (supply - 1) * supply * (2 * (supply - 1) + 1) / 6;\\r\\n        uint256 sum2 = (supply == 0 && amount == 1) ? 0 : (amount + supply - 1) * (supply + amount) * (2 * (amount + supply - 1) + 1) / 6;\\r\\n        uint256 summation = sum2 - sum1;\\r\\n        return summation * 1 ether / 32000;\\r\\n    }\\r\\n\\r\\n    function getBuyPrice(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256 price) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 supply = vipBadgeSupply[key];\\r\\n        return getPrice(supply, amount);\\r\\n    }\\r\\n\\r\\n    function getSellPrice(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256 price) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 supply = vipBadgeSupply[key];\\r\\n        if (supply < amount) return 0;\\r\\n        return getPrice(supply - amount, amount);\\r\\n    }\\r\\n\\r\\n    function getBuyPriceAfterFee(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256) {\\r\\n        uint256 price = getBuyPrice(streamerAddress, eventId, eventType, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? price * tournamentFeePercent / 1 ether : 0;\\r\\n        return price + protocolFee + subjectFee + tournamentFee;\\r\\n    }\\r\\n\\r\\n    function getSellPriceAfterFee(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256) {\\r\\n        uint256 price = getSellPrice(streamerAddress, eventId, eventType, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? price * tournamentFeePercent / 1 ether : 0;\\r\\n        return price - protocolFee - subjectFee - tournamentFee;\\r\\n    }\\r\\n\\r\\n    function startTournament() public onlyTournamentCreator {\\r\\n        require(!tournament.isActive, \\\"Tournament is already active.\\\");\\r\\n        require(!tournament.isPayoutClaimable, \\\"Winner payouts still allowed.\\\");\\r\\n        tournament = Tournament({\\r\\n            isActive: true,\\r\\n            isPayoutClaimable: false,\\r\\n            winningBadge: bytes32(0),\\r\\n            vipPooledEth: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function selectTournamentWinner(address streamerAddress, uint256 eventId, EventType eventType) public onlyTournamentCreator validEventType(eventType) {\\r\\n        require(tournament.isActive, \\\"Tournament is not active.\\\");\\r\\n        require(!tournament.isPayoutClaimable, \\\"Winner payouts already allowed.\\\");\\r\\n        bytes32 winningBadge = generateKey(streamerAddress, eventId, eventType);\\r\\n        tournament.winningBadge = winningBadge;\\r\\n        tournament.isPayoutClaimable = true;\\r\\n        tournament.isActive = false;\\r\\n    }\\r\\n    \\r\\n    function endTournament() public onlyTournamentCreator {\\r\\n        require(!tournament.isActive, \\\"Tournament still active.\\\");\\r\\n        require(tournament.isPayoutClaimable, \\\"Winner payouts already stopped.\\\");\\r\\n        tournament.isPayoutClaimable = false;\\r\\n    }\\r\\n\\r\\n    function buyVIPBadge(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public payable validEventType(eventType) {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        require(amount > 0, \\\"Cannot buy zero badges\\\");\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 price = getPrice(vipBadgeSupply[key], amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? (price * tournamentFeePercent / 1 ether) : 0;  // Assume tournamentFeePercent is defined\\r\\n        require(msg.value >= price + protocolFee + subjectFee + tournamentFee, \\\"Insufficient payment\\\");\\r\\n\\r\\n        // Update the contract state\\r\\n        vipBadgeSupply[key] += amount;\\r\\n        vipBadgeBalance[key][msg.sender] += amount;\\r\\n        tournament.vipPooledEth += tournamentFee;\\r\\n\\r\\n        TradeInfo memory tradeInfo = TradeInfo({\\r\\n            trader: msg.sender,\\r\\n            eventByte: key,\\r\\n            isBuy: true,\\r\\n            badgeAmount: amount,\\r\\n            ethAmount: price,\\r\\n            protocolEthAmount: protocolFee,\\r\\n            subjectEthAmount: subjectFee,\\r\\n            tournamentEthAmount: tournamentFee,\\r\\n            supply: vipBadgeSupply[key],\\r\\n            pooledEth: tournament.vipPooledEth\\r\\n        });\\r\\n\\r\\n        emit Trade(tradeInfo);\\r\\n\\r\\n        // Send protocol and subject fees\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n\\r\\n    function sellVIPBadge(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public validEventType(eventType) nonReentrant {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        require(amount > 0, \\\"Cannot buy zero badges\\\");\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        require(vipBadgeBalance[key][msg.sender] >= amount, \\\"Insufficient badges\\\");\\r\\n        uint256 price = getPrice(vipBadgeSupply[key] - amount, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? (price * tournamentFeePercent / 1 ether) : 0;  // Assume tournamentFeePercent is defined\\r\\n\\r\\n        // Update the contract state\\r\\n        vipBadgeSupply[key] -= amount;\\r\\n        vipBadgeBalance[key][msg.sender] -= amount;\\r\\n        tournament.vipPooledEth += tournamentFee;\\r\\n\\r\\n        TradeInfo memory tradeInfo = TradeInfo({\\r\\n            trader: msg.sender,\\r\\n            eventByte: key,\\r\\n            isBuy: false,\\r\\n            badgeAmount: amount,\\r\\n            ethAmount: price,\\r\\n            protocolEthAmount: protocolFee,\\r\\n            subjectEthAmount: subjectFee,\\r\\n            tournamentEthAmount: tournamentFee,\\r\\n            supply: vipBadgeSupply[key],\\r\\n            pooledEth: tournament.vipPooledEth\\r\\n        });\\r\\n\\r\\n        emit Trade(tradeInfo);\\r\\n\\r\\n        // Send protocol and subject fees\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        // Send the remaining amount to the seller\\r\\n        uint256 netAmount = price - protocolFee - subjectFee - tournamentFee;\\r\\n        (bool success3, ) = msg.sender.call{value: netAmount}(\\\"\\\");\\r\\n        require(success3, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n\\r\\n    function claimTournamentPayout() public nonReentrant {\\r\\n        require(tournament.isPayoutClaimable, \\\"Winner payout not allowed right now\\\");\\r\\n        require(vipBadgeBalance[tournament.winningBadge][msg.sender] > 0, \\\"No VIP badges to claim payout for.\\\");\\r\\n        uint256 totalPool = tournament.vipPooledEth;\\r\\n        uint256 totalWinningShares = vipBadgeSupply[tournament.winningBadge];\\r\\n        uint256 userPayout = totalWinningShares == 0 ? 0 : (totalPool * vipBadgeBalance[tournament.winningBadge][msg.sender] / totalWinningShares);\\r\\n        require(userPayout > 0, \\\"No payout for user\\\");\\r\\n\\r\\n        // Reset user's shares after distributing\\r\\n        vipBadgeSupply[tournament.winningBadge] -= vipBadgeBalance[tournament.winningBadge][msg.sender];\\r\\n        vipBadgeBalance[tournament.winningBadge][msg.sender] = 0;\\r\\n\\r\\n        // Deduct the user's payout from the sharesSubject's pool\\r\\n        tournament.vipPooledEth -= userPayout;\\r\\n\\r\\n        emit Payout(msg.sender, userPayout);\\r\\n        (bool success, ) = msg.sender.call{value: userPayout}(\\\"\\\");\\r\\n        require(success, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x691304ee7d8bbbf06ceaa44b7044209bebf3d21eaaeb089d058ef7fc8a30d86b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c806372641ecd116100f7578063c94892f011610095578063effb67e611610064578063effb67e61461067e578063f2fde38b146106a7578063fbe53234146106d0578063fcebcf5e146106f9576101cd565b8063c94892f01461059c578063d6e6eb9f146105d9578063d87986fe14610604578063e8b9af5114610641576101cd565b8063a4983421116100d1578063a4983421146104f6578063ac210a5d1461051f578063bb47380a14610548578063bf559d1114610585576101cd565b806372641ecd146104775780637788c25f146104b45780638da5cb5b146104cb576101cd565b806348c2dde81161016f5780635a8a764e1161013e5780635a8a764e146103d15780635ad92eea146103fa5780635cf4ee9114610423578063715018a614610460576101cd565b806348c2dde8146103295780634ce7957c146103525780634d633a8f1461037d5780635564285d14610394576101cd565b806324dc441d116101ab57806324dc441d1461027a5780633aecedd2146102a5578063451aea50146102e2578063483ccffe146102fe576101cd565b80630d734519146101d257806317798d011461020f5780631e0197e21461024c575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f491906127d6565b610736565b6040516102069190612842565b60405180910390f35b34801561021b57600080fd5b506102366004803603810190610231919061285d565b610819565b60405161024391906128d3565b60405180910390f35b34801561025857600080fd5b506102616108c0565b6040516102719493929190612909565b60405180910390f35b34801561028657600080fd5b5061028f6108f8565b60405161029c91906128d3565b60405180910390f35b3480156102b157600080fd5b506102cc60048036038101906102c7919061285d565b6108fe565b6040516102d991906128d3565b60405180910390f35b6102fc60048036038101906102f7919061285d565b610a36565b005b34801561030a57600080fd5b50610313610f43565b60405161032091906128d3565b60405180910390f35b34801561033557600080fd5b50610350600480360381019061034b919061285d565b610f49565b005b34801561035e57600080fd5b50610367611574565b604051610374919061295d565b60405180910390f35b34801561038957600080fd5b5061039261159a565b005b3480156103a057600080fd5b506103bb60048036038101906103b69190612978565b6116eb565b6040516103c891906128d3565b60405180910390f35b3480156103dd57600080fd5b506103f860048036038101906103f391906129df565b6117c0565b005b34801561040657600080fd5b50610421600480360381019061041c91906127d6565b6117d2565b005b34801561042f57600080fd5b5061044a60048036038101906104459190612a0c565b6119c6565b60405161045791906128d3565b60405180910390f35b34801561046c57600080fd5b50610475611b19565b005b34801561048357600080fd5b5061049e60048036038101906104999190612a4c565b611b2d565b6040516104ab91906128d3565b60405180910390f35b3480156104c057600080fd5b506104c9611c00565b005b3480156104d757600080fd5b506104e0611fdc565b6040516104ed919061295d565b60405180910390f35b34801561050257600080fd5b5061051d600480360381019061051891906129df565b612005565b005b34801561052b57600080fd5b5061054660048036038101906105419190612aa5565b612017565b005b34801561055457600080fd5b5061056f600480360381019061056a919061285d565b61207a565b60405161057c91906128d3565b60405180910390f35b34801561059157600080fd5b5061059a612140565b005b3480156105a857600080fd5b506105c360048036038101906105be9190612a4c565b6122f8565b6040516105d09190612ae5565b60405180910390f35b3480156105e557600080fd5b506105ee612318565b6040516105fb91906128d3565b60405180910390f35b34801561061057600080fd5b5061062b60048036038101906106269190612b2c565b61231e565b60405161063891906128d3565b60405180910390f35b34801561064d57600080fd5b506106686004803603810190610663919061285d565b612336565b60405161067591906128d3565b60405180910390f35b34801561068a57600080fd5b506106a560048036038101906106a091906129df565b61246e565b005b3480156106b357600080fd5b506106ce60048036038101906106c99190612a4c565b612480565b005b3480156106dc57600080fd5b506106f760048036038101906106f29190612a4c565b612504565b005b34801561070557600080fd5b50610720600480360381019061071b9190612b59565b612550565b60405161072d91906128d3565b60405180910390f35b60008160018081111561074c5761074b612b99565b5b81600181111561075f5761075e612b99565b5b1461079f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079690612c25565b60405180910390fd5b620f424084106107e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107db90612c91565b60405180910390fd5b8484846040516020016107f993929190612d89565b604051602081830303815290604052805190602001209150509392505050565b60008260018081111561082f5761082e612b99565b5b81600181111561084257610841612b99565b5b14610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087990612c25565b60405180910390fd5b600061088f878787610736565b90506000600960008381526020019081526020016000205490506108b381866119c6565b9350505050949350505050565b60028060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154908060020154905084565b60075481565b60008260018081111561091457610913612b99565b5b81600181111561092757610926612b99565b5b14610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e90612c25565b60405180910390fd5b60006109758787878761207a565b90506000670de0b6b3a7640000600654836109909190612df5565b61099a9190612e7e565b90506000670de0b6b3a7640000600754846109b59190612df5565b6109bf9190612e7e565b90506000600260000160009054906101000a900460ff166109e1576000610a03565b670de0b6b3a7640000600854856109f89190612df5565b610a029190612e7e565b5b905080828486610a139190612eaf565b610a1d9190612eaf565b610a279190612eaf565b95505050505050949350505050565b81600180811115610a4a57610a49612b99565b5b816001811115610a5d57610a5c612b99565b5b14610a9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9490612c25565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2690612f55565b60405180910390fd5b60008211610b72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6990612fc1565b60405180910390fd5b6000610b7f868686610736565b90506000610ba06009600084815260200190815260200160002054856119c6565b90506000670de0b6b3a764000060065483610bbb9190612df5565b610bc59190612e7e565b90506000670de0b6b3a764000060075484610be09190612df5565b610bea9190612e7e565b90506000600260000160009054906101000a900460ff16610c0c576000610c2e565b670de0b6b3a764000060085485610c239190612df5565b610c2d9190612e7e565b5b905080828486610c3e9190612fe1565b610c489190612fe1565b610c529190612fe1565b341015610c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b90613083565b60405180910390fd5b86600960008781526020019081526020016000206000828254610cb79190612fe1565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d1e9190612fe1565b9250508190555080600280016000828254610d399190612fe1565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160011515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf81604051610de991906131ab565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1685604051610e39906131f8565b60006040518083038185875af1925050503d8060008114610e76576040519150601f19603f3d011682016040523d82523d6000602084013e610e7b565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff1685604051610ea5906131f8565b60006040518083038185875af1925050503d8060008114610ee2576040519150601f19603f3d011682016040523d82523d6000602084013e610ee7565b606091505b50509050818015610ef55750805b610f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2b90613259565b60405180910390fd5b50505050505050505050505050565b60085481565b81600180811115610f5d57610f5c612b99565b5b816001811115610f7057610f6f612b99565b5b14610fb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa790612c25565b60405180910390fd5b610fb8612575565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104190612f55565b60405180910390fd5b6000821161108d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108490612fc1565b60405180910390fd5b600061109a868686610736565b905082600a600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561112f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611126906132c5565b60405180910390fd5b60006111598460096000858152602001908152602001600020546111539190612eaf565b856119c6565b90506000670de0b6b3a7640000600654836111749190612df5565b61117e9190612e7e565b90506000670de0b6b3a7640000600754846111999190612df5565b6111a39190612e7e565b90506000600260000160009054906101000a900460ff166111c55760006111e7565b670de0b6b3a7640000600854856111dc9190612df5565b6111e69190612e7e565b5b90508660096000878152602001908152602001600020600082825461120c9190612eaf565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112739190612eaf565b925050819055508060028001600082825461128e9190612fe1565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160001515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf8160405161133e91906131ab565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168560405161138e906131f8565b60006040518083038185875af1925050503d80600081146113cb576040519150601f19603f3d011682016040523d82523d6000602084013e6113d0565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff16856040516113fa906131f8565b60006040518083038185875af1925050503d8060008114611437576040519150601f19603f3d011682016040523d82523d6000602084013e61143c565b606091505b5050905081801561144a5750805b611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148090613259565b60405180910390fd5b60008486888a6114999190612eaf565b6114a39190612eaf565b6114ad9190612eaf565b905060003373ffffffffffffffffffffffffffffffffffffffff16826040516114d5906131f8565b60006040518083038185875af1925050503d8060008114611512576040519150601f19603f3d011682016040523d82523d6000602084013e611517565b606091505b505090508061155b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155290613259565b60405180910390fd5b5050505050505050505061156d6125c5565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d90613357565b60405180910390fd5b600260000160009054906101000a900460ff1615611679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611670906133c3565b60405180910390fd5b600260000160019054906101000a900460ff166116cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c29061342f565b60405180910390fd5b6000600260000160016101000a81548160ff021916908315150217905550565b60008260018081111561170157611700612b99565b5b81600181111561171457611713612b99565b5b14611754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174b90612c25565b60405180910390fd5b6000611761878787610736565b9050600a600082815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505050949350505050565b6117c86125ce565b8060078190555050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661185e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185590613357565b60405180910390fd5b8060018081111561187257611871612b99565b5b81600181111561188557611884612b99565b5b146118c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118bc90612c25565b60405180910390fd5b600260000160009054906101000a900460ff16611917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190e9061349b565b60405180910390fd5b600260000160019054906101000a900460ff161561196a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196190613507565b60405180910390fd5b6000611977858585610736565b9050806002600101819055506001600260000160016101000a81548160ff0219169083151502179055506000600260000160006101000a81548160ff0219169083151502179055505050505050565b600080831480156119d75750600082145b156119e55760009050611b13565b6000808414611a45576006600180866119fe9190612eaf565b6002611a0a9190612df5565b611a149190612fe1565b85600187611a229190612eaf565b611a2c9190612df5565b611a369190612df5565b611a409190612e7e565b611a48565b60005b905060008085148015611a5b5750600184145b611ad75760066001808787611a709190612fe1565b611a7a9190612eaf565b6002611a869190612df5565b611a909190612fe1565b8587611a9c9190612fe1565b60018888611aaa9190612fe1565b611ab49190612eaf565b611abe9190612df5565b611ac89190612df5565b611ad29190612e7e565b611ada565b60005b905060008282611aea9190612eaf565b9050617d00670de0b6b3a764000082611b039190612df5565b611b0d9190612e7e565b93505050505b92915050565b611b216125ce565b611b2b600061264c565b565b6000600260000160019054906101000a900460ff16611b4f5760009050611bfb565b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611bef5781600a6000600260010154815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611be09190612df5565b611bea9190612e7e565b611bf2565b60005b90508093505050505b919050565b611c08612575565b600260000160019054906101000a900460ff16611c5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5190613599565b60405180910390fd5b6000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce99061362b565b60405180910390fd5b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611d925781600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611d839190612df5565b611d8d9190612e7e565b611d95565b60005b905060008111611dda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd190613697565b60405180910390fd5b600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546009600060026001015481526020019081526020016000206000828254611e579190612eaf565b925050819055506000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600280016000828254611ecd9190612eaf565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a682604051611f1a91906128d3565b60405180910390a260003373ffffffffffffffffffffffffffffffffffffffff1682604051611f48906131f8565b60006040518083038185875af1925050503d8060008114611f85576040519150601f19603f3d011682016040523d82523d6000602084013e611f8a565b606091505b5050905080611fce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc590613259565b60405180910390fd5b50505050611fda6125c5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61200d6125ce565b8060068190555050565b61201f6125ce565b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000826001808111156120905761208f612b99565b5b8160018111156120a3576120a2612b99565b5b146120e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120da90612c25565b60405180910390fd5b60006120f0878787610736565b90506000600960008381526020019081526020016000205490508481101561211d57600093505050612137565b612132858261212c9190612eaf565b866119c6565b935050505b50949350505050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166121cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c390613357565b60405180910390fd5b600260000160009054906101000a900460ff161561221f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221690613703565b60405180910390fd5b600260000160019054906101000a900460ff1615612272576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122699061376f565b60405180910390fd5b60405180608001604052806001151581526020016000151581526020016000801b81526020016000815250600260008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001015560608201518160020155905050565b600b6020528060005260406000206000915054906101000a900460ff1681565b60065481565b60096020528060005260406000206000915090505481565b60008260018081111561234c5761234b612b99565b5b81600181111561235f5761235e612b99565b5b1461239f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239690612c25565b60405180910390fd5b60006123ad87878787610819565b90506000670de0b6b3a7640000600654836123c89190612df5565b6123d29190612e7e565b90506000670de0b6b3a7640000600754846123ed9190612df5565b6123f79190612e7e565b90506000600260000160009054906101000a900460ff1661241957600061243b565b670de0b6b3a7640000600854856124309190612df5565b61243a9190612e7e565b5b90508082848661244b9190612fe1565b6124559190612fe1565b61245f9190612fe1565b95505050505050949350505050565b6124766125ce565b8060088190555050565b6124886125ce565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ef90613801565b60405180910390fd5b6125018161264c565b50565b61250c6125ce565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a602052816000526040600020602052806000526040600020600091509150505481565b600260015414156125bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b29061386d565b60405180910390fd5b6002600181905550565b60018081905550565b6125d6612710565b73ffffffffffffffffffffffffffffffffffffffff166125f4611fdc565b73ffffffffffffffffffffffffffffffffffffffff161461264a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612641906138d9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127488261271d565b9050919050565b6127588161273d565b811461276357600080fd5b50565b6000813590506127758161274f565b92915050565b6000819050919050565b61278e8161277b565b811461279957600080fd5b50565b6000813590506127ab81612785565b92915050565b600281106127be57600080fd5b50565b6000813590506127d0816127b1565b92915050565b6000806000606084860312156127ef576127ee612718565b5b60006127fd86828701612766565b935050602061280e8682870161279c565b925050604061281f868287016127c1565b9150509250925092565b6000819050919050565b61283c81612829565b82525050565b60006020820190506128576000830184612833565b92915050565b6000806000806080858703121561287757612876612718565b5b600061288587828801612766565b94505060206128968782880161279c565b93505060406128a7878288016127c1565b92505060606128b88782880161279c565b91505092959194509250565b6128cd8161277b565b82525050565b60006020820190506128e860008301846128c4565b92915050565b60008115159050919050565b612903816128ee565b82525050565b600060808201905061291e60008301876128fa565b61292b60208301866128fa565b6129386040830185612833565b61294560608301846128c4565b95945050505050565b6129578161273d565b82525050565b6000602082019050612972600083018461294e565b92915050565b6000806000806080858703121561299257612991612718565b5b60006129a087828801612766565b94505060206129b18782880161279c565b93505060406129c2878288016127c1565b92505060606129d387828801612766565b91505092959194509250565b6000602082840312156129f5576129f4612718565b5b6000612a038482850161279c565b91505092915050565b60008060408385031215612a2357612a22612718565b5b6000612a318582860161279c565b9250506020612a428582860161279c565b9150509250929050565b600060208284031215612a6257612a61612718565b5b6000612a7084828501612766565b91505092915050565b612a82816128ee565b8114612a8d57600080fd5b50565b600081359050612a9f81612a79565b92915050565b60008060408385031215612abc57612abb612718565b5b6000612aca85828601612766565b9250506020612adb85828601612a90565b9150509250929050565b6000602082019050612afa60008301846128fa565b92915050565b612b0981612829565b8114612b1457600080fd5b50565b600081359050612b2681612b00565b92915050565b600060208284031215612b4257612b41612718565b5b6000612b5084828501612b17565b91505092915050565b60008060408385031215612b7057612b6f612718565b5b6000612b7e85828601612b17565b9250506020612b8f85828601612766565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f496e76616c6964206576656e7420747970650000000000000000000000000000600082015250565b6000612c0f601283612bc8565b9150612c1a82612bd9565b602082019050919050565b60006020820190508181036000830152612c3e81612c02565b9050919050565b7f4944206d757374206265206c657373207468616e2031206d696c6c696f6e0000600082015250565b6000612c7b601e83612bc8565b9150612c8682612c45565b602082019050919050565b60006020820190508181036000830152612caa81612c6e565b9050919050565b60008160601b9050919050565b6000612cc982612cb1565b9050919050565b6000612cdb82612cbe565b9050919050565b612cf3612cee8261273d565b612cd0565b82525050565b6000819050919050565b612d14612d0f8261277b565b612cf9565b82525050565b60028110612d2b57612d2a612b99565b5b50565b6000819050612d3c82612d1a565b919050565b6000612d4c82612d2e565b9050919050565b60008160f81b9050919050565b6000612d6b82612d53565b9050919050565b612d83612d7e82612d41565b612d60565b82525050565b6000612d958286612ce2565b601482019150612da58285612d03565b602082019150612db58284612d72565b600182019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e008261277b565b9150612e0b8361277b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612e4457612e43612dc6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612e898261277b565b9150612e948361277b565b925082612ea457612ea3612e4f565b5b828204905092915050565b6000612eba8261277b565b9150612ec58361277b565b925082821015612ed857612ed7612dc6565b5b828203905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612f3f602a83612bc8565b9150612f4a82612ee3565b604082019050919050565b60006020820190508181036000830152612f6e81612f32565b9050919050565b7f43616e6e6f7420627579207a65726f2062616467657300000000000000000000600082015250565b6000612fab601683612bc8565b9150612fb682612f75565b602082019050919050565b60006020820190508181036000830152612fda81612f9e565b9050919050565b6000612fec8261277b565b9150612ff78361277b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561302c5761302b612dc6565b5b828201905092915050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b600061306d601483612bc8565b915061307882613037565b602082019050919050565b6000602082019050818103600083015261309c81613060565b9050919050565b6130ac8161273d565b82525050565b6130bb81612829565b82525050565b6130ca816128ee565b82525050565b6130d98161277b565b82525050565b610140820160008201516130f660008501826130a3565b50602082015161310960208501826130b2565b50604082015161311c60408501826130c1565b50606082015161312f60608501826130d0565b50608082015161314260808501826130d0565b5060a082015161315560a08501826130d0565b5060c082015161316860c08501826130d0565b5060e082015161317b60e08501826130d0565b506101008201516131906101008501826130d0565b506101208201516131a56101208501826130d0565b50505050565b6000610140820190506131c160008301846130df565b92915050565b600081905092915050565b50565b60006131e26000836131c7565b91506131ed826131d2565b600082019050919050565b6000613203826131d5565b9150819050919050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b6000613243601483612bc8565b915061324e8261320d565b602082019050919050565b6000602082019050818103600083015261327281613236565b9050919050565b7f496e73756666696369656e742062616467657300000000000000000000000000600082015250565b60006132af601383612bc8565b91506132ba82613279565b602082019050919050565b600060208201905081810360008301526132de816132a2565b9050919050565b7f43616c6c6572206973206e6f74206120746f75726e616d656e7420637265617460008201527f6f72000000000000000000000000000000000000000000000000000000000000602082015250565b6000613341602283612bc8565b915061334c826132e5565b604082019050919050565b6000602082019050818103600083015261337081613334565b9050919050565b7f546f75726e616d656e74207374696c6c206163746976652e0000000000000000600082015250565b60006133ad601883612bc8565b91506133b882613377565b602082019050919050565b600060208201905081810360008301526133dc816133a0565b9050919050565b7f57696e6e6572207061796f75747320616c72656164792073746f707065642e00600082015250565b6000613419601f83612bc8565b9150613424826133e3565b602082019050919050565b600060208201905081810360008301526134488161340c565b9050919050565b7f546f75726e616d656e74206973206e6f74206163746976652e00000000000000600082015250565b6000613485601983612bc8565b91506134908261344f565b602082019050919050565b600060208201905081810360008301526134b481613478565b9050919050565b7f57696e6e6572207061796f75747320616c726561647920616c6c6f7765642e00600082015250565b60006134f1601f83612bc8565b91506134fc826134bb565b602082019050919050565b60006020820190508181036000830152613520816134e4565b9050919050565b7f57696e6e6572207061796f7574206e6f7420616c6c6f7765642072696768742060008201527f6e6f770000000000000000000000000000000000000000000000000000000000602082015250565b6000613583602383612bc8565b915061358e82613527565b604082019050919050565b600060208201905081810360008301526135b281613576565b9050919050565b7f4e6f205649502062616467657320746f20636c61696d207061796f757420666f60008201527f722e000000000000000000000000000000000000000000000000000000000000602082015250565b6000613615602283612bc8565b9150613620826135b9565b604082019050919050565b6000602082019050818103600083015261364481613608565b9050919050565b7f4e6f207061796f757420666f7220757365720000000000000000000000000000600082015250565b6000613681601283612bc8565b915061368c8261364b565b602082019050919050565b600060208201905081810360008301526136b081613674565b9050919050565b7f546f75726e616d656e7420697320616c7265616479206163746976652e000000600082015250565b60006136ed601d83612bc8565b91506136f8826136b7565b602082019050919050565b6000602082019050818103600083015261371c816136e0565b9050919050565b7f57696e6e6572207061796f757473207374696c6c20616c6c6f7765642e000000600082015250565b6000613759601d83612bc8565b915061376482613723565b602082019050919050565b600060208201905081810360008301526137888161374c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006137eb602683612bc8565b91506137f68261378f565b604082019050919050565b6000602082019050818103600083015261381a816137de565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613857601f83612bc8565b915061386282613821565b602082019050919050565b600060208201905081810360008301526138868161384a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006138c3602083612bc8565b91506138ce8261388d565b602082019050919050565b600060208201905081810360008301526138f2816138b6565b905091905056fea2646970667358221220957ffcf94e14935159cbd028e55575568144a2bcd1d510399520031714e069f864736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7354,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7499,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "tournament",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Tournament)7475_storage"
      },
      {
        "astId": 7501,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "protocolFeeDestination",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7503,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "protocolFeePercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7505,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "subjectFeePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7507,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "tournamentFeePercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7522,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "vipBadgeSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 7528,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "vipBadgeBalance",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7532,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "isTournamentCreator",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Tournament)7475_storage": {
        "encoding": "inplace",
        "label": "struct UnlonelyTournament.Tournament",
        "members": [
          {
            "astId": 7468,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7470,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "isPayoutClaimable",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7472,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "winningBadge",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 7474,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "vipPooledEth",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}