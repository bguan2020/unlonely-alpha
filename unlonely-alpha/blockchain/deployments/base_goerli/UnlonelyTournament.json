{
  "address": "0x3199c0270662d59D37cd57fBa51AD26Af124f8F5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "eventByte",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "isBuy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "badgeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "subjectEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tournamentEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pooledEth",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct UnlonelyTournament.TradeInfo",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyVIPBadge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTournamentPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "generateKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "getHolderBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTournamentPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTournamentCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "selectTournamentWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellVIPBadge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "setFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setSubjectFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setTournamentCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setTournamentFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournament",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPayoutClaimable",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "winningBadge",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "vipPooledEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournamentFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vipBadgeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vipBadgeSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x06014a0fd42d8ea5181d51fc0ba01ab54741284412642d2b3c565600592e58e0",
  "receipt": {
    "to": null,
    "from": "0x34Bb9e91dC8AC1E13fb42A0e23f7236999e063D4",
    "contractAddress": "0x3199c0270662d59D37cd57fBa51AD26Af124f8F5",
    "transactionIndex": 3,
    "gasUsed": "3386359",
    "logsBloom": "0x
    "blockHash": "0x15eb4c0a399b9b045ec82e6709e263cef935aa4e9409df048e479319475f0f64",
    "transactionHash": "0x06014a0fd42d8ea5181d51fc0ba01ab54741284412642d2b3c565600592e58e0",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 12397257,
        "transactionHash": "0x06014a0fd42d8ea5181d51fc0ba01ab54741284412642d2b3c565600592e58e0",
        "address": "0x3199c0270662d59D37cd57fBa51AD26Af124f8F5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000034bb9e91dc8ac1e13fb42a0e23f7236999e063d4"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x15eb4c0a399b9b045ec82e6709e263cef935aa4e9409df048e479319475f0f64"
      }
    ],
    "blockNumber": 12397257,
    "cumulativeGasUsed": "4075014",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "77e2d56fc4612e967ca7196c3de9aefe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"eventByte\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"badgeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tournamentEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pooledEth\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct UnlonelyTournament.TradeInfo\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyVIPBadge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTournamentPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"generateKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getHolderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTournamentPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTournamentCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"selectTournamentWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellVIPBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTournamentCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setTournamentFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournament\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPayoutClaimable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"winningBadge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vipPooledEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipBadgeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vipBadgeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnlonelyTournament.sol\":\"UnlonelyTournament\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"contracts/UnlonelyTournament.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract UnlonelyTournament is Ownable, ReentrancyGuard {\\r\\n    // Tournament is a struct that holds the state of a tournament, eventByte key pointing to the winning VIPBadge as well as the vip pooled ETH. Only one tournament is allowed at a time. This is intentional.\\r\\n    \\r\\n    enum EventType {\\r\\n        YayNayVote,\\r\\n        VIPBadge\\r\\n    }\\r\\n\\r\\n    struct Tournament {\\r\\n        bool isActive;\\r\\n        bool isPayoutClaimable;\\r\\n        bytes32 winningBadge;\\r\\n        uint256 vipPooledEth;\\r\\n    }\\r\\n\\r\\n    struct TradeInfo {\\r\\n        address trader;\\r\\n        bytes32 eventByte;\\r\\n        bool isBuy;\\r\\n        uint256 badgeAmount;\\r\\n        uint256 ethAmount;\\r\\n        uint256 protocolEthAmount;\\r\\n        uint256 subjectEthAmount;\\r\\n        uint256 tournamentEthAmount;\\r\\n        uint256 supply;\\r\\n        uint256 pooledEth;\\r\\n    }\\r\\n\\r\\n    Tournament public tournament;\\r\\n\\r\\n    address public protocolFeeDestination;\\r\\n    uint256 public protocolFeePercent;\\r\\n    uint256 public subjectFeePercent;\\r\\n    uint256 public tournamentFeePercent;\\r\\n\\r\\n    event Trade(TradeInfo trade);\\r\\n    event Payout(address indexed voter, uint256 amount);\\r\\n\\r\\n    mapping(bytes32 => uint256) public vipBadgeSupply;\\r\\n    mapping(bytes32 => mapping(address => uint256)) public vipBadgeBalance;\\r\\n    mapping(address => bool) public isTournamentCreator;\\r\\n\\r\\n    modifier onlyTournamentCreator() {\\r\\n        require(isTournamentCreator[msg.sender], \\\"Caller is not a tournament creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validEventType(EventType eventType) {\\r\\n        require(\\r\\n            eventType == EventType.VIPBadge,\\r\\n            \\\"Invalid event type\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        // Set the contract deployer as the initial tournament creator\\r\\n        isTournamentCreator[msg.sender] = true;\\r\\n\\r\\n        protocolFeePercent = 5 * 10**16; // 5%\\r\\n        subjectFeePercent = 5 * 10**16;  // 5%\\r\\n        tournamentFeePercent = 5 * 10**16;  // 5%\\r\\n    }\\r\\n\\r\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\r\\n        protocolFeeDestination = _feeDestination;\\r\\n    }\\r\\n\\r\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        protocolFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        subjectFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setTournamentFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        tournamentFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setTournamentCreator(address creator, bool value) public onlyOwner {\\r\\n        isTournamentCreator[creator] = value;\\r\\n    }\\r\\n\\r\\n\\tfunction generateKey(address streamerAddress, uint256 eventId, EventType eventType) public pure validEventType(eventType) returns (bytes32) {\\r\\n        require(eventId < 1000000, \\\"ID must be less than 1 million\\\");\\r\\n        return keccak256(abi.encodePacked(streamerAddress, eventId, eventType));\\r\\n    }\\r\\n\\r\\n    function getTournamentPayout(address _address) public view returns (uint256){\\r\\n        if (!tournament.isPayoutClaimable) return 0;\\r\\n        uint256 totalPool = tournament.vipPooledEth;\\r\\n        uint256 totalWinningShares = vipBadgeSupply[tournament.winningBadge];\\r\\n        uint256 userPayout = totalWinningShares == 0 ? 0 : (totalPool * vipBadgeBalance[tournament.winningBadge][_address] / totalWinningShares);\\r\\n        return userPayout;\\r\\n    }\\r\\n\\r\\n    function getHolderBalance(address streamerAddress, uint256 eventId, EventType eventType, address holder) public view validEventType(eventType) returns (uint256 balance) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        return vipBadgeBalance[key][holder];\\r\\n    }\\r\\n\\r\\n    function getSupply(address streamerAddress, uint256 eventId, EventType eventType) public view validEventType(eventType) returns (uint256 supply) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        return vipBadgeSupply[key];\\r\\n    }\\r\\n\\r\\n    function getPrice(uint256 supply, uint256 amount) public pure returns (uint256) {\\r\\n        if (supply == 0 && amount == 0) return 0;\\r\\n\\r\\n        uint256 sum1 = supply == 0 ? 0 : (supply - 1) * supply * (2 * (supply - 1) + 1) / 6;\\r\\n        uint256 sum2 = (supply == 0 && amount == 1) ? 0 : (amount + supply - 1) * (supply + amount) * (2 * (amount + supply - 1) + 1) / 6;\\r\\n        uint256 summation = sum2 - sum1;\\r\\n        return summation * 1 ether / 32000;\\r\\n    }\\r\\n\\r\\n    function getBuyPrice(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256 price) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 supply = vipBadgeSupply[key];\\r\\n        return getPrice(supply, amount);\\r\\n    }\\r\\n\\r\\n    function getSellPrice(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256 price) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 supply = vipBadgeSupply[key];\\r\\n        if (supply < amount) return 0;\\r\\n        return getPrice(supply - amount, amount);\\r\\n    }\\r\\n\\r\\n    function getBuyPriceAfterFee(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256) {\\r\\n        uint256 price = getBuyPrice(streamerAddress, eventId, eventType, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? price * tournamentFeePercent / 1 ether : 0;\\r\\n        return price + protocolFee + subjectFee + tournamentFee;\\r\\n    }\\r\\n\\r\\n    function getSellPriceAfterFee(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256) {\\r\\n        uint256 price = getSellPrice(streamerAddress, eventId, eventType, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? price * tournamentFeePercent / 1 ether : 0;\\r\\n        return price - protocolFee - subjectFee - tournamentFee;\\r\\n    }\\r\\n\\r\\n    function startTournament() public onlyTournamentCreator {\\r\\n        require(!tournament.isActive, \\\"Tournament is already active.\\\");\\r\\n        require(!tournament.isPayoutClaimable, \\\"Winner payouts still allowed.\\\");\\r\\n        tournament = Tournament({\\r\\n            isActive: true,\\r\\n            isPayoutClaimable: false,\\r\\n            winningBadge: bytes32(0),\\r\\n            vipPooledEth: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function selectTournamentWinner(address streamerAddress, uint256 eventId, EventType eventType) public onlyTournamentCreator validEventType(eventType) {\\r\\n        require(tournament.isActive, \\\"Tournament is not active.\\\");\\r\\n        require(!tournament.isPayoutClaimable, \\\"Winner payouts already allowed.\\\");\\r\\n        bytes32 winningBadge = generateKey(streamerAddress, eventId, eventType);\\r\\n        tournament.winningBadge = winningBadge;\\r\\n        tournament.isPayoutClaimable = true;\\r\\n        tournament.isActive = false;\\r\\n    }\\r\\n    \\r\\n    function endTournament() public onlyTournamentCreator {\\r\\n        require(!tournament.isActive, \\\"Tournament still active.\\\");\\r\\n        require(tournament.isPayoutClaimable, \\\"Winner payouts already stopped.\\\");\\r\\n        tournament.isPayoutClaimable = false;\\r\\n    }\\r\\n\\r\\n    function buyVIPBadge(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public payable validEventType(eventType) {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        require(amount > 0, \\\"Cannot buy zero badges\\\");\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 price = getPrice(vipBadgeSupply[key], amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? (price * tournamentFeePercent / 1 ether) : 0;  // Assume tournamentFeePercent is defined\\r\\n        require(msg.value >= price + protocolFee + subjectFee + tournamentFee, \\\"Insufficient payment\\\");\\r\\n\\r\\n        // Update the contract state\\r\\n        vipBadgeSupply[key] += amount;\\r\\n        vipBadgeBalance[key][msg.sender] += amount;\\r\\n        tournament.vipPooledEth += tournamentFee;\\r\\n\\r\\n        TradeInfo memory tradeInfo = TradeInfo({\\r\\n            trader: msg.sender,\\r\\n            eventByte: key,\\r\\n            isBuy: true,\\r\\n            badgeAmount: amount,\\r\\n            ethAmount: price,\\r\\n            protocolEthAmount: protocolFee,\\r\\n            subjectEthAmount: subjectFee,\\r\\n            tournamentEthAmount: tournamentFee,\\r\\n            supply: vipBadgeSupply[key],\\r\\n            pooledEth: tournament.vipPooledEth\\r\\n        });\\r\\n\\r\\n        emit Trade(tradeInfo);\\r\\n\\r\\n        // Send protocol and subject fees\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n\\r\\n    function sellVIPBadge(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public validEventType(eventType) nonReentrant {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        require(amount > 0, \\\"Cannot buy zero badges\\\");\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        require(vipBadgeBalance[key][msg.sender] >= amount, \\\"Insufficient badges\\\");\\r\\n        uint256 price = getPrice(vipBadgeSupply[key] - amount, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? (price * tournamentFeePercent / 1 ether) : 0;  // Assume tournamentFeePercent is defined\\r\\n\\r\\n        // Update the contract state\\r\\n        vipBadgeSupply[key] -= amount;\\r\\n        vipBadgeBalance[key][msg.sender] -= amount;\\r\\n        tournament.vipPooledEth += tournamentFee;\\r\\n\\r\\n        TradeInfo memory tradeInfo = TradeInfo({\\r\\n            trader: msg.sender,\\r\\n            eventByte: key,\\r\\n            isBuy: false,\\r\\n            badgeAmount: amount,\\r\\n            ethAmount: price,\\r\\n            protocolEthAmount: protocolFee,\\r\\n            subjectEthAmount: subjectFee,\\r\\n            tournamentEthAmount: tournamentFee,\\r\\n            supply: vipBadgeSupply[key],\\r\\n            pooledEth: tournament.vipPooledEth\\r\\n        });\\r\\n\\r\\n        emit Trade(tradeInfo);\\r\\n\\r\\n        // Send protocol and subject fees\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        // Send the remaining amount to the seller\\r\\n        uint256 netAmount = price - protocolFee - subjectFee - tournamentFee;\\r\\n        (bool success3, ) = msg.sender.call{value: netAmount}(\\\"\\\");\\r\\n        require(success3, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n\\r\\n    function claimTournamentPayout() public nonReentrant {\\r\\n        require(tournament.isPayoutClaimable, \\\"Winner payout not allowed right now\\\");\\r\\n        require(vipBadgeBalance[tournament.winningBadge][msg.sender] > 0, \\\"No VIP badges to claim payout for.\\\");\\r\\n        uint256 totalPool = tournament.vipPooledEth;\\r\\n        uint256 totalWinningShares = vipBadgeSupply[tournament.winningBadge];\\r\\n        uint256 userPayout = totalWinningShares == 0 ? 0 : (totalPool * vipBadgeBalance[tournament.winningBadge][msg.sender] / totalWinningShares);\\r\\n        require(userPayout > 0, \\\"No payout for user\\\");\\r\\n\\r\\n        // Reset user's shares after distributing\\r\\n        vipBadgeSupply[tournament.winningBadge] -= vipBadgeBalance[tournament.winningBadge][msg.sender];\\r\\n        vipBadgeBalance[tournament.winningBadge][msg.sender] = 0;\\r\\n\\r\\n        // Deduct the user's payout from the sharesSubject's pool\\r\\n        tournament.vipPooledEth -= userPayout;\\r\\n\\r\\n        emit Payout(msg.sender, userPayout);\\r\\n        (bool success, ) = msg.sender.call{value: userPayout}(\\\"\\\");\\r\\n        require(success, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x5ae400257dad165562dbc18f7d07fc12b6a429096b5b576cd12cf1fc2fd16f25\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c806372641ecd11610102578063c94892f011610095578063effb67e611610064578063effb67e6146106c6578063f2fde38b146106ef578063fbe5323414610718578063fcebcf5e14610741576101d8565b8063c94892f0146105e4578063d6e6eb9f14610621578063d87986fe1461064c578063e8b9af5114610689576101d8565b8063a4983421116100d1578063a49834211461053e578063ac210a5d14610567578063bb47380a14610590578063bf559d11146105cd576101d8565b806372641ecd14610482578063775c1e5d146104bf5780637788c25f146104fc5780638da5cb5b14610513576101d8565b806348c2dde81161017a5780635a8a764e116101495780635a8a764e146103dc5780635ad92eea146104055780635cf4ee911461042e578063715018a61461046b576101d8565b806348c2dde8146103345780634ce7957c1461035d5780634d633a8f146103885780635564285d1461039f576101d8565b806324dc441d116101b657806324dc441d146102855780633aecedd2146102b0578063451aea50146102ed578063483ccffe14610309576101d8565b80630d734519146101dd57806317798d011461021a5780631e0197e214610257575b600080fd5b3480156101e957600080fd5b5061020460048036038101906101ff91906128b5565b61077e565b6040516102119190612921565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c919061293c565b610861565b60405161024e91906129b2565b60405180910390f35b34801561026357600080fd5b5061026c610908565b60405161027c94939291906129e8565b60405180910390f35b34801561029157600080fd5b5061029a610940565b6040516102a791906129b2565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d2919061293c565b610946565b6040516102e491906129b2565b60405180910390f35b6103076004803603810190610302919061293c565b610a7e565b005b34801561031557600080fd5b5061031e610f8b565b60405161032b91906129b2565b60405180910390f35b34801561034057600080fd5b5061035b6004803603810190610356919061293c565b610f91565b005b34801561036957600080fd5b506103726115bc565b60405161037f9190612a3c565b60405180910390f35b34801561039457600080fd5b5061039d6115e2565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190612a57565b611733565b6040516103d391906129b2565b60405180910390f35b3480156103e857600080fd5b5061040360048036038101906103fe9190612abe565b611808565b005b34801561041157600080fd5b5061042c600480360381019061042791906128b5565b61181a565b005b34801561043a57600080fd5b5061045560048036038101906104509190612aeb565b611a0e565b60405161046291906129b2565b60405180910390f35b34801561047757600080fd5b50610480611b61565b005b34801561048e57600080fd5b506104a960048036038101906104a49190612b2b565b611b75565b6040516104b691906129b2565b60405180910390f35b3480156104cb57600080fd5b506104e660048036038101906104e191906128b5565b611c48565b6040516104f391906129b2565b60405180910390f35b34801561050857600080fd5b50610511611cdf565b005b34801561051f57600080fd5b506105286120bb565b6040516105359190612a3c565b60405180910390f35b34801561054a57600080fd5b5061056560048036038101906105609190612abe565b6120e4565b005b34801561057357600080fd5b5061058e60048036038101906105899190612b84565b6120f6565b005b34801561059c57600080fd5b506105b760048036038101906105b2919061293c565b612159565b6040516105c491906129b2565b60405180910390f35b3480156105d957600080fd5b506105e261221f565b005b3480156105f057600080fd5b5061060b60048036038101906106069190612b2b565b6123d7565b6040516106189190612bc4565b60405180910390f35b34801561062d57600080fd5b506106366123f7565b60405161064391906129b2565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e9190612c0b565b6123fd565b60405161068091906129b2565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab919061293c565b612415565b6040516106bd91906129b2565b60405180910390f35b3480156106d257600080fd5b506106ed60048036038101906106e89190612abe565b61254d565b005b3480156106fb57600080fd5b5061071660048036038101906107119190612b2b565b61255f565b005b34801561072457600080fd5b5061073f600480360381019061073a9190612b2b565b6125e3565b005b34801561074d57600080fd5b5061076860048036038101906107639190612c38565b61262f565b60405161077591906129b2565b60405180910390f35b60008160018081111561079457610793612c78565b5b8160018111156107a7576107a6612c78565b5b146107e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107de90612d04565b60405180910390fd5b620f4240841061082c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082390612d70565b60405180910390fd5b84848460405160200161084193929190612e68565b604051602081830303815290604052805190602001209150509392505050565b60008260018081111561087757610876612c78565b5b81600181111561088a57610889612c78565b5b146108ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c190612d04565b60405180910390fd5b60006108d787878761077e565b90506000600960008381526020019081526020016000205490506108fb8186611a0e565b9350505050949350505050565b60028060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154908060020154905084565b60075481565b60008260018081111561095c5761095b612c78565b5b81600181111561096f5761096e612c78565b5b146109af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a690612d04565b60405180910390fd5b60006109bd87878787612159565b90506000670de0b6b3a7640000600654836109d89190612ed4565b6109e29190612f5d565b90506000670de0b6b3a7640000600754846109fd9190612ed4565b610a079190612f5d565b90506000600260000160009054906101000a900460ff16610a29576000610a4b565b670de0b6b3a764000060085485610a409190612ed4565b610a4a9190612f5d565b5b905080828486610a5b9190612f8e565b610a659190612f8e565b610a6f9190612f8e565b95505050505050949350505050565b81600180811115610a9257610a91612c78565b5b816001811115610aa557610aa4612c78565b5b14610ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adc90612d04565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e90613034565b60405180910390fd5b60008211610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb1906130a0565b60405180910390fd5b6000610bc786868661077e565b90506000610be8600960008481526020019081526020016000205485611a0e565b90506000670de0b6b3a764000060065483610c039190612ed4565b610c0d9190612f5d565b90506000670de0b6b3a764000060075484610c289190612ed4565b610c329190612f5d565b90506000600260000160009054906101000a900460ff16610c54576000610c76565b670de0b6b3a764000060085485610c6b9190612ed4565b610c759190612f5d565b5b905080828486610c8691906130c0565b610c9091906130c0565b610c9a91906130c0565b341015610cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd390613162565b60405180910390fd5b86600960008781526020019081526020016000206000828254610cff91906130c0565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d6691906130c0565b9250508190555080600280016000828254610d8191906130c0565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160011515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf81604051610e31919061328a565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1685604051610e81906132d7565b60006040518083038185875af1925050503d8060008114610ebe576040519150601f19603f3d011682016040523d82523d6000602084013e610ec3565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff1685604051610eed906132d7565b60006040518083038185875af1925050503d8060008114610f2a576040519150601f19603f3d011682016040523d82523d6000602084013e610f2f565b606091505b50509050818015610f3d5750805b610f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7390613338565b60405180910390fd5b50505050505050505050505050565b60085481565b81600180811115610fa557610fa4612c78565b5b816001811115610fb857610fb7612c78565b5b14610ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fef90612d04565b60405180910390fd5b611000612654565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611092576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108990613034565b60405180910390fd5b600082116110d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cc906130a0565b60405180910390fd5b60006110e286868661077e565b905082600a600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116e906133a4565b60405180910390fd5b60006111a184600960008581526020019081526020016000205461119b9190612f8e565b85611a0e565b90506000670de0b6b3a7640000600654836111bc9190612ed4565b6111c69190612f5d565b90506000670de0b6b3a7640000600754846111e19190612ed4565b6111eb9190612f5d565b90506000600260000160009054906101000a900460ff1661120d57600061122f565b670de0b6b3a7640000600854856112249190612ed4565b61122e9190612f5d565b5b9050866009600087815260200190815260200160002060008282546112549190612f8e565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112bb9190612f8e565b92505081905550806002800160008282546112d691906130c0565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160001515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf81604051611386919061328a565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16856040516113d6906132d7565b60006040518083038185875af1925050503d8060008114611413576040519150601f19603f3d011682016040523d82523d6000602084013e611418565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff1685604051611442906132d7565b60006040518083038185875af1925050503d806000811461147f576040519150601f19603f3d011682016040523d82523d6000602084013e611484565b606091505b505090508180156114925750805b6114d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c890613338565b60405180910390fd5b60008486888a6114e19190612f8e565b6114eb9190612f8e565b6114f59190612f8e565b905060003373ffffffffffffffffffffffffffffffffffffffff168260405161151d906132d7565b60006040518083038185875af1925050503d806000811461155a576040519150601f19603f3d011682016040523d82523d6000602084013e61155f565b606091505b50509050806115a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159a90613338565b60405180910390fd5b505050505050505050506115b56126a4565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661166e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166590613436565b60405180910390fd5b600260000160009054906101000a900460ff16156116c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b8906134a2565b60405180910390fd5b600260000160019054906101000a900460ff16611713576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170a9061350e565b60405180910390fd5b6000600260000160016101000a81548160ff021916908315150217905550565b60008260018081111561174957611748612c78565b5b81600181111561175c5761175b612c78565b5b1461179c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179390612d04565b60405180910390fd5b60006117a987878761077e565b9050600a600082815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505050949350505050565b6118106126ad565b8060078190555050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189d90613436565b60405180910390fd5b806001808111156118ba576118b9612c78565b5b8160018111156118cd576118cc612c78565b5b1461190d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190490612d04565b60405180910390fd5b600260000160009054906101000a900460ff1661195f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119569061357a565b60405180910390fd5b600260000160019054906101000a900460ff16156119b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a9906135e6565b60405180910390fd5b60006119bf85858561077e565b9050806002600101819055506001600260000160016101000a81548160ff0219169083151502179055506000600260000160006101000a81548160ff0219169083151502179055505050505050565b60008083148015611a1f5750600082145b15611a2d5760009050611b5b565b6000808414611a8d57600660018086611a469190612f8e565b6002611a529190612ed4565b611a5c91906130c0565b85600187611a6a9190612f8e565b611a749190612ed4565b611a7e9190612ed4565b611a889190612f5d565b611a90565b60005b905060008085148015611aa35750600184145b611b1f5760066001808787611ab891906130c0565b611ac29190612f8e565b6002611ace9190612ed4565b611ad891906130c0565b8587611ae491906130c0565b60018888611af291906130c0565b611afc9190612f8e565b611b069190612ed4565b611b109190612ed4565b611b1a9190612f5d565b611b22565b60005b905060008282611b329190612f8e565b9050617d00670de0b6b3a764000082611b4b9190612ed4565b611b559190612f5d565b93505050505b92915050565b611b696126ad565b611b73600061272b565b565b6000600260000160019054906101000a900460ff16611b975760009050611c43565b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611c375781600a6000600260010154815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611c289190612ed4565b611c329190612f5d565b611c3a565b60005b90508093505050505b919050565b600081600180811115611c5e57611c5d612c78565b5b816001811115611c7157611c70612c78565b5b14611cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca890612d04565b60405180910390fd5b6000611cbe86868661077e565b90506009600082815260200190815260200160002054925050509392505050565b611ce7612654565b600260000160019054906101000a900460ff16611d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3090613678565b60405180910390fd5b6000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc89061370a565b60405180910390fd5b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611e715781600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611e629190612ed4565b611e6c9190612f5d565b611e74565b60005b905060008111611eb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb090613776565b60405180910390fd5b600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546009600060026001015481526020019081526020016000206000828254611f369190612f8e565b925050819055506000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600280016000828254611fac9190612f8e565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a682604051611ff991906129b2565b60405180910390a260003373ffffffffffffffffffffffffffffffffffffffff1682604051612027906132d7565b60006040518083038185875af1925050503d8060008114612064576040519150601f19603f3d011682016040523d82523d6000602084013e612069565b606091505b50509050806120ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a490613338565b60405180910390fd5b505050506120b96126a4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6120ec6126ad565b8060068190555050565b6120fe6126ad565b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008260018081111561216f5761216e612c78565b5b81600181111561218257612181612c78565b5b146121c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b990612d04565b60405180910390fd5b60006121cf87878761077e565b9050600060096000838152602001908152602001600020549050848110156121fc57600093505050612216565b612211858261220b9190612f8e565b86611a0e565b935050505b50949350505050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166122ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a290613436565b60405180910390fd5b600260000160009054906101000a900460ff16156122fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f5906137e2565b60405180910390fd5b600260000160019054906101000a900460ff1615612351576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123489061384e565b60405180910390fd5b60405180608001604052806001151581526020016000151581526020016000801b81526020016000815250600260008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001015560608201518160020155905050565b600b6020528060005260406000206000915054906101000a900460ff1681565b60065481565b60096020528060005260406000206000915090505481565b60008260018081111561242b5761242a612c78565b5b81600181111561243e5761243d612c78565b5b1461247e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247590612d04565b60405180910390fd5b600061248c87878787610861565b90506000670de0b6b3a7640000600654836124a79190612ed4565b6124b19190612f5d565b90506000670de0b6b3a7640000600754846124cc9190612ed4565b6124d69190612f5d565b90506000600260000160009054906101000a900460ff166124f857600061251a565b670de0b6b3a76400006008548561250f9190612ed4565b6125199190612f5d565b5b90508082848661252a91906130c0565b61253491906130c0565b61253e91906130c0565b95505050505050949350505050565b6125556126ad565b8060088190555050565b6125676126ad565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ce906138e0565b60405180910390fd5b6125e08161272b565b50565b6125eb6126ad565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a602052816000526040600020602052806000526040600020600091509150505481565b6002600154141561269a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126919061394c565b60405180910390fd5b6002600181905550565b60018081905550565b6126b56127ef565b73ffffffffffffffffffffffffffffffffffffffff166126d36120bb565b73ffffffffffffffffffffffffffffffffffffffff1614612729576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612720906139b8565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612827826127fc565b9050919050565b6128378161281c565b811461284257600080fd5b50565b6000813590506128548161282e565b92915050565b6000819050919050565b61286d8161285a565b811461287857600080fd5b50565b60008135905061288a81612864565b92915050565b6002811061289d57600080fd5b50565b6000813590506128af81612890565b92915050565b6000806000606084860312156128ce576128cd6127f7565b5b60006128dc86828701612845565b93505060206128ed8682870161287b565b92505060406128fe868287016128a0565b9150509250925092565b6000819050919050565b61291b81612908565b82525050565b60006020820190506129366000830184612912565b92915050565b60008060008060808587031215612956576129556127f7565b5b600061296487828801612845565b94505060206129758782880161287b565b9350506040612986878288016128a0565b92505060606129978782880161287b565b91505092959194509250565b6129ac8161285a565b82525050565b60006020820190506129c760008301846129a3565b92915050565b60008115159050919050565b6129e2816129cd565b82525050565b60006080820190506129fd60008301876129d9565b612a0a60208301866129d9565b612a176040830185612912565b612a2460608301846129a3565b95945050505050565b612a368161281c565b82525050565b6000602082019050612a516000830184612a2d565b92915050565b60008060008060808587031215612a7157612a706127f7565b5b6000612a7f87828801612845565b9450506020612a908782880161287b565b9350506040612aa1878288016128a0565b9250506060612ab287828801612845565b91505092959194509250565b600060208284031215612ad457612ad36127f7565b5b6000612ae28482850161287b565b91505092915050565b60008060408385031215612b0257612b016127f7565b5b6000612b108582860161287b565b9250506020612b218582860161287b565b9150509250929050565b600060208284031215612b4157612b406127f7565b5b6000612b4f84828501612845565b91505092915050565b612b61816129cd565b8114612b6c57600080fd5b50565b600081359050612b7e81612b58565b92915050565b60008060408385031215612b9b57612b9a6127f7565b5b6000612ba985828601612845565b9250506020612bba85828601612b6f565b9150509250929050565b6000602082019050612bd960008301846129d9565b92915050565b612be881612908565b8114612bf357600080fd5b50565b600081359050612c0581612bdf565b92915050565b600060208284031215612c2157612c206127f7565b5b6000612c2f84828501612bf6565b91505092915050565b60008060408385031215612c4f57612c4e6127f7565b5b6000612c5d85828601612bf6565b9250506020612c6e85828601612845565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f496e76616c6964206576656e7420747970650000000000000000000000000000600082015250565b6000612cee601283612ca7565b9150612cf982612cb8565b602082019050919050565b60006020820190508181036000830152612d1d81612ce1565b9050919050565b7f4944206d757374206265206c657373207468616e2031206d696c6c696f6e0000600082015250565b6000612d5a601e83612ca7565b9150612d6582612d24565b602082019050919050565b60006020820190508181036000830152612d8981612d4d565b9050919050565b60008160601b9050919050565b6000612da882612d90565b9050919050565b6000612dba82612d9d565b9050919050565b612dd2612dcd8261281c565b612daf565b82525050565b6000819050919050565b612df3612dee8261285a565b612dd8565b82525050565b60028110612e0a57612e09612c78565b5b50565b6000819050612e1b82612df9565b919050565b6000612e2b82612e0d565b9050919050565b60008160f81b9050919050565b6000612e4a82612e32565b9050919050565b612e62612e5d82612e20565b612e3f565b82525050565b6000612e748286612dc1565b601482019150612e848285612de2565b602082019150612e948284612e51565b600182019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612edf8261285a565b9150612eea8361285a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612f2357612f22612ea5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612f688261285a565b9150612f738361285a565b925082612f8357612f82612f2e565b5b828204905092915050565b6000612f998261285a565b9150612fa48361285a565b925082821015612fb757612fb6612ea5565b5b828203905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600061301e602a83612ca7565b915061302982612fc2565b604082019050919050565b6000602082019050818103600083015261304d81613011565b9050919050565b7f43616e6e6f7420627579207a65726f2062616467657300000000000000000000600082015250565b600061308a601683612ca7565b915061309582613054565b602082019050919050565b600060208201905081810360008301526130b98161307d565b9050919050565b60006130cb8261285a565b91506130d68361285a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561310b5761310a612ea5565b5b828201905092915050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b600061314c601483612ca7565b915061315782613116565b602082019050919050565b6000602082019050818103600083015261317b8161313f565b9050919050565b61318b8161281c565b82525050565b61319a81612908565b82525050565b6131a9816129cd565b82525050565b6131b88161285a565b82525050565b610140820160008201516131d56000850182613182565b5060208201516131e86020850182613191565b5060408201516131fb60408501826131a0565b50606082015161320e60608501826131af565b50608082015161322160808501826131af565b5060a082015161323460a08501826131af565b5060c082015161324760c08501826131af565b5060e082015161325a60e08501826131af565b5061010082015161326f6101008501826131af565b506101208201516132846101208501826131af565b50505050565b6000610140820190506132a060008301846131be565b92915050565b600081905092915050565b50565b60006132c16000836132a6565b91506132cc826132b1565b600082019050919050565b60006132e2826132b4565b9150819050919050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b6000613322601483612ca7565b915061332d826132ec565b602082019050919050565b6000602082019050818103600083015261335181613315565b9050919050565b7f496e73756666696369656e742062616467657300000000000000000000000000600082015250565b600061338e601383612ca7565b915061339982613358565b602082019050919050565b600060208201905081810360008301526133bd81613381565b9050919050565b7f43616c6c6572206973206e6f74206120746f75726e616d656e7420637265617460008201527f6f72000000000000000000000000000000000000000000000000000000000000602082015250565b6000613420602283612ca7565b915061342b826133c4565b604082019050919050565b6000602082019050818103600083015261344f81613413565b9050919050565b7f546f75726e616d656e74207374696c6c206163746976652e0000000000000000600082015250565b600061348c601883612ca7565b915061349782613456565b602082019050919050565b600060208201905081810360008301526134bb8161347f565b9050919050565b7f57696e6e6572207061796f75747320616c72656164792073746f707065642e00600082015250565b60006134f8601f83612ca7565b9150613503826134c2565b602082019050919050565b60006020820190508181036000830152613527816134eb565b9050919050565b7f546f75726e616d656e74206973206e6f74206163746976652e00000000000000600082015250565b6000613564601983612ca7565b915061356f8261352e565b602082019050919050565b6000602082019050818103600083015261359381613557565b9050919050565b7f57696e6e6572207061796f75747320616c726561647920616c6c6f7765642e00600082015250565b60006135d0601f83612ca7565b91506135db8261359a565b602082019050919050565b600060208201905081810360008301526135ff816135c3565b9050919050565b7f57696e6e6572207061796f7574206e6f7420616c6c6f7765642072696768742060008201527f6e6f770000000000000000000000000000000000000000000000000000000000602082015250565b6000613662602383612ca7565b915061366d82613606565b604082019050919050565b6000602082019050818103600083015261369181613655565b9050919050565b7f4e6f205649502062616467657320746f20636c61696d207061796f757420666f60008201527f722e000000000000000000000000000000000000000000000000000000000000602082015250565b60006136f4602283612ca7565b91506136ff82613698565b604082019050919050565b60006020820190508181036000830152613723816136e7565b9050919050565b7f4e6f207061796f757420666f7220757365720000000000000000000000000000600082015250565b6000613760601283612ca7565b915061376b8261372a565b602082019050919050565b6000602082019050818103600083015261378f81613753565b9050919050565b7f546f75726e616d656e7420697320616c7265616479206163746976652e000000600082015250565b60006137cc601d83612ca7565b91506137d782613796565b602082019050919050565b600060208201905081810360008301526137fb816137bf565b9050919050565b7f57696e6e6572207061796f757473207374696c6c20616c6c6f7765642e000000600082015250565b6000613838601d83612ca7565b915061384382613802565b602082019050919050565b600060208201905081810360008301526138678161382b565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006138ca602683612ca7565b91506138d58261386e565b604082019050919050565b600060208201905081810360008301526138f9816138bd565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613936601f83612ca7565b915061394182613900565b602082019050919050565b6000602082019050818103600083015261396581613929565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006139a2602083612ca7565b91506139ad8261396c565b602082019050919050565b600060208201905081810360008301526139d181613995565b905091905056fea2646970667358221220bed0abe90e8e96611d75fae3dd70485a4bdd91a6b8fa645c52e86b7ba5d6f47264736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1646,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1791,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "tournament",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Tournament)1767_storage"
      },
      {
        "astId": 1793,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "protocolFeeDestination",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1795,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "protocolFeePercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1797,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "subjectFeePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1799,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "tournamentFeePercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1814,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "vipBadgeSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1820,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "vipBadgeBalance",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1824,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "isTournamentCreator",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Tournament)1767_storage": {
        "encoding": "inplace",
        "label": "struct UnlonelyTournament.Tournament",
        "members": [
          {
            "astId": 1760,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1762,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "isPayoutClaimable",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1764,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "winningBadge",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1766,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "vipPooledEth",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}