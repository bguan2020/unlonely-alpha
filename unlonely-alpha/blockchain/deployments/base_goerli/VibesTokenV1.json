{
  "address": "0x994005256A268953C0620e8983DcB9900c097914",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maximumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BurnAmountTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "EtherTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_streamerAddress",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnProceedsAfterFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_streamerAddress",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintCostAfterFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "setFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setStreamerFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamerFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x01560dd9d47bec19b3c91f712bdd746f0c210ad1a0fc5ba7807308e22823f77a",
  "receipt": {
    "to": null,
    "from": "0x4F3d3f2F895Db524AC3944BDd17fE632473bCa4a",
    "contractAddress": "0x994005256A268953C0620e8983DcB9900c097914",
    "transactionIndex": 1,
    "gasUsed": "2681255",
    "logsBloom": "0x00000000000000000000000008000000000000000008000000800000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000020000000000000000000000000000000008000000000000000000000000000000000",
    "blockHash": "0x0fa4a91998708fe724d4836b3009d7df1be85aa20cccceb6c261e2de105e0f1d",
    "transactionHash": "0x01560dd9d47bec19b3c91f712bdd746f0c210ad1a0fc5ba7807308e22823f77a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 14650358,
        "transactionHash": "0x01560dd9d47bec19b3c91f712bdd746f0c210ad1a0fc5ba7807308e22823f77a",
        "address": "0x994005256A268953C0620e8983DcB9900c097914",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f3d3f2f895db524ac3944bdd17fe632473bca4a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0fa4a91998708fe724d4836b3009d7df1be85aa20cccceb6c261e2de105e0f1d"
      }
    ],
    "blockNumber": 14650358,
    "cumulativeGasUsed": "2728096",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Vibes",
    "VIBES"
  ],
  "numDeployments": 1,
  "solcInputHash": "dbc6e0ddbb1b2753f00bd593bdcb81ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EtherTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_streamerAddress\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnProceedsAfterFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_streamerAddress\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintCostAfterFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setStreamerFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamerFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VibesTokenV1.sol\":\"VibesTokenV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VibesTokenV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract VibesTokenV1 is ERC20, Ownable {\\r\\n    address public protocolFeeDestination;\\r\\n    uint256 public protocolFeePercent;\\r\\n    uint256 public streamerFeePercent;\\r\\n\\r\\n    event Mint(address indexed minter, uint256 amount, address indexed streamerAddress, uint256 indexed totalSupply);\\r\\n    event Burn(address indexed burner, uint256 amount, address indexed streamerAddress, uint256 indexed totalSupply);\\r\\n\\r\\n    error InsufficientValue(uint256 minimumValue, uint256 value);\\r\\n    error BurnAmountTooHigh(uint256 maximumAmount, uint256 amount);\\r\\n    error EtherTransferFailed(address to, uint256 value);\\r\\n\\r\\n    modifier requireFeeDestination() {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\r\\n        protocolFeePercent = 2 * 10**16; // 2%\\r\\n        streamerFeePercent = 2 * 10**16;  // 2%\\r\\n    }\\r\\n\\r\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\r\\n        protocolFeeDestination = _feeDestination;\\r\\n    }\\r\\n\\r\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        protocolFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setStreamerFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        streamerFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _amount, address _streamerAddress) external payable requireFeeDestination {\\r\\n        require(_streamerAddress != address(0), \\\"_streamerAddress is a zero address\\\");\\r\\n        uint256 cost = mintCost(_amount);\\r\\n        uint256 protocolFee = cost * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = cost * streamerFeePercent / 1 ether;\\r\\n        uint256 totalCost = cost + protocolFee + subjectFee;\\r\\n\\r\\n        if (msg.value < totalCost) {\\r\\n            revert InsufficientValue(totalCost, msg.value);\\r\\n        }\\r\\n\\r\\n        _mint(msg.sender, _amount);\\r\\n\\r\\n        if(msg.value > totalCost) {\\r\\n            (bool sent,) = msg.sender.call{value: msg.value - totalCost}(\\\"\\\");\\r\\n            if (!sent) {\\r\\n                revert EtherTransferFailed(msg.sender, msg.value - totalCost);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = _streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        emit Mint(msg.sender, _amount, _streamerAddress, totalSupply());\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _amount, address _streamerAddress) external requireFeeDestination {\\r\\n        require(_streamerAddress != address(0), \\\"_streamerAddress is a zero address\\\");\\r\\n        if (_amount > balanceOf(msg.sender)) {\\r\\n            revert BurnAmountTooHigh(balanceOf(msg.sender), _amount);\\r\\n        }\\r\\n\\r\\n        // Calculate refund before burn, to use the totalSupply before the burn\\r\\n        uint256 proceeds = burnProceeds(_amount);\\r\\n        uint256 protocolFee = proceeds * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = proceeds * streamerFeePercent / 1 ether;\\r\\n\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        (bool sent,) = msg.sender.call{value: proceeds - protocolFee - subjectFee}(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert EtherTransferFailed(msg.sender, proceeds - protocolFee - subjectFee);\\r\\n        }\\r\\n\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = _streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        emit Burn(msg.sender, _amount, _streamerAddress, totalSupply());\\r\\n    }\\r\\n\\r\\n    function mintCost(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all tokens already minted\\r\\n        uint256 sumPricesCurrentTotalSupply = _sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens already minted + the tokens to be newly minted\\r\\n        uint256 sumPricesNewTotalSupply = _sumOfPriceToNTokens(totalSupply() + _amount);\\r\\n\\r\\n        return sumPricesNewTotalSupply - sumPricesCurrentTotalSupply;\\r\\n    }\\r\\n    \\r\\n    function mintCostAfterFees(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all tokens already minted\\r\\n        uint256 sumPricesCurrentTotalSupply = _sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens already minted + the tokens to be newly minted\\r\\n        uint256 sumPricesNewTotalSupply = _sumOfPriceToNTokens(totalSupply() + _amount);\\r\\n        uint256 sumDiff = sumPricesNewTotalSupply - sumPricesCurrentTotalSupply;\\r\\n\\r\\n        uint256 protocolFee = sumDiff * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = sumDiff * streamerFeePercent / 1 ether;\\r\\n        uint256 totalCost = sumDiff + protocolFee + subjectFee;\\r\\n\\r\\n        return totalCost;\\r\\n    }\\r\\n\\r\\n    function burnProceeds(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all the tokens already minted\\r\\n        uint256 sumBeforeBurn = _sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens after burning _amount\\r\\n        uint256 sumAfterBurn = _sumOfPriceToNTokens(totalSupply() - _amount);\\r\\n\\r\\n        return sumBeforeBurn - sumAfterBurn;\\r\\n    }\\r\\n\\r\\n    function burnProceedsAfterFees(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all the tokens already minted\\r\\n        uint256 sumBeforeBurn = _sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens after burning _amount\\r\\n        uint256 sumAfterBurn = _sumOfPriceToNTokens(totalSupply() - _amount);\\r\\n\\r\\n        uint256 sumDiff = sumBeforeBurn - sumAfterBurn;\\r\\n\\r\\n        uint256 protocolFee = sumDiff * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = sumDiff * streamerFeePercent / 1 ether;\\r\\n        uint256 proceeds = sumDiff - protocolFee - subjectFee;\\r\\n\\r\\n        return proceeds;\\r\\n    }\\r\\n\\r\\n    function decimals() pure public override returns (uint8) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    // The price of *all* tokens from number 1 to n.\\r\\n    function _sumOfPriceToNTokens(uint256 n_) internal pure returns (uint256) {\\r\\n        return n_ * (n_ + 1) * (2 * n_ + 1) / 6;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9d8e60f96bc7dcbb9afdaf3684a7cb776137fe33ada9a50d02634d545e8fd4fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200321f3803806200321f8339818101604052810190620000379190620003cc565b81818160039080519060200190620000519291906200017f565b5080600490805190602001906200006a9291906200017f565b5050506200008d62000081620000b160201b60201c565b620000b960201b60201c565b66470de4df82000060078190555066470de4df8200006008819055505050620004b6565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200018d9062000480565b90600052602060002090601f016020900481019282620001b15760008555620001fd565b82601f10620001cc57805160ff1916838001178555620001fd565b82800160010185558215620001fd579182015b82811115620001fc578251825591602001919060010190620001df565b5b5090506200020c919062000210565b5090565b5b808211156200022b57600081600090555060010162000211565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000298826200024d565b810181811067ffffffffffffffff82111715620002ba57620002b96200025e565b5b80604052505050565b6000620002cf6200022f565b9050620002dd82826200028d565b919050565b600067ffffffffffffffff8211156200030057620002ff6200025e565b5b6200030b826200024d565b9050602081019050919050565b60005b83811015620003385780820151818401526020810190506200031b565b8381111562000348576000848401525b50505050565b6000620003656200035f84620002e2565b620002c3565b90508281526020810184848401111562000384576200038362000248565b5b6200039184828562000318565b509392505050565b600082601f830112620003b157620003b062000243565b5b8151620003c38482602086016200034e565b91505092915050565b60008060408385031215620003e657620003e562000239565b5b600083015167ffffffffffffffff8111156200040757620004066200023e565b5b620004158582860162000399565b925050602083015167ffffffffffffffff8111156200043957620004386200023e565b5b620004478582860162000399565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049957607f821691505b60208210811415620004b057620004af62000451565b5b50919050565b612d5980620004c66000396000f3fe6080604052600436106101815760003560e01c806394bf804d116100d1578063d6e6eb9f1161008a578063f2fde38b11610064578063f2fde38b146105d7578063f46d932414610600578063fbe532341461062b578063fcd3533c1461065457610181565b8063d6e6eb9f14610532578063d7e894661461055d578063dd62ed3e1461059a57610181565b806394bf804d1461040b57806395d89b4114610427578063a457c2d714610452578063a49834211461048f578063a9059cbb146104b8578063c5a1d5e2146104f557610181565b806338cb037a1161013e57806370a082311161011857806370a0823114610363578063715018a6146103a05780637a31c185146103b75780638da5cb5b146103e057610181565b806338cb037a146102be57806339509351146102fb5780634ce7957c1461033857610181565b806306fdde0314610186578063095ea7b3146101b157806318160ddd146101ee57806323b872dd1461021957806327de8f2714610256578063313ce56714610293575b600080fd5b34801561019257600080fd5b5061019b61067d565b6040516101a89190611fd8565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d39190612093565b61070f565b6040516101e591906120ee565b60405180910390f35b3480156101fa57600080fd5b50610203610732565b6040516102109190612118565b60405180910390f35b34801561022557600080fd5b50610240600480360381019061023b9190612133565b61073c565b60405161024d91906120ee565b60405180910390f35b34801561026257600080fd5b5061027d60048036038101906102789190612186565b61076b565b60405161028a9190612118565b60405180910390f35b34801561029f57600080fd5b506102a86107b4565b6040516102b591906121cf565b60405180910390f35b3480156102ca57600080fd5b506102e560048036038101906102e09190612186565b6107b9565b6040516102f29190612118565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d9190612093565b610870565b60405161032f91906120ee565b60405180910390f35b34801561034457600080fd5b5061034d6108a7565b60405161035a91906121f9565b60405180910390f35b34801561036f57600080fd5b5061038a60048036038101906103859190612214565b6108cd565b6040516103979190612118565b60405180910390f35b3480156103ac57600080fd5b506103b5610915565b005b3480156103c357600080fd5b506103de60048036038101906103d99190612186565b610929565b005b3480156103ec57600080fd5b506103f561093b565b60405161040291906121f9565b60405180910390f35b61042560048036038101906104209190612241565b610965565b005b34801561043357600080fd5b5061043c610db4565b6040516104499190611fd8565b60405180910390f35b34801561045e57600080fd5b5061047960048036038101906104749190612093565b610e46565b60405161048691906120ee565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b19190612186565b610ebd565b005b3480156104c457600080fd5b506104df60048036038101906104da9190612093565b610ecf565b6040516104ec91906120ee565b60405180910390f35b34801561050157600080fd5b5061051c60048036038101906105179190612186565b610ef2565b6040516105299190612118565b60405180910390f35b34801561053e57600080fd5b50610547610fa9565b6040516105549190612118565b60405180910390f35b34801561056957600080fd5b50610584600480360381019061057f9190612186565b610faf565b6040516105919190612118565b60405180910390f35b3480156105a657600080fd5b506105c160048036038101906105bc9190612281565b610ff8565b6040516105ce9190612118565b60405180910390f35b3480156105e357600080fd5b506105fe60048036038101906105f99190612214565b61107f565b005b34801561060c57600080fd5b50610615611103565b6040516106229190612118565b60405180910390f35b34801561063757600080fd5b50610652600480360381019061064d9190612214565b611109565b005b34801561066057600080fd5b5061067b60048036038101906106769190612241565b611155565b005b60606003805461068c906122f0565b80601f01602080910402602001604051908101604052809291908181526020018280546106b8906122f0565b80156107055780601f106106da57610100808354040283529160200191610705565b820191906000526020600020905b8154815290600101906020018083116106e857829003601f168201915b5050505050905090565b60008061071a6115a5565b90506107278185856115ad565b600191505092915050565b6000600254905090565b6000806107476115a5565b9050610754858285611778565b61075f858585611804565b60019150509392505050565b60008061077e610779610732565b611a7c565b9050600061079d8461078e610732565b6107989190612351565b611a7c565b905081816107ab91906123a7565b92505050919050565b600090565b6000806107cc6107c7610732565b611a7c565b905060006107eb846107dc610732565b6107e69190612351565b611a7c565b9050600082826107fb91906123a7565b90506000670de0b6b3a76400006007548361081691906123db565b6108209190612464565b90506000670de0b6b3a76400006008548461083b91906123db565b6108459190612464565b905060008183856108569190612351565b6108609190612351565b9050809650505050505050919050565b60008061087b6115a5565b905061089c81858561088d8589610ff8565b6108979190612351565b6115ad565b600191505092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61091d611acc565b6109276000611b4a565b565b610931611acc565b8060088190555050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee90612507565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5e90612599565b60405180910390fd5b6000610a728361076b565b90506000670de0b6b3a764000060075483610a8d91906123db565b610a979190612464565b90506000670de0b6b3a764000060085484610ab291906123db565b610abc9190612464565b90506000818385610acd9190612351565b610ad79190612351565b905080341015610b205780346040517f7040b58c000000000000000000000000000000000000000000000000000000008152600401610b179291906125b9565b60405180910390fd5b610b2a3387611c10565b80341115610bfa5760003373ffffffffffffffffffffffffffffffffffffffff168234610b5791906123a7565b604051610b6390612613565b60006040518083038185875af1925050503d8060008114610ba0576040519150601f19603f3d011682016040523d82523d6000602084013e610ba5565b606091505b5050905080610bf857338234610bbb91906123a7565b6040517f2c6a51e2000000000000000000000000000000000000000000000000000000008152600401610bef929190612628565b60405180910390fd5b505b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610c4290612613565b60006040518083038185875af1925050503d8060008114610c7f576040519150601f19603f3d011682016040523d82523d6000602084013e610c84565b606091505b5050905060008673ffffffffffffffffffffffffffffffffffffffff1684604051610cae90612613565b60006040518083038185875af1925050503d8060008114610ceb576040519150601f19603f3d011682016040523d82523d6000602084013e610cf0565b606091505b50509050818015610cfe5750805b610d3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d349061269d565b60405180910390fd5b610d45610732565b8773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff3f9b81b1aa7af42b83e33d01a22621ecf67d5ebeb4587a4d63e3737276076818b604051610da29190612118565b60405180910390a45050505050505050565b606060048054610dc3906122f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610def906122f0565b8015610e3c5780601f10610e1157610100808354040283529160200191610e3c565b820191906000526020600020905b815481529060010190602001808311610e1f57829003601f168201915b5050505050905090565b600080610e516115a5565b90506000610e5f8286610ff8565b905083811015610ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9b9061272f565b60405180910390fd5b610eb182868684036115ad565b60019250505092915050565b610ec5611acc565b8060078190555050565b600080610eda6115a5565b9050610ee7818585611804565b600191505092915050565b600080610f05610f00610732565b611a7c565b90506000610f2484610f15610732565b610f1f91906123a7565b611a7c565b905060008183610f3491906123a7565b90506000670de0b6b3a764000060075483610f4f91906123db565b610f599190612464565b90506000670de0b6b3a764000060085484610f7491906123db565b610f7e9190612464565b90506000818385610f8f91906123a7565b610f9991906123a7565b9050809650505050505050919050565b60075481565b600080610fc2610fbd610732565b611a7c565b90506000610fe184610fd2610732565b610fdc91906123a7565b611a7c565b90508082610fef91906123a7565b92505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611087611acc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ee906127c1565b60405180910390fd5b61110081611b4a565b50565b60085481565b611111611acc565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de90612507565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124e90612599565b60405180910390fd5b611260336108cd565b8211156112ae57611270336108cd565b826040517f59efbd200000000000000000000000000000000000000000000000000000000081526004016112a59291906125b9565b60405180910390fd5b60006112b983610faf565b90506000670de0b6b3a7640000600754836112d491906123db565b6112de9190612464565b90506000670de0b6b3a7640000600854846112f991906123db565b6113039190612464565b905061130f3386611d67565b60003373ffffffffffffffffffffffffffffffffffffffff1682848661133591906123a7565b61133f91906123a7565b60405161134b90612613565b60006040518083038185875af1925050503d8060008114611388576040519150601f19603f3d011682016040523d82523d6000602084013e61138d565b606091505b50509050806113eb57338284866113a491906123a7565b6113ae91906123a7565b6040517f2c6a51e20000000000000000000000000000000000000000000000000000000081526004016113e2929190612628565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168460405161143390612613565b60006040518083038185875af1925050503d8060008114611470576040519150601f19603f3d011682016040523d82523d6000602084013e611475565b606091505b5050905060008673ffffffffffffffffffffffffffffffffffffffff168460405161149f90612613565b60006040518083038185875af1925050503d80600081146114dc576040519150601f19603f3d011682016040523d82523d6000602084013e6114e1565b606091505b505090508180156114ef5750805b61152e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115259061269d565b60405180910390fd5b611536610732565b8773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9eaa2feeb3b37bf70a72e15de2e6e61b6f2060b2fb40839961c26bbc238dd2028b6040516115939190612118565b60405180910390a45050505050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561161d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161490612853565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561168d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611684906128e5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161176b9190612118565b60405180910390a3505050565b60006117848484610ff8565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146117fe57818110156117f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e790612951565b60405180910390fd5b6117fd84848484036115ad565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186b906129e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118db90612a75565b60405180910390fd5b6118ef838383611f35565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196c90612b07565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611a639190612118565b60405180910390a3611a76848484611f3a565b50505050565b600060066001836002611a8f91906123db565b611a999190612351565b600184611aa69190612351565b84611ab191906123db565b611abb91906123db565b611ac59190612464565b9050919050565b611ad46115a5565b73ffffffffffffffffffffffffffffffffffffffff16611af261093b565b73ffffffffffffffffffffffffffffffffffffffff1614611b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3f90612b73565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7790612bdf565b60405180910390fd5b611c8c60008383611f35565b8060026000828254611c9e9190612351565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611d4f9190612118565b60405180910390a3611d6360008383611f3a565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dce90612c71565b60405180910390fd5b611de382600083611f35565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6090612d03565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611f1c9190612118565b60405180910390a3611f3083600084611f3a565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f79578082015181840152602081019050611f5e565b83811115611f88576000848401525b50505050565b6000601f19601f8301169050919050565b6000611faa82611f3f565b611fb48185611f4a565b9350611fc4818560208601611f5b565b611fcd81611f8e565b840191505092915050565b60006020820190508181036000830152611ff28184611f9f565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061202a82611fff565b9050919050565b61203a8161201f565b811461204557600080fd5b50565b60008135905061205781612031565b92915050565b6000819050919050565b6120708161205d565b811461207b57600080fd5b50565b60008135905061208d81612067565b92915050565b600080604083850312156120aa576120a9611ffa565b5b60006120b885828601612048565b92505060206120c98582860161207e565b9150509250929050565b60008115159050919050565b6120e8816120d3565b82525050565b600060208201905061210360008301846120df565b92915050565b6121128161205d565b82525050565b600060208201905061212d6000830184612109565b92915050565b60008060006060848603121561214c5761214b611ffa565b5b600061215a86828701612048565b935050602061216b86828701612048565b925050604061217c8682870161207e565b9150509250925092565b60006020828403121561219c5761219b611ffa565b5b60006121aa8482850161207e565b91505092915050565b600060ff82169050919050565b6121c9816121b3565b82525050565b60006020820190506121e460008301846121c0565b92915050565b6121f38161201f565b82525050565b600060208201905061220e60008301846121ea565b92915050565b60006020828403121561222a57612229611ffa565b5b600061223884828501612048565b91505092915050565b6000806040838503121561225857612257611ffa565b5b60006122668582860161207e565b925050602061227785828601612048565b9150509250929050565b6000806040838503121561229857612297611ffa565b5b60006122a685828601612048565b92505060206122b785828601612048565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061230857607f821691505b6020821081141561231c5761231b6122c1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061235c8261205d565b91506123678361205d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561239c5761239b612322565b5b828201905092915050565b60006123b28261205d565b91506123bd8361205d565b9250828210156123d0576123cf612322565b5b828203905092915050565b60006123e68261205d565b91506123f18361205d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561242a57612429612322565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061246f8261205d565b915061247a8361205d565b92508261248a57612489612435565b5b828204905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b60006124f1602a83611f4a565b91506124fc82612495565b604082019050919050565b60006020820190508181036000830152612520816124e4565b9050919050565b7f5f73747265616d6572416464726573732069732061207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612583602283611f4a565b915061258e82612527565b604082019050919050565b600060208201905081810360008301526125b281612576565b9050919050565b60006040820190506125ce6000830185612109565b6125db6020830184612109565b9392505050565b600081905092915050565b50565b60006125fd6000836125e2565b9150612608826125ed565b600082019050919050565b600061261e826125f0565b9150819050919050565b600060408201905061263d60008301856121ea565b61264a6020830184612109565b9392505050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b6000612687601483611f4a565b915061269282612651565b602082019050919050565b600060208201905081810360008301526126b68161267a565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612719602583611f4a565b9150612724826126bd565b604082019050919050565b600060208201905081810360008301526127488161270c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006127ab602683611f4a565b91506127b68261274f565b604082019050919050565b600060208201905081810360008301526127da8161279e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061283d602483611f4a565b9150612848826127e1565b604082019050919050565b6000602082019050818103600083015261286c81612830565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006128cf602283611f4a565b91506128da82612873565b604082019050919050565b600060208201905081810360008301526128fe816128c2565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061293b601d83611f4a565b915061294682612905565b602082019050919050565b6000602082019050818103600083015261296a8161292e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006129cd602583611f4a565b91506129d882612971565b604082019050919050565b600060208201905081810360008301526129fc816129c0565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612a5f602383611f4a565b9150612a6a82612a03565b604082019050919050565b60006020820190508181036000830152612a8e81612a52565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612af1602683611f4a565b9150612afc82612a95565b604082019050919050565b60006020820190508181036000830152612b2081612ae4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612b5d602083611f4a565b9150612b6882612b27565b602082019050919050565b60006020820190508181036000830152612b8c81612b50565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612bc9601f83611f4a565b9150612bd482612b93565b602082019050919050565b60006020820190508181036000830152612bf881612bbc565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c5b602183611f4a565b9150612c6682612bff565b604082019050919050565b60006020820190508181036000830152612c8a81612c4e565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ced602283611f4a565b9150612cf882612c91565b604082019050919050565b60006020820190508181036000830152612d1c81612ce0565b905091905056fea2646970667358221220a2ee5753c4ae169ff7817cbb7d5b602a21de5c17e141fb2b84ad117ee64eb1de64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c806394bf804d116100d1578063d6e6eb9f1161008a578063f2fde38b11610064578063f2fde38b146105d7578063f46d932414610600578063fbe532341461062b578063fcd3533c1461065457610181565b8063d6e6eb9f14610532578063d7e894661461055d578063dd62ed3e1461059a57610181565b806394bf804d1461040b57806395d89b4114610427578063a457c2d714610452578063a49834211461048f578063a9059cbb146104b8578063c5a1d5e2146104f557610181565b806338cb037a1161013e57806370a082311161011857806370a0823114610363578063715018a6146103a05780637a31c185146103b75780638da5cb5b146103e057610181565b806338cb037a146102be57806339509351146102fb5780634ce7957c1461033857610181565b806306fdde0314610186578063095ea7b3146101b157806318160ddd146101ee57806323b872dd1461021957806327de8f2714610256578063313ce56714610293575b600080fd5b34801561019257600080fd5b5061019b61067d565b6040516101a89190611fd8565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d39190612093565b61070f565b6040516101e591906120ee565b60405180910390f35b3480156101fa57600080fd5b50610203610732565b6040516102109190612118565b60405180910390f35b34801561022557600080fd5b50610240600480360381019061023b9190612133565b61073c565b60405161024d91906120ee565b60405180910390f35b34801561026257600080fd5b5061027d60048036038101906102789190612186565b61076b565b60405161028a9190612118565b60405180910390f35b34801561029f57600080fd5b506102a86107b4565b6040516102b591906121cf565b60405180910390f35b3480156102ca57600080fd5b506102e560048036038101906102e09190612186565b6107b9565b6040516102f29190612118565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d9190612093565b610870565b60405161032f91906120ee565b60405180910390f35b34801561034457600080fd5b5061034d6108a7565b60405161035a91906121f9565b60405180910390f35b34801561036f57600080fd5b5061038a60048036038101906103859190612214565b6108cd565b6040516103979190612118565b60405180910390f35b3480156103ac57600080fd5b506103b5610915565b005b3480156103c357600080fd5b506103de60048036038101906103d99190612186565b610929565b005b3480156103ec57600080fd5b506103f561093b565b60405161040291906121f9565b60405180910390f35b61042560048036038101906104209190612241565b610965565b005b34801561043357600080fd5b5061043c610db4565b6040516104499190611fd8565b60405180910390f35b34801561045e57600080fd5b5061047960048036038101906104749190612093565b610e46565b60405161048691906120ee565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b19190612186565b610ebd565b005b3480156104c457600080fd5b506104df60048036038101906104da9190612093565b610ecf565b6040516104ec91906120ee565b60405180910390f35b34801561050157600080fd5b5061051c60048036038101906105179190612186565b610ef2565b6040516105299190612118565b60405180910390f35b34801561053e57600080fd5b50610547610fa9565b6040516105549190612118565b60405180910390f35b34801561056957600080fd5b50610584600480360381019061057f9190612186565b610faf565b6040516105919190612118565b60405180910390f35b3480156105a657600080fd5b506105c160048036038101906105bc9190612281565b610ff8565b6040516105ce9190612118565b60405180910390f35b3480156105e357600080fd5b506105fe60048036038101906105f99190612214565b61107f565b005b34801561060c57600080fd5b50610615611103565b6040516106229190612118565b60405180910390f35b34801561063757600080fd5b50610652600480360381019061064d9190612214565b611109565b005b34801561066057600080fd5b5061067b60048036038101906106769190612241565b611155565b005b60606003805461068c906122f0565b80601f01602080910402602001604051908101604052809291908181526020018280546106b8906122f0565b80156107055780601f106106da57610100808354040283529160200191610705565b820191906000526020600020905b8154815290600101906020018083116106e857829003601f168201915b5050505050905090565b60008061071a6115a5565b90506107278185856115ad565b600191505092915050565b6000600254905090565b6000806107476115a5565b9050610754858285611778565b61075f858585611804565b60019150509392505050565b60008061077e610779610732565b611a7c565b9050600061079d8461078e610732565b6107989190612351565b611a7c565b905081816107ab91906123a7565b92505050919050565b600090565b6000806107cc6107c7610732565b611a7c565b905060006107eb846107dc610732565b6107e69190612351565b611a7c565b9050600082826107fb91906123a7565b90506000670de0b6b3a76400006007548361081691906123db565b6108209190612464565b90506000670de0b6b3a76400006008548461083b91906123db565b6108459190612464565b905060008183856108569190612351565b6108609190612351565b9050809650505050505050919050565b60008061087b6115a5565b905061089c81858561088d8589610ff8565b6108979190612351565b6115ad565b600191505092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61091d611acc565b6109276000611b4a565b565b610931611acc565b8060088190555050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee90612507565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5e90612599565b60405180910390fd5b6000610a728361076b565b90506000670de0b6b3a764000060075483610a8d91906123db565b610a979190612464565b90506000670de0b6b3a764000060085484610ab291906123db565b610abc9190612464565b90506000818385610acd9190612351565b610ad79190612351565b905080341015610b205780346040517f7040b58c000000000000000000000000000000000000000000000000000000008152600401610b179291906125b9565b60405180910390fd5b610b2a3387611c10565b80341115610bfa5760003373ffffffffffffffffffffffffffffffffffffffff168234610b5791906123a7565b604051610b6390612613565b60006040518083038185875af1925050503d8060008114610ba0576040519150601f19603f3d011682016040523d82523d6000602084013e610ba5565b606091505b5050905080610bf857338234610bbb91906123a7565b6040517f2c6a51e2000000000000000000000000000000000000000000000000000000008152600401610bef929190612628565b60405180910390fd5b505b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610c4290612613565b60006040518083038185875af1925050503d8060008114610c7f576040519150601f19603f3d011682016040523d82523d6000602084013e610c84565b606091505b5050905060008673ffffffffffffffffffffffffffffffffffffffff1684604051610cae90612613565b60006040518083038185875af1925050503d8060008114610ceb576040519150601f19603f3d011682016040523d82523d6000602084013e610cf0565b606091505b50509050818015610cfe5750805b610d3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d349061269d565b60405180910390fd5b610d45610732565b8773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff3f9b81b1aa7af42b83e33d01a22621ecf67d5ebeb4587a4d63e3737276076818b604051610da29190612118565b60405180910390a45050505050505050565b606060048054610dc3906122f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610def906122f0565b8015610e3c5780601f10610e1157610100808354040283529160200191610e3c565b820191906000526020600020905b815481529060010190602001808311610e1f57829003601f168201915b5050505050905090565b600080610e516115a5565b90506000610e5f8286610ff8565b905083811015610ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9b9061272f565b60405180910390fd5b610eb182868684036115ad565b60019250505092915050565b610ec5611acc565b8060078190555050565b600080610eda6115a5565b9050610ee7818585611804565b600191505092915050565b600080610f05610f00610732565b611a7c565b90506000610f2484610f15610732565b610f1f91906123a7565b611a7c565b905060008183610f3491906123a7565b90506000670de0b6b3a764000060075483610f4f91906123db565b610f599190612464565b90506000670de0b6b3a764000060085484610f7491906123db565b610f7e9190612464565b90506000818385610f8f91906123a7565b610f9991906123a7565b9050809650505050505050919050565b60075481565b600080610fc2610fbd610732565b611a7c565b90506000610fe184610fd2610732565b610fdc91906123a7565b611a7c565b90508082610fef91906123a7565b92505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611087611acc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ee906127c1565b60405180910390fd5b61110081611b4a565b50565b60085481565b611111611acc565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de90612507565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124e90612599565b60405180910390fd5b611260336108cd565b8211156112ae57611270336108cd565b826040517f59efbd200000000000000000000000000000000000000000000000000000000081526004016112a59291906125b9565b60405180910390fd5b60006112b983610faf565b90506000670de0b6b3a7640000600754836112d491906123db565b6112de9190612464565b90506000670de0b6b3a7640000600854846112f991906123db565b6113039190612464565b905061130f3386611d67565b60003373ffffffffffffffffffffffffffffffffffffffff1682848661133591906123a7565b61133f91906123a7565b60405161134b90612613565b60006040518083038185875af1925050503d8060008114611388576040519150601f19603f3d011682016040523d82523d6000602084013e61138d565b606091505b50509050806113eb57338284866113a491906123a7565b6113ae91906123a7565b6040517f2c6a51e20000000000000000000000000000000000000000000000000000000081526004016113e2929190612628565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168460405161143390612613565b60006040518083038185875af1925050503d8060008114611470576040519150601f19603f3d011682016040523d82523d6000602084013e611475565b606091505b5050905060008673ffffffffffffffffffffffffffffffffffffffff168460405161149f90612613565b60006040518083038185875af1925050503d80600081146114dc576040519150601f19603f3d011682016040523d82523d6000602084013e6114e1565b606091505b505090508180156114ef5750805b61152e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115259061269d565b60405180910390fd5b611536610732565b8773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9eaa2feeb3b37bf70a72e15de2e6e61b6f2060b2fb40839961c26bbc238dd2028b6040516115939190612118565b60405180910390a45050505050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561161d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161490612853565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561168d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611684906128e5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161176b9190612118565b60405180910390a3505050565b60006117848484610ff8565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146117fe57818110156117f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e790612951565b60405180910390fd5b6117fd84848484036115ad565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186b906129e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118db90612a75565b60405180910390fd5b6118ef838383611f35565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196c90612b07565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611a639190612118565b60405180910390a3611a76848484611f3a565b50505050565b600060066001836002611a8f91906123db565b611a999190612351565b600184611aa69190612351565b84611ab191906123db565b611abb91906123db565b611ac59190612464565b9050919050565b611ad46115a5565b73ffffffffffffffffffffffffffffffffffffffff16611af261093b565b73ffffffffffffffffffffffffffffffffffffffff1614611b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3f90612b73565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7790612bdf565b60405180910390fd5b611c8c60008383611f35565b8060026000828254611c9e9190612351565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611d4f9190612118565b60405180910390a3611d6360008383611f3a565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dce90612c71565b60405180910390fd5b611de382600083611f35565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6090612d03565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611f1c9190612118565b60405180910390a3611f3083600084611f3a565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f79578082015181840152602081019050611f5e565b83811115611f88576000848401525b50505050565b6000601f19601f8301169050919050565b6000611faa82611f3f565b611fb48185611f4a565b9350611fc4818560208601611f5b565b611fcd81611f8e565b840191505092915050565b60006020820190508181036000830152611ff28184611f9f565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061202a82611fff565b9050919050565b61203a8161201f565b811461204557600080fd5b50565b60008135905061205781612031565b92915050565b6000819050919050565b6120708161205d565b811461207b57600080fd5b50565b60008135905061208d81612067565b92915050565b600080604083850312156120aa576120a9611ffa565b5b60006120b885828601612048565b92505060206120c98582860161207e565b9150509250929050565b60008115159050919050565b6120e8816120d3565b82525050565b600060208201905061210360008301846120df565b92915050565b6121128161205d565b82525050565b600060208201905061212d6000830184612109565b92915050565b60008060006060848603121561214c5761214b611ffa565b5b600061215a86828701612048565b935050602061216b86828701612048565b925050604061217c8682870161207e565b9150509250925092565b60006020828403121561219c5761219b611ffa565b5b60006121aa8482850161207e565b91505092915050565b600060ff82169050919050565b6121c9816121b3565b82525050565b60006020820190506121e460008301846121c0565b92915050565b6121f38161201f565b82525050565b600060208201905061220e60008301846121ea565b92915050565b60006020828403121561222a57612229611ffa565b5b600061223884828501612048565b91505092915050565b6000806040838503121561225857612257611ffa565b5b60006122668582860161207e565b925050602061227785828601612048565b9150509250929050565b6000806040838503121561229857612297611ffa565b5b60006122a685828601612048565b92505060206122b785828601612048565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061230857607f821691505b6020821081141561231c5761231b6122c1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061235c8261205d565b91506123678361205d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561239c5761239b612322565b5b828201905092915050565b60006123b28261205d565b91506123bd8361205d565b9250828210156123d0576123cf612322565b5b828203905092915050565b60006123e68261205d565b91506123f18361205d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561242a57612429612322565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061246f8261205d565b915061247a8361205d565b92508261248a57612489612435565b5b828204905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b60006124f1602a83611f4a565b91506124fc82612495565b604082019050919050565b60006020820190508181036000830152612520816124e4565b9050919050565b7f5f73747265616d6572416464726573732069732061207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612583602283611f4a565b915061258e82612527565b604082019050919050565b600060208201905081810360008301526125b281612576565b9050919050565b60006040820190506125ce6000830185612109565b6125db6020830184612109565b9392505050565b600081905092915050565b50565b60006125fd6000836125e2565b9150612608826125ed565b600082019050919050565b600061261e826125f0565b9150819050919050565b600060408201905061263d60008301856121ea565b61264a6020830184612109565b9392505050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b6000612687601483611f4a565b915061269282612651565b602082019050919050565b600060208201905081810360008301526126b68161267a565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612719602583611f4a565b9150612724826126bd565b604082019050919050565b600060208201905081810360008301526127488161270c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006127ab602683611f4a565b91506127b68261274f565b604082019050919050565b600060208201905081810360008301526127da8161279e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061283d602483611f4a565b9150612848826127e1565b604082019050919050565b6000602082019050818103600083015261286c81612830565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006128cf602283611f4a565b91506128da82612873565b604082019050919050565b600060208201905081810360008301526128fe816128c2565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061293b601d83611f4a565b915061294682612905565b602082019050919050565b6000602082019050818103600083015261296a8161292e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006129cd602583611f4a565b91506129d882612971565b604082019050919050565b600060208201905081810360008301526129fc816129c0565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612a5f602383611f4a565b9150612a6a82612a03565b604082019050919050565b60006020820190508181036000830152612a8e81612a52565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612af1602683611f4a565b9150612afc82612a95565b604082019050919050565b60006020820190508181036000830152612b2081612ae4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612b5d602083611f4a565b9150612b6882612b27565b602082019050919050565b60006020820190508181036000830152612b8c81612b50565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612bc9601f83611f4a565b9150612bd482612b93565b602082019050919050565b60006020820190508181036000830152612bf881612bbc565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c5b602183611f4a565b9150612c6682612bff565b604082019050919050565b60006020820190508181036000830152612c8a81612c4e565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ced602283611f4a565b9150612cf882612c91565b604082019050919050565b60006020820190508181036000830152612d1c81612ce0565b905091905056fea2646970667358221220a2ee5753c4ae169ff7817cbb7d5b602a21de5c17e141fb2b84ad117ee64eb1de64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 128,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 834,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "protocolFeeDestination",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 836,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "protocolFeePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 838,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "streamerFeePercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}