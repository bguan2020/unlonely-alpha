{
  "address": "0x65462068E325BD1180428Ea43ca10fFC82311D97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultFeeDestination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_defaultProtocolFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultStreamerFeePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "DurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeDestination",
          "type": "address"
        }
      ],
      "name": "FeeDestinationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numDeployedTokens",
          "type": "uint256"
        }
      ],
      "name": "PauseFactorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeePercentSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "name": "StreamerFeePercentSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TempTokenCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "createTempToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultProtocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultStreamerFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deployedTokenIndices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deployedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct TempTokenFactoryV1.TokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numDeployedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "setFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isPaused",
          "type": "bool"
        }
      ],
      "name": "setPauseFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setStreamerFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1742ddcbc0783f198b81ac5050d2d72429f1a707121c2d774b65b83f430e9fe4",
  "receipt": {
    "to": null,
    "from": "0x4F3d3f2F895Db524AC3944BDd17fE632473bCa4a",
    "contractAddress": "0x65462068E325BD1180428Ea43ca10fFC82311D97",
    "transactionIndex": 2,
    "gasUsed": "4483486",
    "logsBloom": "0x
    "blockHash": "0x05a442f4e7feda39b973c7dd2cacd3992e794f6f81d23038f34c0b577f58bb14",
    "transactionHash": "0x1742ddcbc0783f198b81ac5050d2d72429f1a707121c2d774b65b83f430e9fe4",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 7384720,
        "transactionHash": "0x1742ddcbc0783f198b81ac5050d2d72429f1a707121c2d774b65b83f430e9fe4",
        "address": "0x65462068E325BD1180428Ea43ca10fFC82311D97",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f3d3f2f895db524ac3944bdd17fe632473bca4a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x05a442f4e7feda39b973c7dd2cacd3992e794f6f81d23038f34c0b577f58bb14"
      }
    ],
    "blockNumber": 7384720,
    "cumulativeGasUsed": "4548957",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4F3d3f2F895Db524AC3944BDd17fE632473bCa4a",
    "20000000000000000",
    "20000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "4afb4579681fc9acdbb49df14bdd44c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultFeeDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultProtocolFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultStreamerFeePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"DurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeDestination\",\"type\":\"address\"}],\"name\":\"FeeDestinationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numDeployedTokens\",\"type\":\"uint256\"}],\"name\":\"PauseFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeePercentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"StreamerFeePercentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"TempTokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createTempToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultProtocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultStreamerFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployedTokenIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TempTokenFactoryV1.TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numDeployedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"setPauseFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setStreamerFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"defaultProtocolFeePercent\":{\"details\":\"defaultProtocolFeePercent is the default protocol fee percentage. ex: 2% = 2 * 10**16 = 20000000000000000.defaultStreamerFeePercent is the default streamer fee percentage. ex: 2% = 2 * 10**16 = 20000000000000000.defaultFeeDestination is the default fee destination address.isPaused is a boolean to pause the factory and its token creation function.duration is the default duration in seconds for the lifespan of a token.\"},\"numDeployedTokens\":{\"details\":\"numDeployedTokens is the number of deployed tokens.deployedTokenIndices is a mapping of token addresses to their assigned index.deployedTokens is a mapping of token indices to TokenInfo structs.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TempTokenFactoryV1.sol\":\"TempTokenFactoryV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TempTokenFactoryV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./TempTokenV1.sol\\\"; // Make sure this import path matches where your token contract is located.\\r\\n\\r\\ncontract TempTokenFactoryV1 is Ownable {\\r\\n\\r\\n    // Here we have a struct to store information about each token that is deployed.\\r\\n    struct TokenInfo {\\r\\n        address tokenAddress;\\r\\n        address ownerAddress;\\r\\n        uint256 endTimestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev numDeployedTokens is the number of deployed tokens.\\r\\n        * @dev deployedTokenIndices is a mapping of token addresses to their assigned index.\\r\\n        * @dev deployedTokens is a mapping of token indices to TokenInfo structs.\\r\\n     */\\r\\n    uint256 public numDeployedTokens;\\r\\n    mapping(address => uint256) public deployedTokenIndices;\\r\\n    mapping(uint256 => TokenInfo) public deployedTokens;\\r\\n\\r\\n    /**\\r\\n        * @dev defaultProtocolFeePercent is the default protocol fee percentage. ex: 2% = 2 * 10**16 = 20000000000000000.\\r\\n        * @dev defaultStreamerFeePercent is the default streamer fee percentage. ex: 2% = 2 * 10**16 = 20000000000000000.\\r\\n        * @dev defaultFeeDestination is the default fee destination address.\\r\\n        * @dev isPaused is a boolean to pause the factory and its token creation function.\\r\\n        * @dev duration is the default duration in seconds for the lifespan of a token.\\r\\n     */\\r\\n    uint256 public defaultProtocolFeePercent;\\r\\n    uint256 public defaultStreamerFeePercent;\\r\\n    address public defaultFeeDestination;\\r\\n    bool public isPaused;\\r\\n    uint256 public duration;\\r\\n\\r\\n    // Event to log the creation of a new TempToken.\\r\\n    event TempTokenCreated(address indexed tokenAddress, address indexed owner, string name, string symbol, uint256 endTimestamp);\\r\\n    event FeeDestinationSet(address indexed feeDestination);\\r\\n    event ProtocolFeePercentSet(uint256 feePercent);\\r\\n    event StreamerFeePercentSet(uint256 feePercent);\\r\\n    event PauseFactorySet(bool isPaused, uint256 numDeployedTokens);\\r\\n    event DurationSet(uint256 duration);\\r\\n\\r\\n    constructor(address _defaultFeeDestination, uint256 _defaultProtocolFeePercent, uint256 _defaultStreamerFeePercent) {\\r\\n        require(_defaultFeeDestination != address(0), \\\"Default fee destination cannot be the zero address\\\");\\r\\n\\r\\n        defaultProtocolFeePercent = _defaultProtocolFeePercent;\\r\\n        defaultStreamerFeePercent = _defaultStreamerFeePercent;\\r\\n        defaultFeeDestination = _defaultFeeDestination;\\r\\n        duration = 1 hours; // Sets the initial duration to 3600 seconds\\r\\n    }\\r\\n\\r\\n    // This function creates a new TempToken contract.\\r\\n    function createTempToken(\\r\\n        string memory name,\\r\\n        string memory symbol\\r\\n    ) public returns (address) {\\r\\n        require(!isPaused, \\\"Factory is paused\\\");\\r\\n        uint256 endTimestamp = block.timestamp + duration;\\r\\n        TempTokenV1 newToken = new TempTokenV1(name, symbol, endTimestamp, defaultFeeDestination, defaultProtocolFeePercent, defaultStreamerFeePercent, address(this));        \\r\\n        \\r\\n        /**\\r\\n            * @dev We increment the numDeployedTokens and use the new value as the index to store the TokenInfo struct in the deployedTokens mapping.\\r\\n            * @dev We also store the index of the token in the deployedTokenIndices mapping using the token's address as the key.\\r\\n         */\\r\\n        uint256 index = ++numDeployedTokens;\\r\\n        deployedTokens[index] = TokenInfo(address(newToken), msg.sender, endTimestamp);\\r\\n        deployedTokenIndices[address(newToken)] = index;\\r\\n\\r\\n        newToken.transferOwnership(msg.sender); // Transfer ownership of the new token to the caller of this function.\\r\\n        emit TempTokenCreated(address(newToken), msg.sender, name, symbol, endTimestamp);\\r\\n        return address(newToken);\\r\\n    }\\r\\n\\r\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\r\\n        defaultFeeDestination = _feeDestination;\\r\\n        emit FeeDestinationSet(_feeDestination);\\r\\n    }\\r\\n\\r\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        defaultProtocolFeePercent = _feePercent;\\r\\n        emit ProtocolFeePercentSet(_feePercent);\\r\\n    }\\r\\n\\r\\n    function setStreamerFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        defaultStreamerFeePercent = _feePercent;\\r\\n        emit StreamerFeePercentSet(_feePercent);\\r\\n    }\\r\\n\\r\\n    function setPauseFactory(bool _isPaused) public onlyOwner {\\r\\n        isPaused = _isPaused;\\r\\n        emit PauseFactorySet(_isPaused, numDeployedTokens);\\r\\n    }\\r\\n\\r\\n    function setDuration(uint256 _duration) public onlyOwner {\\r\\n        duration = _duration;\\r\\n        emit DurationSet(_duration);\\r\\n    }\\r\\n\\r\\n    function getTokenInfo(address tokenAddress) public view returns (TokenInfo memory) {\\r\\n        uint256 index = deployedTokenIndices[tokenAddress];\\r\\n        return deployedTokens[index];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd5d50083297115543c73cf67bcfdc4ff015c2b395e9ad7efe8bb1aad76a546de\",\"license\":\"MIT\"},\"contracts/TempTokenV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract TempTokenV1 is ERC20, Ownable, ReentrancyGuard {\\r\\n\\r\\n    address public factoryAddress;\\r\\n    address public protocolFeeDestination;\\r\\n    uint256 public protocolFeePercent;\\r\\n    uint256 public streamerFeePercent;\\r\\n    uint256 public MAX_SUPPLY = 20_000_000;\\r\\n    uint256 public endTimestamp;\\r\\n\\r\\n    event Mint(address indexed account, uint256 amount, address indexed streamerAddress, uint256 indexed totalSupply, uint256 protocolFeePercent, uint256 streamerFeePercent);\\r\\n    event Burn(address indexed account, uint256 amount, address indexed streamerAddress, uint256 indexed totalSupply, uint256 protocolFeePercent, uint256 streamerFeePercent);\\r\\n    event Drain(address indexed account, uint256 balance);\\r\\n\\r\\n    error InsufficientValue(uint256 minimumValue, uint256 value);\\r\\n    error BurnAmountTooHigh(uint256 maximumAmount, uint256 amount);\\r\\n    error EtherTransferFailed(address to, uint256 value);\\r\\n    error ActionNotAllowed();\\r\\n\\r\\n    modifier activePhase() {\\r\\n        require(block.timestamp < endTimestamp, \\\"Active phase has ended\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier endedPhase() {\\r\\n        require(block.timestamp >= endTimestamp, \\\"Contract is still in active phase\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n   constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint256 _endTimestamp,\\r\\n        address _protocolFeeDestination,\\r\\n        uint256 _protocolFeePercent,\\r\\n        uint256 _streamerFeePercent,\\r\\n        address _factoryAddress\\r\\n    ) ERC20(name, symbol) {\\r\\n        require(_protocolFeeDestination != address(0), \\\"Fee destination cannot be the zero address\\\");\\r\\n        \\r\\n        endTimestamp = _endTimestamp;\\r\\n        protocolFeePercent = _protocolFeePercent;\\r\\n        streamerFeePercent = _streamerFeePercent;\\r\\n        protocolFeeDestination = _protocolFeeDestination;\\r\\n        factoryAddress = _factoryAddress;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _amount) external payable activePhase {\\r\\n        require(totalSupply() + _amount <= MAX_SUPPLY, \\\"Maximum supply exceeded\\\");\\r\\n        uint256 cost = mintCost(_amount);\\r\\n        uint256 protocolFee = cost * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = cost * streamerFeePercent / 1 ether;\\r\\n        uint256 totalCost = cost + protocolFee + subjectFee;\\r\\n\\r\\n        if (msg.value < totalCost) {\\r\\n            revert InsufficientValue(totalCost, msg.value);\\r\\n        }\\r\\n\\r\\n        _mint(msg.sender, _amount);\\r\\n\\r\\n        if(msg.value > totalCost) {\\r\\n            (bool sent,) = msg.sender.call{value: msg.value - totalCost}(\\\"\\\");\\r\\n            if (!sent) {\\r\\n                revert EtherTransferFailed(msg.sender, msg.value - totalCost);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = owner().call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        emit Mint(msg.sender, _amount, owner(), totalSupply(), protocolFeePercent, streamerFeePercent);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _amount) external activePhase {\\r\\n        if (_amount > balanceOf(msg.sender)) {\\r\\n            revert BurnAmountTooHigh(balanceOf(msg.sender), _amount);\\r\\n        }\\r\\n\\r\\n        // Calculate refund before burn, to use the totalSupply before the burn\\r\\n        uint256 proceeds = burnProceeds(_amount);\\r\\n        uint256 protocolFee = proceeds * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = proceeds * streamerFeePercent / 1 ether;\\r\\n\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        (bool sent,) = msg.sender.call{value: proceeds - protocolFee - subjectFee}(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert EtherTransferFailed(msg.sender, proceeds - protocolFee - subjectFee);\\r\\n        }\\r\\n\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = owner().call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        emit Burn(msg.sender, _amount, owner(), totalSupply(), protocolFeePercent, streamerFeePercent);\\r\\n    }\\r\\n\\r\\n    function drainFundsIntoMyWallet() external onlyOwner endedPhase nonReentrant {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"No funds available to drain\\\");\\r\\n\\r\\n        (bool success, ) = owner().call{value: balance}(\\\"\\\");\\r\\n        require(success, \\\"Failed to transfer funds\\\");\\r\\n\\r\\n        emit Drain(msg.sender, balance);\\r\\n    }\\r\\n\\r\\n    function mintCost(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all tokens already minted\\r\\n        uint256 sumPricesCurrentTotalSupply = sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens already minted + the tokens to be newly minted\\r\\n        uint256 sumPricesNewTotalSupply = sumOfPriceToNTokens(totalSupply() + _amount);\\r\\n\\r\\n        return sumPricesNewTotalSupply - sumPricesCurrentTotalSupply;\\r\\n    }\\r\\n    \\r\\n    function mintCostAfterFees(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all tokens already minted\\r\\n        uint256 sumPricesCurrentTotalSupply = sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens already minted + the tokens to be newly minted\\r\\n        uint256 sumPricesNewTotalSupply = sumOfPriceToNTokens(totalSupply() + _amount);\\r\\n        uint256 sumDiff = sumPricesNewTotalSupply - sumPricesCurrentTotalSupply;\\r\\n\\r\\n        uint256 protocolFee = sumDiff * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = sumDiff * streamerFeePercent / 1 ether;\\r\\n        uint256 totalCost = sumDiff + protocolFee + subjectFee;\\r\\n\\r\\n        return totalCost;\\r\\n    }\\r\\n\\r\\n    function burnProceeds(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all the tokens already minted\\r\\n        uint256 sumBeforeBurn = sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens after burning _amount\\r\\n        uint256 sumAfterBurn = sumOfPriceToNTokens(totalSupply() - _amount);\\r\\n\\r\\n        return sumBeforeBurn - sumAfterBurn;\\r\\n    }\\r\\n\\r\\n    function burnProceedsAfterFees(uint256 _amount) public view returns (uint256) {\\r\\n        if (_amount > totalSupply()) {\\r\\n            // If the amount to burn exceeds total supply, return 0 or some error value\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 sumBeforeBurn = sumOfPriceToNTokens(totalSupply());\\r\\n        uint256 sumAfterBurn = sumOfPriceToNTokens(totalSupply() - _amount);\\r\\n\\r\\n        uint256 sumDiff = sumBeforeBurn - sumAfterBurn;\\r\\n\\r\\n        uint256 protocolFee = sumDiff * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = sumDiff * streamerFeePercent / 1 ether;\\r\\n\\r\\n        // Check if sumDiff is less than the total fees\\r\\n        if (sumDiff < protocolFee + subjectFee) {\\r\\n            // Handle the scenario, such as returning 0 or a specific error value\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 proceeds = sumDiff - protocolFee - subjectFee;\\r\\n        return proceeds;\\r\\n    }\\r\\n\\r\\n    function decimals() pure public override returns (uint8) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getIsActive() public view returns (bool) {\\r\\n        return block.timestamp < endTimestamp;\\r\\n    }\\r\\n\\r\\n    // The price of *all* tokens from number 1 to n.\\r\\n    function sumOfPriceToNTokens(uint256 n_) pure public returns (uint256) {\\r\\n        return n_ * (n_ + 1) * (2 * n_ + 1) / 6;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x58ee0dcf58029fe8271f0bc6c512cd93219f03423ff399c44862206a0df3d7ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620051eb380380620051eb83398181016040528101906200003791906200029c565b620000576200004b6200012b60201b60201c565b6200013360201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c1906200037f565b60405180910390fd5b816004819055508060058190555082600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e10600781905550505050620003a1565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022982620001fc565b9050919050565b6200023b816200021c565b81146200024757600080fd5b50565b6000815190506200025b8162000230565b92915050565b6000819050919050565b620002768162000261565b81146200028257600080fd5b50565b60008151905062000296816200026b565b92915050565b600080600060608486031215620002b857620002b7620001f7565b5b6000620002c8868287016200024a565b9350506020620002db8682870162000285565b9250506040620002ee8682870162000285565b9150509250925092565b600082825260208201905092915050565b7f44656661756c74206665652064657374696e6174696f6e2063616e6e6f74206260008201527f6520746865207a65726f20616464726573730000000000000000000000000000602082015250565b600062000367603283620002f8565b9150620003748262000309565b604082019050919050565b600060208201905081810360008301526200039a8162000358565b9050919050565b614e3a80620003b16000396000f3fe60806040523480156200001157600080fd5b5060043610620001305760003560e01c8063a498342111620000b1578063d7f20549116200007b578063d7f20549146200030f578063ec81aadb1462000331578063f2fde38b1462000369578063f6be71d11462000389578063fbe5323414620003a95762000130565b8063a49834211462000275578063b187bd261462000295578063bb5dfe1914620002b7578063bcc066fc14620002d95762000130565b8063715018a611620000ff578063715018a614620001cf5780637a31c18514620001db5780638c6186a314620001fb5780638da5cb5b146200021d57806396266d9c146200023f5762000130565b80630fb5a6b414620001355780631f69565f146200015757806344161783146200018d5780636e3eb6f414620001af575b600080fd5b6200013f620003c9565b6040516200014e919062000d47565b60405180910390f35b6200017560048036038101906200016f919062000ddd565b620003cf565b60405162000184919062000e79565b60405180910390f35b62000197620004f9565b604051620001a6919062000d47565b60405180910390f35b620001cd6004803603810190620001c7919062000ed3565b620004ff565b005b620001d962000563565b005b620001f96004803603810190620001f3919062000f36565b6200057b565b005b62000205620005c8565b60405162000214919062000f79565b60405180910390f35b62000227620005ee565b60405162000236919062000f79565b60405180910390f35b6200025d600480360381019062000257919062000ddd565b62000617565b6040516200026c919062000d47565b60405180910390f35b6200029360048036038101906200028d919062000f36565b6200062f565b005b6200029f6200067c565b604051620002ae919062000fa7565b60405180910390f35b620002c16200068f565b604051620002d0919062000d47565b60405180910390f35b620002f76004803603810190620002f1919062001126565b62000695565b60405162000306919062000f79565b60405180910390f35b62000319620009a7565b60405162000328919062000d47565b60405180910390f35b6200034f600480360381019062000349919062000f36565b620009ad565b6040516200036093929190620011ab565b60405180910390f35b62000387600480360381019062000381919062000ddd565b62000a17565b005b620003a76004803603810190620003a1919062000f36565b62000aa2565b005b620003c76004803603810190620003c1919062000ddd565b62000aef565b005b60075481565b620003d962000cd1565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600360008281526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481525050915050919050565b60045481565b6200050962000b80565b80600660146101000a81548160ff0219169083151502179055507fd119587be04d80080c64717a0dc158c674898c4fe140498ffd144e1f6645d8b98160015460405162000558929190620011e8565b60405180910390a150565b6200056d62000b80565b62000579600062000c05565b565b6200058562000b80565b806005819055507f444c2ee6a42985e86e4d1c21435989ae523bae8ee02a11e8579bc4ac18b1d4ae81604051620005bd919062000d47565b60405180910390a150565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026020528060005260406000206000915090505481565b6200063962000b80565b806004819055507fa318485d4b7a387f0695a0179248931f1d023e08844d98b4e9e34775324bceb58160405162000671919062000d47565b60405180910390a150565b600660149054906101000a900460ff1681565b60015481565b6000600660149054906101000a900460ff1615620006ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006e19062001276565b60405180910390fd5b600060075442620006fc9190620012c7565b90506000848483600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600454600554306040516200073b9062000d1e565b6200074d9796959493929190620013a6565b604051809103906000f0801580156200076a573d6000803e3d6000fd5b5090506000600160008154620007809062001431565b919050819055905060405180606001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001848152506003600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015590505080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b8152600401620008fc919062000f79565b600060405180830381600087803b1580156200091757600080fd5b505af11580156200092c573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f67af801147c58f7e90444ba6d7d83009fb779c5320ca0ab1cf16e4a879de9b5c88888760405162000993939291906200147f565b60405180910390a381935050505092915050565b60055481565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b62000a2162000b80565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000a94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a8b9062001540565b60405180910390fd5b62000a9f8162000c05565b50565b62000aac62000b80565b806007819055507f234a8b70e70d5fc5ace24d19c8c988edfd5dc006d6f8356cab0273e2f084a9098160405162000ae4919062000d47565b60405180910390a150565b62000af962000b80565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f9ffcc7872e184f6db78bf00d137d6a7d52aa1546937286c01382063602bbcad660405160405180910390a250565b62000b8a62000cc9565b73ffffffffffffffffffffffffffffffffffffffff1662000baa620005ee565b73ffffffffffffffffffffffffffffffffffffffff161462000c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000bfa90620015b2565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b61383080620015d583390190565b6000819050919050565b62000d418162000d2c565b82525050565b600060208201905062000d5e600083018462000d36565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000da58262000d78565b9050919050565b62000db78162000d98565b811462000dc357600080fd5b50565b60008135905062000dd78162000dac565b92915050565b60006020828403121562000df65762000df562000d6e565b5b600062000e068482850162000dc6565b91505092915050565b62000e1a8162000d98565b82525050565b62000e2b8162000d2c565b82525050565b60608201600082015162000e49600085018262000e0f565b50602082015162000e5e602085018262000e0f565b50604082015162000e73604085018262000e20565b50505050565b600060608201905062000e90600083018462000e31565b92915050565b60008115159050919050565b62000ead8162000e96565b811462000eb957600080fd5b50565b60008135905062000ecd8162000ea2565b92915050565b60006020828403121562000eec5762000eeb62000d6e565b5b600062000efc8482850162000ebc565b91505092915050565b62000f108162000d2c565b811462000f1c57600080fd5b50565b60008135905062000f308162000f05565b92915050565b60006020828403121562000f4f5762000f4e62000d6e565b5b600062000f5f8482850162000f1f565b91505092915050565b62000f738162000d98565b82525050565b600060208201905062000f90600083018462000f68565b92915050565b62000fa18162000e96565b82525050565b600060208201905062000fbe600083018462000f96565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620010198262000fce565b810181811067ffffffffffffffff821117156200103b576200103a62000fdf565b5b80604052505050565b60006200105062000d64565b90506200105e82826200100e565b919050565b600067ffffffffffffffff82111562001081576200108062000fdf565b5b6200108c8262000fce565b9050602081019050919050565b82818337600083830152505050565b6000620010bf620010b98462001063565b62001044565b905082815260208101848484011115620010de57620010dd62000fc9565b5b620010eb84828562001099565b509392505050565b600082601f8301126200110b576200110a62000fc4565b5b81356200111d848260208601620010a8565b91505092915050565b6000806040838503121562001140576200113f62000d6e565b5b600083013567ffffffffffffffff81111562001161576200116062000d73565b5b6200116f85828601620010f3565b925050602083013567ffffffffffffffff81111562001193576200119262000d73565b5b620011a185828601620010f3565b9150509250929050565b6000606082019050620011c2600083018662000f68565b620011d1602083018562000f68565b620011e0604083018462000d36565b949350505050565b6000604082019050620011ff600083018562000f96565b6200120e602083018462000d36565b9392505050565b600082825260208201905092915050565b7f466163746f727920697320706175736564000000000000000000000000000000600082015250565b60006200125e60118362001215565b91506200126b8262001226565b602082019050919050565b6000602082019050818103600083015262001291816200124f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620012d48262000d2c565b9150620012e18362000d2c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562001319576200131862001298565b5b828201905092915050565b600081519050919050565b60005b838110156200134f57808201518184015260208101905062001332565b838111156200135f576000848401525b50505050565b6000620013728262001324565b6200137e818562001215565b9350620013908185602086016200132f565b6200139b8162000fce565b840191505092915050565b600060e0820190508181036000830152620013c2818a62001365565b90508181036020830152620013d8818962001365565b9050620013e9604083018862000d36565b620013f8606083018762000f68565b62001407608083018662000d36565b6200141660a083018562000d36565b6200142560c083018462000f68565b98975050505050505050565b60006200143e8262000d2c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562001474576200147362001298565b5b600182019050919050565b600060608201905081810360008301526200149b818662001365565b90508181036020830152620014b1818562001365565b9050620014c2604083018462000d36565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006200152860268362001215565b91506200153582620014ca565b604082019050919050565b600060208201905081810360008301526200155b8162001519565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200159a60208362001215565b9150620015a78262001562565b602082019050919050565b60006020820190508181036000830152620015cd816200158b565b905091905056fe60806040526301312d00600b553480156200001957600080fd5b50604051620038303803806200383083398181016040528101906200003f91906200056f565b868681600390805190602001906200005992919062000282565b5080600490805190602001906200007292919062000282565b5050506200009562000089620001b460201b60201c565b620001bc60201b60201c565b6001600681905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141562000110576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010790620006e7565b60405180910390fd5b84600c819055508260098190555081600a8190555083600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050506200076e565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002909062000738565b90600052602060002090601f016020900481019282620002b4576000855562000300565b82601f10620002cf57805160ff191683800117855562000300565b8280016001018555821562000300579182015b82811115620002ff578251825591602001919060010190620002e2565b5b5090506200030f919062000313565b5090565b5b808211156200032e57600081600090555060010162000314565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200039b8262000350565b810181811067ffffffffffffffff82111715620003bd57620003bc62000361565b5b80604052505050565b6000620003d262000332565b9050620003e0828262000390565b919050565b600067ffffffffffffffff82111562000403576200040262000361565b5b6200040e8262000350565b9050602081019050919050565b60005b838110156200043b5780820151818401526020810190506200041e565b838111156200044b576000848401525b50505050565b6000620004686200046284620003e5565b620003c6565b9050828152602081018484840111156200048757620004866200034b565b5b620004948482856200041b565b509392505050565b600082601f830112620004b457620004b362000346565b5b8151620004c684826020860162000451565b91505092915050565b6000819050919050565b620004e481620004cf565b8114620004f057600080fd5b50565b6000815190506200050481620004d9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000537826200050a565b9050919050565b62000549816200052a565b81146200055557600080fd5b50565b60008151905062000569816200053e565b92915050565b600080600080600080600060e0888a0312156200059157620005906200033c565b5b600088015167ffffffffffffffff811115620005b257620005b162000341565b5b620005c08a828b016200049c565b975050602088015167ffffffffffffffff811115620005e457620005e362000341565b5b620005f28a828b016200049c565b9650506040620006058a828b01620004f3565b9550506060620006188a828b0162000558565b94505060806200062b8a828b01620004f3565b93505060a06200063e8a828b01620004f3565b92505060c0620006518a828b0162000558565b91505092959891949750929550565b600082825260208201905092915050565b7f4665652064657374696e6174696f6e2063616e6e6f7420626520746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000620006cf602a8362000660565b9150620006dc8262000671565b604082019050919050565b600060208201905081810360008301526200070281620006c0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200075157607f821691505b6020821081141562000768576200076762000709565b5b50919050565b6130b2806200077e6000396000f3fe6080604052600436106101c25760003560e01c8063715018a6116100f7578063a9059cbb11610095578063dd62ed3e11610064578063dd62ed3e14610687578063f2fde38b146106c4578063f46d9324146106ed578063fba7cc7914610718576101c2565b8063a9059cbb146105a5578063c5a1d5e2146105e2578063d6e6eb9f1461061f578063d7e894661461064a576101c2565b8063966dae0e116100d1578063966dae0e146104f6578063a0712d6814610521578063a457c2d71461053d578063a85adeab1461057a576101c2565b8063715018a6146104895780638da5cb5b146104a057806395d89b41146104cb576101c2565b806332cb6b0c1161016457806342966c681161013e57806342966c68146103bb5780634768e885146103e45780634ce7957c1461042157806370a082311461044c576101c2565b806332cb6b0c1461031657806338cb037a14610341578063395093511461037e576101c2565b806318160ddd116101a057806318160ddd1461024657806323b872dd1461027157806327de8f27146102ae578063313ce567146102eb576101c2565b806306fdde03146101c7578063095ea7b3146101f2578063147d07351461022f575b600080fd5b3480156101d357600080fd5b506101dc610743565b6040516101e991906121b0565b60405180910390f35b3480156101fe57600080fd5b506102196004803603810190610214919061226b565b6107d5565b60405161022691906122c6565b60405180910390f35b34801561023b57600080fd5b506102446107f8565b005b34801561025257600080fd5b5061025b6109a2565b60405161026891906122f0565b60405180910390f35b34801561027d57600080fd5b506102986004803603810190610293919061230b565b6109ac565b6040516102a591906122c6565b60405180910390f35b3480156102ba57600080fd5b506102d560048036038101906102d0919061235e565b6109db565b6040516102e291906122f0565b60405180910390f35b3480156102f757600080fd5b50610300610a24565b60405161030d91906123a7565b60405180910390f35b34801561032257600080fd5b5061032b610a29565b60405161033891906122f0565b60405180910390f35b34801561034d57600080fd5b506103686004803603810190610363919061235e565b610a2f565b60405161037591906122f0565b60405180910390f35b34801561038a57600080fd5b506103a560048036038101906103a0919061226b565b610ae6565b6040516103b291906122c6565b60405180910390f35b3480156103c757600080fd5b506103e260048036038101906103dd919061235e565b610b1d565b005b3480156103f057600080fd5b5061040b6004803603810190610406919061235e565b610ec4565b60405161041891906122f0565b60405180910390f35b34801561042d57600080fd5b50610436610f14565b60405161044391906123d1565b60405180910390f35b34801561045857600080fd5b50610473600480360381019061046e91906123ec565b610f3a565b60405161048091906122f0565b60405180910390f35b34801561049557600080fd5b5061049e610f82565b005b3480156104ac57600080fd5b506104b5610f96565b6040516104c291906123d1565b60405180910390f35b3480156104d757600080fd5b506104e0610fc0565b6040516104ed91906121b0565b60405180910390f35b34801561050257600080fd5b5061050b611052565b60405161051891906123d1565b60405180910390f35b61053b6004803603810190610536919061235e565b611078565b005b34801561054957600080fd5b50610564600480360381019061055f919061226b565b611475565b60405161057191906122c6565b60405180910390f35b34801561058657600080fd5b5061058f6114ec565b60405161059c91906122f0565b60405180910390f35b3480156105b157600080fd5b506105cc60048036038101906105c7919061226b565b6114f2565b6040516105d991906122c6565b60405180910390f35b3480156105ee57600080fd5b506106096004803603810190610604919061235e565b611515565b60405161061691906122f0565b60405180910390f35b34801561062b57600080fd5b50610634611607565b60405161064191906122f0565b60405180910390f35b34801561065657600080fd5b50610671600480360381019061066c919061235e565b61160d565b60405161067e91906122f0565b60405180910390f35b34801561069357600080fd5b506106ae60048036038101906106a99190612419565b611656565b6040516106bb91906122f0565b60405180910390f35b3480156106d057600080fd5b506106eb60048036038101906106e691906123ec565b6116dd565b005b3480156106f957600080fd5b50610702611761565b60405161070f91906122f0565b60405180910390f35b34801561072457600080fd5b5061072d611767565b60405161073a91906122c6565b60405180910390f35b60606003805461075290612488565b80601f016020809104026020016040519081016040528092919081815260200182805461077e90612488565b80156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b5050505050905090565b6000806107e0611773565b90506107ed81858561177b565b600191505092915050565b610800611946565b600c54421015610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c9061252c565b60405180910390fd5b61084d6119c4565b600047905060008111610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088c90612598565b60405180910390fd5b600061089f610f96565b73ffffffffffffffffffffffffffffffffffffffff16826040516108c2906125e9565b60006040518083038185875af1925050503d80600081146108ff576040519150601f19603f3d011682016040523d82523d6000602084013e610904565b606091505b5050905080610948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093f9061264a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167ff36f4d6622e16a536bbb049064af779cdd483a0b388d347d3752a65f1058bf5b8360405161098e91906122f0565b60405180910390a250506109a0611a14565b565b6000600254905090565b6000806109b7611773565b90506109c4858285611a1e565b6109cf858585611aaa565b60019150509392505050565b6000806109ee6109e96109a2565b610ec4565b90506000610a0d846109fe6109a2565b610a089190612699565b610ec4565b90508181610a1b91906126ef565b92505050919050565b600090565b600b5481565b600080610a42610a3d6109a2565b610ec4565b90506000610a6184610a526109a2565b610a5c9190612699565b610ec4565b905060008282610a7191906126ef565b90506000670de0b6b3a764000060095483610a8c9190612723565b610a9691906127ac565b90506000670de0b6b3a7640000600a5484610ab19190612723565b610abb91906127ac565b90506000818385610acc9190612699565b610ad69190612699565b9050809650505050505050919050565b600080610af1611773565b9050610b12818585610b038589611656565b610b0d9190612699565b61177b565b600191505092915050565b600c544210610b61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5890612829565b60405180910390fd5b610b6a33610f3a565b811115610bb857610b7a33610f3a565b816040517f59efbd20000000000000000000000000000000000000000000000000000000008152600401610baf929190612849565b60405180910390fd5b6000610bc38261160d565b90506000670de0b6b3a764000060095483610bde9190612723565b610be891906127ac565b90506000670de0b6b3a7640000600a5484610c039190612723565b610c0d91906127ac565b9050610c193385611d22565b60003373ffffffffffffffffffffffffffffffffffffffff16828486610c3f91906126ef565b610c4991906126ef565b604051610c55906125e9565b60006040518083038185875af1925050503d8060008114610c92576040519150601f19603f3d011682016040523d82523d6000602084013e610c97565b606091505b5050905080610cf55733828486610cae91906126ef565b610cb891906126ef565b6040517f2c6a51e2000000000000000000000000000000000000000000000000000000008152600401610cec929190612872565b60405180910390fd5b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610d3d906125e9565b60006040518083038185875af1925050503d8060008114610d7a576040519150601f19603f3d011682016040523d82523d6000602084013e610d7f565b606091505b505090506000610d8d610f96565b73ffffffffffffffffffffffffffffffffffffffff1684604051610db0906125e9565b60006040518083038185875af1925050503d8060008114610ded576040519150601f19603f3d011682016040523d82523d6000602084013e610df2565b606091505b50509050818015610e005750805b610e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e36906128e7565b60405180910390fd5b610e476109a2565b610e4f610f96565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3e16d8cfffc726d59dd4696083a0c49bbb236e50396f01dbaff45a429e7bad128a600954600a54604051610eb393929190612907565b60405180910390a450505050505050565b600060066001836002610ed79190612723565b610ee19190612699565b600184610eee9190612699565b84610ef99190612723565b610f039190612723565b610f0d91906127ac565b9050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f8a611946565b610f946000611ef0565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610fcf90612488565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffb90612488565b80156110485780601f1061101d57610100808354040283529160200191611048565b820191906000526020600020905b81548152906001019060200180831161102b57829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5442106110bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b390612829565b60405180910390fd5b600b54816110c86109a2565b6110d29190612699565b1115611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110a9061298a565b60405180910390fd5b600061111e826109db565b90506000670de0b6b3a7640000600954836111399190612723565b61114391906127ac565b90506000670de0b6b3a7640000600a548461115e9190612723565b61116891906127ac565b905060008183856111799190612699565b6111839190612699565b9050803410156111cc5780346040517f7040b58c0000000000000000000000000000000000000000000000000000000081526004016111c3929190612849565b60405180910390fd5b6111d63386611fb6565b803411156112a65760003373ffffffffffffffffffffffffffffffffffffffff16823461120391906126ef565b60405161120f906125e9565b60006040518083038185875af1925050503d806000811461124c576040519150601f19603f3d011682016040523d82523d6000602084013e611251565b606091505b50509050806112a45733823461126791906126ef565b6040517f2c6a51e200000000000000000000000000000000000000000000000000000000815260040161129b929190612872565b60405180910390fd5b505b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846040516112ee906125e9565b60006040518083038185875af1925050503d806000811461132b576040519150601f19603f3d011682016040523d82523d6000602084013e611330565b606091505b50509050600061133e610f96565b73ffffffffffffffffffffffffffffffffffffffff1684604051611361906125e9565b60006040518083038185875af1925050503d806000811461139e576040519150601f19603f3d011682016040523d82523d6000602084013e6113a3565b606091505b505090508180156113b15750805b6113f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e7906128e7565b60405180910390fd5b6113f86109a2565b611400610f96565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5860d9008a30f310a429551672216806f453f09e78d42235b44e85dc43a1df2a8a600954600a5460405161146493929190612907565b60405180910390a450505050505050565b600080611480611773565b9050600061148e8286611656565b9050838110156114d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ca90612a1c565b60405180910390fd5b6114e0828686840361177b565b60019250505092915050565b600c5481565b6000806114fd611773565b905061150a818585611aaa565b600191505092915050565b600061151f6109a2565b82111561152f5760009050611602565b600061154161153c6109a2565b610ec4565b90506000611560846115516109a2565b61155b91906126ef565b610ec4565b90506000818361157091906126ef565b90506000670de0b6b3a76400006009548361158b9190612723565b61159591906127ac565b90506000670de0b6b3a7640000600a54846115b09190612723565b6115ba91906127ac565b905080826115c89190612699565b8310156115dd57600095505050505050611602565b60008183856115ec91906126ef565b6115f691906126ef565b90508096505050505050505b919050565b60095481565b60008061162061161b6109a2565b610ec4565b9050600061163f846116306109a2565b61163a91906126ef565b610ec4565b9050808261164d91906126ef565b92505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6116e5611946565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174c90612aae565b60405180910390fd5b61175e81611ef0565b50565b600a5481565b6000600c544210905090565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e290612b40565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561185b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185290612bd2565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161193991906122f0565b60405180910390a3505050565b61194e611773565b73ffffffffffffffffffffffffffffffffffffffff1661196c610f96565b73ffffffffffffffffffffffffffffffffffffffff16146119c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b990612c3e565b60405180910390fd5b565b60026006541415611a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0190612caa565b60405180910390fd5b6002600681905550565b6001600681905550565b6000611a2a8484611656565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611aa45781811015611a96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8d90612d16565b60405180910390fd5b611aa3848484840361177b565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1190612da8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8190612e3a565b60405180910390fd5b611b9583838361210d565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1290612ecc565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d0991906122f0565b60405180910390a3611d1c848484612112565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8990612f5e565b60405180910390fd5b611d9e8260008361210d565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1b90612ff0565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ed791906122f0565b60405180910390a3611eeb83600084612112565b505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201d9061305c565b60405180910390fd5b6120326000838361210d565b80600260008282546120449190612699565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120f591906122f0565b60405180910390a361210960008383612112565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612151578082015181840152602081019050612136565b83811115612160576000848401525b50505050565b6000601f19601f8301169050919050565b600061218282612117565b61218c8185612122565b935061219c818560208601612133565b6121a581612166565b840191505092915050565b600060208201905081810360008301526121ca8184612177565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612202826121d7565b9050919050565b612212816121f7565b811461221d57600080fd5b50565b60008135905061222f81612209565b92915050565b6000819050919050565b61224881612235565b811461225357600080fd5b50565b6000813590506122658161223f565b92915050565b60008060408385031215612282576122816121d2565b5b600061229085828601612220565b92505060206122a185828601612256565b9150509250929050565b60008115159050919050565b6122c0816122ab565b82525050565b60006020820190506122db60008301846122b7565b92915050565b6122ea81612235565b82525050565b600060208201905061230560008301846122e1565b92915050565b600080600060608486031215612324576123236121d2565b5b600061233286828701612220565b935050602061234386828701612220565b925050604061235486828701612256565b9150509250925092565b600060208284031215612374576123736121d2565b5b600061238284828501612256565b91505092915050565b600060ff82169050919050565b6123a18161238b565b82525050565b60006020820190506123bc6000830184612398565b92915050565b6123cb816121f7565b82525050565b60006020820190506123e660008301846123c2565b92915050565b600060208284031215612402576124016121d2565b5b600061241084828501612220565b91505092915050565b600080604083850312156124305761242f6121d2565b5b600061243e85828601612220565b925050602061244f85828601612220565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124a057607f821691505b602082108114156124b4576124b3612459565b5b50919050565b7f436f6e7472616374206973207374696c6c20696e20616374697665207068617360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000612516602183612122565b9150612521826124ba565b604082019050919050565b6000602082019050818103600083015261254581612509565b9050919050565b7f4e6f2066756e647320617661696c61626c6520746f20647261696e0000000000600082015250565b6000612582601b83612122565b915061258d8261254c565b602082019050919050565b600060208201905081810360008301526125b181612575565b9050919050565b600081905092915050565b50565b60006125d36000836125b8565b91506125de826125c3565b600082019050919050565b60006125f4826125c6565b9150819050919050565b7f4661696c656420746f207472616e736665722066756e64730000000000000000600082015250565b6000612634601883612122565b915061263f826125fe565b602082019050919050565b6000602082019050818103600083015261266381612627565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126a482612235565b91506126af83612235565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126e4576126e361266a565b5b828201905092915050565b60006126fa82612235565b915061270583612235565b9250828210156127185761271761266a565b5b828203905092915050565b600061272e82612235565b915061273983612235565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156127725761277161266a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006127b782612235565b91506127c283612235565b9250826127d2576127d161277d565b5b828204905092915050565b7f4163746976652070686173652068617320656e64656400000000000000000000600082015250565b6000612813601683612122565b915061281e826127dd565b602082019050919050565b6000602082019050818103600083015261284281612806565b9050919050565b600060408201905061285e60008301856122e1565b61286b60208301846122e1565b9392505050565b600060408201905061288760008301856123c2565b61289460208301846122e1565b9392505050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b60006128d1601483612122565b91506128dc8261289b565b602082019050919050565b60006020820190508181036000830152612900816128c4565b9050919050565b600060608201905061291c60008301866122e1565b61292960208301856122e1565b61293660408301846122e1565b949350505050565b7f4d6178696d756d20737570706c79206578636565646564000000000000000000600082015250565b6000612974601783612122565b915061297f8261293e565b602082019050919050565b600060208201905081810360008301526129a381612967565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612a06602583612122565b9150612a11826129aa565b604082019050919050565b60006020820190508181036000830152612a35816129f9565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a98602683612122565b9150612aa382612a3c565b604082019050919050565b60006020820190508181036000830152612ac781612a8b565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b2a602483612122565b9150612b3582612ace565b604082019050919050565b60006020820190508181036000830152612b5981612b1d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bbc602283612122565b9150612bc782612b60565b604082019050919050565b60006020820190508181036000830152612beb81612baf565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612c28602083612122565b9150612c3382612bf2565b602082019050919050565b60006020820190508181036000830152612c5781612c1b565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612c94601f83612122565b9150612c9f82612c5e565b602082019050919050565b60006020820190508181036000830152612cc381612c87565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612d00601d83612122565b9150612d0b82612cca565b602082019050919050565b60006020820190508181036000830152612d2f81612cf3565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612d92602583612122565b9150612d9d82612d36565b604082019050919050565b60006020820190508181036000830152612dc181612d85565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612e24602383612122565b9150612e2f82612dc8565b604082019050919050565b60006020820190508181036000830152612e5381612e17565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612eb6602683612122565b9150612ec182612e5a565b604082019050919050565b60006020820190508181036000830152612ee581612ea9565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f48602183612122565b9150612f5382612eec565b604082019050919050565b60006020820190508181036000830152612f7781612f3b565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612fda602283612122565b9150612fe582612f7e565b604082019050919050565b6000602082019050818103600083015261300981612fcd565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613046601f83612122565b915061305182613010565b602082019050919050565b6000602082019050818103600083015261307581613039565b905091905056fea26469706673582212201f2d0f3545c68ad2312165d2b755692a9a6c25cc10cde1459f7a3e4a34b57f5564736f6c63430008080033a2646970667358221220c650e3107b0ff7bff2253609902c655d4c2df739eb83892e9e40e89d81c7634064736f6c63430008080033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001305760003560e01c8063a498342111620000b1578063d7f20549116200007b578063d7f20549146200030f578063ec81aadb1462000331578063f2fde38b1462000369578063f6be71d11462000389578063fbe5323414620003a95762000130565b8063a49834211462000275578063b187bd261462000295578063bb5dfe1914620002b7578063bcc066fc14620002d95762000130565b8063715018a611620000ff578063715018a614620001cf5780637a31c18514620001db5780638c6186a314620001fb5780638da5cb5b146200021d57806396266d9c146200023f5762000130565b80630fb5a6b414620001355780631f69565f146200015757806344161783146200018d5780636e3eb6f414620001af575b600080fd5b6200013f620003c9565b6040516200014e919062000d47565b60405180910390f35b6200017560048036038101906200016f919062000ddd565b620003cf565b60405162000184919062000e79565b60405180910390f35b62000197620004f9565b604051620001a6919062000d47565b60405180910390f35b620001cd6004803603810190620001c7919062000ed3565b620004ff565b005b620001d962000563565b005b620001f96004803603810190620001f3919062000f36565b6200057b565b005b62000205620005c8565b60405162000214919062000f79565b60405180910390f35b62000227620005ee565b60405162000236919062000f79565b60405180910390f35b6200025d600480360381019062000257919062000ddd565b62000617565b6040516200026c919062000d47565b60405180910390f35b6200029360048036038101906200028d919062000f36565b6200062f565b005b6200029f6200067c565b604051620002ae919062000fa7565b60405180910390f35b620002c16200068f565b604051620002d0919062000d47565b60405180910390f35b620002f76004803603810190620002f1919062001126565b62000695565b60405162000306919062000f79565b60405180910390f35b62000319620009a7565b60405162000328919062000d47565b60405180910390f35b6200034f600480360381019062000349919062000f36565b620009ad565b6040516200036093929190620011ab565b60405180910390f35b62000387600480360381019062000381919062000ddd565b62000a17565b005b620003a76004803603810190620003a1919062000f36565b62000aa2565b005b620003c76004803603810190620003c1919062000ddd565b62000aef565b005b60075481565b620003d962000cd1565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600360008281526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481525050915050919050565b60045481565b6200050962000b80565b80600660146101000a81548160ff0219169083151502179055507fd119587be04d80080c64717a0dc158c674898c4fe140498ffd144e1f6645d8b98160015460405162000558929190620011e8565b60405180910390a150565b6200056d62000b80565b62000579600062000c05565b565b6200058562000b80565b806005819055507f444c2ee6a42985e86e4d1c21435989ae523bae8ee02a11e8579bc4ac18b1d4ae81604051620005bd919062000d47565b60405180910390a150565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026020528060005260406000206000915090505481565b6200063962000b80565b806004819055507fa318485d4b7a387f0695a0179248931f1d023e08844d98b4e9e34775324bceb58160405162000671919062000d47565b60405180910390a150565b600660149054906101000a900460ff1681565b60015481565b6000600660149054906101000a900460ff1615620006ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006e19062001276565b60405180910390fd5b600060075442620006fc9190620012c7565b90506000848483600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600454600554306040516200073b9062000d1e565b6200074d9796959493929190620013a6565b604051809103906000f0801580156200076a573d6000803e3d6000fd5b5090506000600160008154620007809062001431565b919050819055905060405180606001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001848152506003600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015590505080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b8152600401620008fc919062000f79565b600060405180830381600087803b1580156200091757600080fd5b505af11580156200092c573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f67af801147c58f7e90444ba6d7d83009fb779c5320ca0ab1cf16e4a879de9b5c88888760405162000993939291906200147f565b60405180910390a381935050505092915050565b60055481565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b62000a2162000b80565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000a94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a8b9062001540565b60405180910390fd5b62000a9f8162000c05565b50565b62000aac62000b80565b806007819055507f234a8b70e70d5fc5ace24d19c8c988edfd5dc006d6f8356cab0273e2f084a9098160405162000ae4919062000d47565b60405180910390a150565b62000af962000b80565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f9ffcc7872e184f6db78bf00d137d6a7d52aa1546937286c01382063602bbcad660405160405180910390a250565b62000b8a62000cc9565b73ffffffffffffffffffffffffffffffffffffffff1662000baa620005ee565b73ffffffffffffffffffffffffffffffffffffffff161462000c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000bfa90620015b2565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b61383080620015d583390190565b6000819050919050565b62000d418162000d2c565b82525050565b600060208201905062000d5e600083018462000d36565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000da58262000d78565b9050919050565b62000db78162000d98565b811462000dc357600080fd5b50565b60008135905062000dd78162000dac565b92915050565b60006020828403121562000df65762000df562000d6e565b5b600062000e068482850162000dc6565b91505092915050565b62000e1a8162000d98565b82525050565b62000e2b8162000d2c565b82525050565b60608201600082015162000e49600085018262000e0f565b50602082015162000e5e602085018262000e0f565b50604082015162000e73604085018262000e20565b50505050565b600060608201905062000e90600083018462000e31565b92915050565b60008115159050919050565b62000ead8162000e96565b811462000eb957600080fd5b50565b60008135905062000ecd8162000ea2565b92915050565b60006020828403121562000eec5762000eeb62000d6e565b5b600062000efc8482850162000ebc565b91505092915050565b62000f108162000d2c565b811462000f1c57600080fd5b50565b60008135905062000f308162000f05565b92915050565b60006020828403121562000f4f5762000f4e62000d6e565b5b600062000f5f8482850162000f1f565b91505092915050565b62000f738162000d98565b82525050565b600060208201905062000f90600083018462000f68565b92915050565b62000fa18162000e96565b82525050565b600060208201905062000fbe600083018462000f96565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620010198262000fce565b810181811067ffffffffffffffff821117156200103b576200103a62000fdf565b5b80604052505050565b60006200105062000d64565b90506200105e82826200100e565b919050565b600067ffffffffffffffff82111562001081576200108062000fdf565b5b6200108c8262000fce565b9050602081019050919050565b82818337600083830152505050565b6000620010bf620010b98462001063565b62001044565b905082815260208101848484011115620010de57620010dd62000fc9565b5b620010eb84828562001099565b509392505050565b600082601f8301126200110b576200110a62000fc4565b5b81356200111d848260208601620010a8565b91505092915050565b6000806040838503121562001140576200113f62000d6e565b5b600083013567ffffffffffffffff81111562001161576200116062000d73565b5b6200116f85828601620010f3565b925050602083013567ffffffffffffffff81111562001193576200119262000d73565b5b620011a185828601620010f3565b9150509250929050565b6000606082019050620011c2600083018662000f68565b620011d1602083018562000f68565b620011e0604083018462000d36565b949350505050565b6000604082019050620011ff600083018562000f96565b6200120e602083018462000d36565b9392505050565b600082825260208201905092915050565b7f466163746f727920697320706175736564000000000000000000000000000000600082015250565b60006200125e60118362001215565b91506200126b8262001226565b602082019050919050565b6000602082019050818103600083015262001291816200124f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620012d48262000d2c565b9150620012e18362000d2c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562001319576200131862001298565b5b828201905092915050565b600081519050919050565b60005b838110156200134f57808201518184015260208101905062001332565b838111156200135f576000848401525b50505050565b6000620013728262001324565b6200137e818562001215565b9350620013908185602086016200132f565b6200139b8162000fce565b840191505092915050565b600060e0820190508181036000830152620013c2818a62001365565b90508181036020830152620013d8818962001365565b9050620013e9604083018862000d36565b620013f8606083018762000f68565b62001407608083018662000d36565b6200141660a083018562000d36565b6200142560c083018462000f68565b98975050505050505050565b60006200143e8262000d2c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562001474576200147362001298565b5b600182019050919050565b600060608201905081810360008301526200149b818662001365565b90508181036020830152620014b1818562001365565b9050620014c2604083018462000d36565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006200152860268362001215565b91506200153582620014ca565b604082019050919050565b600060208201905081810360008301526200155b8162001519565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200159a60208362001215565b9150620015a78262001562565b602082019050919050565b60006020820190508181036000830152620015cd816200158b565b905091905056fe60806040526301312d00600b553480156200001957600080fd5b50604051620038303803806200383083398181016040528101906200003f91906200056f565b868681600390805190602001906200005992919062000282565b5080600490805190602001906200007292919062000282565b5050506200009562000089620001b460201b60201c565b620001bc60201b60201c565b6001600681905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141562000110576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010790620006e7565b60405180910390fd5b84600c819055508260098190555081600a8190555083600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050506200076e565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002909062000738565b90600052602060002090601f016020900481019282620002b4576000855562000300565b82601f10620002cf57805160ff191683800117855562000300565b8280016001018555821562000300579182015b82811115620002ff578251825591602001919060010190620002e2565b5b5090506200030f919062000313565b5090565b5b808211156200032e57600081600090555060010162000314565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200039b8262000350565b810181811067ffffffffffffffff82111715620003bd57620003bc62000361565b5b80604052505050565b6000620003d262000332565b9050620003e0828262000390565b919050565b600067ffffffffffffffff82111562000403576200040262000361565b5b6200040e8262000350565b9050602081019050919050565b60005b838110156200043b5780820151818401526020810190506200041e565b838111156200044b576000848401525b50505050565b6000620004686200046284620003e5565b620003c6565b9050828152602081018484840111156200048757620004866200034b565b5b620004948482856200041b565b509392505050565b600082601f830112620004b457620004b362000346565b5b8151620004c684826020860162000451565b91505092915050565b6000819050919050565b620004e481620004cf565b8114620004f057600080fd5b50565b6000815190506200050481620004d9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000537826200050a565b9050919050565b62000549816200052a565b81146200055557600080fd5b50565b60008151905062000569816200053e565b92915050565b600080600080600080600060e0888a0312156200059157620005906200033c565b5b600088015167ffffffffffffffff811115620005b257620005b162000341565b5b620005c08a828b016200049c565b975050602088015167ffffffffffffffff811115620005e457620005e362000341565b5b620005f28a828b016200049c565b9650506040620006058a828b01620004f3565b9550506060620006188a828b0162000558565b94505060806200062b8a828b01620004f3565b93505060a06200063e8a828b01620004f3565b92505060c0620006518a828b0162000558565b91505092959891949750929550565b600082825260208201905092915050565b7f4665652064657374696e6174696f6e2063616e6e6f7420626520746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000620006cf602a8362000660565b9150620006dc8262000671565b604082019050919050565b600060208201905081810360008301526200070281620006c0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200075157607f821691505b6020821081141562000768576200076762000709565b5b50919050565b6130b2806200077e6000396000f3fe6080604052600436106101c25760003560e01c8063715018a6116100f7578063a9059cbb11610095578063dd62ed3e11610064578063dd62ed3e14610687578063f2fde38b146106c4578063f46d9324146106ed578063fba7cc7914610718576101c2565b8063a9059cbb146105a5578063c5a1d5e2146105e2578063d6e6eb9f1461061f578063d7e894661461064a576101c2565b8063966dae0e116100d1578063966dae0e146104f6578063a0712d6814610521578063a457c2d71461053d578063a85adeab1461057a576101c2565b8063715018a6146104895780638da5cb5b146104a057806395d89b41146104cb576101c2565b806332cb6b0c1161016457806342966c681161013e57806342966c68146103bb5780634768e885146103e45780634ce7957c1461042157806370a082311461044c576101c2565b806332cb6b0c1461031657806338cb037a14610341578063395093511461037e576101c2565b806318160ddd116101a057806318160ddd1461024657806323b872dd1461027157806327de8f27146102ae578063313ce567146102eb576101c2565b806306fdde03146101c7578063095ea7b3146101f2578063147d07351461022f575b600080fd5b3480156101d357600080fd5b506101dc610743565b6040516101e991906121b0565b60405180910390f35b3480156101fe57600080fd5b506102196004803603810190610214919061226b565b6107d5565b60405161022691906122c6565b60405180910390f35b34801561023b57600080fd5b506102446107f8565b005b34801561025257600080fd5b5061025b6109a2565b60405161026891906122f0565b60405180910390f35b34801561027d57600080fd5b506102986004803603810190610293919061230b565b6109ac565b6040516102a591906122c6565b60405180910390f35b3480156102ba57600080fd5b506102d560048036038101906102d0919061235e565b6109db565b6040516102e291906122f0565b60405180910390f35b3480156102f757600080fd5b50610300610a24565b60405161030d91906123a7565b60405180910390f35b34801561032257600080fd5b5061032b610a29565b60405161033891906122f0565b60405180910390f35b34801561034d57600080fd5b506103686004803603810190610363919061235e565b610a2f565b60405161037591906122f0565b60405180910390f35b34801561038a57600080fd5b506103a560048036038101906103a0919061226b565b610ae6565b6040516103b291906122c6565b60405180910390f35b3480156103c757600080fd5b506103e260048036038101906103dd919061235e565b610b1d565b005b3480156103f057600080fd5b5061040b6004803603810190610406919061235e565b610ec4565b60405161041891906122f0565b60405180910390f35b34801561042d57600080fd5b50610436610f14565b60405161044391906123d1565b60405180910390f35b34801561045857600080fd5b50610473600480360381019061046e91906123ec565b610f3a565b60405161048091906122f0565b60405180910390f35b34801561049557600080fd5b5061049e610f82565b005b3480156104ac57600080fd5b506104b5610f96565b6040516104c291906123d1565b60405180910390f35b3480156104d757600080fd5b506104e0610fc0565b6040516104ed91906121b0565b60405180910390f35b34801561050257600080fd5b5061050b611052565b60405161051891906123d1565b60405180910390f35b61053b6004803603810190610536919061235e565b611078565b005b34801561054957600080fd5b50610564600480360381019061055f919061226b565b611475565b60405161057191906122c6565b60405180910390f35b34801561058657600080fd5b5061058f6114ec565b60405161059c91906122f0565b60405180910390f35b3480156105b157600080fd5b506105cc60048036038101906105c7919061226b565b6114f2565b6040516105d991906122c6565b60405180910390f35b3480156105ee57600080fd5b506106096004803603810190610604919061235e565b611515565b60405161061691906122f0565b60405180910390f35b34801561062b57600080fd5b50610634611607565b60405161064191906122f0565b60405180910390f35b34801561065657600080fd5b50610671600480360381019061066c919061235e565b61160d565b60405161067e91906122f0565b60405180910390f35b34801561069357600080fd5b506106ae60048036038101906106a99190612419565b611656565b6040516106bb91906122f0565b60405180910390f35b3480156106d057600080fd5b506106eb60048036038101906106e691906123ec565b6116dd565b005b3480156106f957600080fd5b50610702611761565b60405161070f91906122f0565b60405180910390f35b34801561072457600080fd5b5061072d611767565b60405161073a91906122c6565b60405180910390f35b60606003805461075290612488565b80601f016020809104026020016040519081016040528092919081815260200182805461077e90612488565b80156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b5050505050905090565b6000806107e0611773565b90506107ed81858561177b565b600191505092915050565b610800611946565b600c54421015610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c9061252c565b60405180910390fd5b61084d6119c4565b600047905060008111610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088c90612598565b60405180910390fd5b600061089f610f96565b73ffffffffffffffffffffffffffffffffffffffff16826040516108c2906125e9565b60006040518083038185875af1925050503d80600081146108ff576040519150601f19603f3d011682016040523d82523d6000602084013e610904565b606091505b5050905080610948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093f9061264a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167ff36f4d6622e16a536bbb049064af779cdd483a0b388d347d3752a65f1058bf5b8360405161098e91906122f0565b60405180910390a250506109a0611a14565b565b6000600254905090565b6000806109b7611773565b90506109c4858285611a1e565b6109cf858585611aaa565b60019150509392505050565b6000806109ee6109e96109a2565b610ec4565b90506000610a0d846109fe6109a2565b610a089190612699565b610ec4565b90508181610a1b91906126ef565b92505050919050565b600090565b600b5481565b600080610a42610a3d6109a2565b610ec4565b90506000610a6184610a526109a2565b610a5c9190612699565b610ec4565b905060008282610a7191906126ef565b90506000670de0b6b3a764000060095483610a8c9190612723565b610a9691906127ac565b90506000670de0b6b3a7640000600a5484610ab19190612723565b610abb91906127ac565b90506000818385610acc9190612699565b610ad69190612699565b9050809650505050505050919050565b600080610af1611773565b9050610b12818585610b038589611656565b610b0d9190612699565b61177b565b600191505092915050565b600c544210610b61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5890612829565b60405180910390fd5b610b6a33610f3a565b811115610bb857610b7a33610f3a565b816040517f59efbd20000000000000000000000000000000000000000000000000000000008152600401610baf929190612849565b60405180910390fd5b6000610bc38261160d565b90506000670de0b6b3a764000060095483610bde9190612723565b610be891906127ac565b90506000670de0b6b3a7640000600a5484610c039190612723565b610c0d91906127ac565b9050610c193385611d22565b60003373ffffffffffffffffffffffffffffffffffffffff16828486610c3f91906126ef565b610c4991906126ef565b604051610c55906125e9565b60006040518083038185875af1925050503d8060008114610c92576040519150601f19603f3d011682016040523d82523d6000602084013e610c97565b606091505b5050905080610cf55733828486610cae91906126ef565b610cb891906126ef565b6040517f2c6a51e2000000000000000000000000000000000000000000000000000000008152600401610cec929190612872565b60405180910390fd5b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610d3d906125e9565b60006040518083038185875af1925050503d8060008114610d7a576040519150601f19603f3d011682016040523d82523d6000602084013e610d7f565b606091505b505090506000610d8d610f96565b73ffffffffffffffffffffffffffffffffffffffff1684604051610db0906125e9565b60006040518083038185875af1925050503d8060008114610ded576040519150601f19603f3d011682016040523d82523d6000602084013e610df2565b606091505b50509050818015610e005750805b610e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e36906128e7565b60405180910390fd5b610e476109a2565b610e4f610f96565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3e16d8cfffc726d59dd4696083a0c49bbb236e50396f01dbaff45a429e7bad128a600954600a54604051610eb393929190612907565b60405180910390a450505050505050565b600060066001836002610ed79190612723565b610ee19190612699565b600184610eee9190612699565b84610ef99190612723565b610f039190612723565b610f0d91906127ac565b9050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f8a611946565b610f946000611ef0565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610fcf90612488565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffb90612488565b80156110485780601f1061101d57610100808354040283529160200191611048565b820191906000526020600020905b81548152906001019060200180831161102b57829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5442106110bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b390612829565b60405180910390fd5b600b54816110c86109a2565b6110d29190612699565b1115611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110a9061298a565b60405180910390fd5b600061111e826109db565b90506000670de0b6b3a7640000600954836111399190612723565b61114391906127ac565b90506000670de0b6b3a7640000600a548461115e9190612723565b61116891906127ac565b905060008183856111799190612699565b6111839190612699565b9050803410156111cc5780346040517f7040b58c0000000000000000000000000000000000000000000000000000000081526004016111c3929190612849565b60405180910390fd5b6111d63386611fb6565b803411156112a65760003373ffffffffffffffffffffffffffffffffffffffff16823461120391906126ef565b60405161120f906125e9565b60006040518083038185875af1925050503d806000811461124c576040519150601f19603f3d011682016040523d82523d6000602084013e611251565b606091505b50509050806112a45733823461126791906126ef565b6040517f2c6a51e200000000000000000000000000000000000000000000000000000000815260040161129b929190612872565b60405180910390fd5b505b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846040516112ee906125e9565b60006040518083038185875af1925050503d806000811461132b576040519150601f19603f3d011682016040523d82523d6000602084013e611330565b606091505b50509050600061133e610f96565b73ffffffffffffffffffffffffffffffffffffffff1684604051611361906125e9565b60006040518083038185875af1925050503d806000811461139e576040519150601f19603f3d011682016040523d82523d6000602084013e6113a3565b606091505b505090508180156113b15750805b6113f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e7906128e7565b60405180910390fd5b6113f86109a2565b611400610f96565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5860d9008a30f310a429551672216806f453f09e78d42235b44e85dc43a1df2a8a600954600a5460405161146493929190612907565b60405180910390a450505050505050565b600080611480611773565b9050600061148e8286611656565b9050838110156114d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ca90612a1c565b60405180910390fd5b6114e0828686840361177b565b60019250505092915050565b600c5481565b6000806114fd611773565b905061150a818585611aaa565b600191505092915050565b600061151f6109a2565b82111561152f5760009050611602565b600061154161153c6109a2565b610ec4565b90506000611560846115516109a2565b61155b91906126ef565b610ec4565b90506000818361157091906126ef565b90506000670de0b6b3a76400006009548361158b9190612723565b61159591906127ac565b90506000670de0b6b3a7640000600a54846115b09190612723565b6115ba91906127ac565b905080826115c89190612699565b8310156115dd57600095505050505050611602565b60008183856115ec91906126ef565b6115f691906126ef565b90508096505050505050505b919050565b60095481565b60008061162061161b6109a2565b610ec4565b9050600061163f846116306109a2565b61163a91906126ef565b610ec4565b9050808261164d91906126ef565b92505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6116e5611946565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174c90612aae565b60405180910390fd5b61175e81611ef0565b50565b600a5481565b6000600c544210905090565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e290612b40565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561185b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185290612bd2565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161193991906122f0565b60405180910390a3505050565b61194e611773565b73ffffffffffffffffffffffffffffffffffffffff1661196c610f96565b73ffffffffffffffffffffffffffffffffffffffff16146119c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b990612c3e565b60405180910390fd5b565b60026006541415611a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0190612caa565b60405180910390fd5b6002600681905550565b6001600681905550565b6000611a2a8484611656565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611aa45781811015611a96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8d90612d16565b60405180910390fd5b611aa3848484840361177b565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1190612da8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8190612e3a565b60405180910390fd5b611b9583838361210d565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1290612ecc565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d0991906122f0565b60405180910390a3611d1c848484612112565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8990612f5e565b60405180910390fd5b611d9e8260008361210d565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1b90612ff0565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ed791906122f0565b60405180910390a3611eeb83600084612112565b505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201d9061305c565b60405180910390fd5b6120326000838361210d565b80600260008282546120449190612699565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120f591906122f0565b60405180910390a361210960008383612112565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612151578082015181840152602081019050612136565b83811115612160576000848401525b50505050565b6000601f19601f8301169050919050565b600061218282612117565b61218c8185612122565b935061219c818560208601612133565b6121a581612166565b840191505092915050565b600060208201905081810360008301526121ca8184612177565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612202826121d7565b9050919050565b612212816121f7565b811461221d57600080fd5b50565b60008135905061222f81612209565b92915050565b6000819050919050565b61224881612235565b811461225357600080fd5b50565b6000813590506122658161223f565b92915050565b60008060408385031215612282576122816121d2565b5b600061229085828601612220565b92505060206122a185828601612256565b9150509250929050565b60008115159050919050565b6122c0816122ab565b82525050565b60006020820190506122db60008301846122b7565b92915050565b6122ea81612235565b82525050565b600060208201905061230560008301846122e1565b92915050565b600080600060608486031215612324576123236121d2565b5b600061233286828701612220565b935050602061234386828701612220565b925050604061235486828701612256565b9150509250925092565b600060208284031215612374576123736121d2565b5b600061238284828501612256565b91505092915050565b600060ff82169050919050565b6123a18161238b565b82525050565b60006020820190506123bc6000830184612398565b92915050565b6123cb816121f7565b82525050565b60006020820190506123e660008301846123c2565b92915050565b600060208284031215612402576124016121d2565b5b600061241084828501612220565b91505092915050565b600080604083850312156124305761242f6121d2565b5b600061243e85828601612220565b925050602061244f85828601612220565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124a057607f821691505b602082108114156124b4576124b3612459565b5b50919050565b7f436f6e7472616374206973207374696c6c20696e20616374697665207068617360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000612516602183612122565b9150612521826124ba565b604082019050919050565b6000602082019050818103600083015261254581612509565b9050919050565b7f4e6f2066756e647320617661696c61626c6520746f20647261696e0000000000600082015250565b6000612582601b83612122565b915061258d8261254c565b602082019050919050565b600060208201905081810360008301526125b181612575565b9050919050565b600081905092915050565b50565b60006125d36000836125b8565b91506125de826125c3565b600082019050919050565b60006125f4826125c6565b9150819050919050565b7f4661696c656420746f207472616e736665722066756e64730000000000000000600082015250565b6000612634601883612122565b915061263f826125fe565b602082019050919050565b6000602082019050818103600083015261266381612627565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126a482612235565b91506126af83612235565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126e4576126e361266a565b5b828201905092915050565b60006126fa82612235565b915061270583612235565b9250828210156127185761271761266a565b5b828203905092915050565b600061272e82612235565b915061273983612235565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156127725761277161266a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006127b782612235565b91506127c283612235565b9250826127d2576127d161277d565b5b828204905092915050565b7f4163746976652070686173652068617320656e64656400000000000000000000600082015250565b6000612813601683612122565b915061281e826127dd565b602082019050919050565b6000602082019050818103600083015261284281612806565b9050919050565b600060408201905061285e60008301856122e1565b61286b60208301846122e1565b9392505050565b600060408201905061288760008301856123c2565b61289460208301846122e1565b9392505050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b60006128d1601483612122565b91506128dc8261289b565b602082019050919050565b60006020820190508181036000830152612900816128c4565b9050919050565b600060608201905061291c60008301866122e1565b61292960208301856122e1565b61293660408301846122e1565b949350505050565b7f4d6178696d756d20737570706c79206578636565646564000000000000000000600082015250565b6000612974601783612122565b915061297f8261293e565b602082019050919050565b600060208201905081810360008301526129a381612967565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612a06602583612122565b9150612a11826129aa565b604082019050919050565b60006020820190508181036000830152612a35816129f9565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a98602683612122565b9150612aa382612a3c565b604082019050919050565b60006020820190508181036000830152612ac781612a8b565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b2a602483612122565b9150612b3582612ace565b604082019050919050565b60006020820190508181036000830152612b5981612b1d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bbc602283612122565b9150612bc782612b60565b604082019050919050565b60006020820190508181036000830152612beb81612baf565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612c28602083612122565b9150612c3382612bf2565b602082019050919050565b60006020820190508181036000830152612c5781612c1b565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612c94601f83612122565b9150612c9f82612c5e565b602082019050919050565b60006020820190508181036000830152612cc381612c87565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612d00601d83612122565b9150612d0b82612cca565b602082019050919050565b60006020820190508181036000830152612d2f81612cf3565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612d92602583612122565b9150612d9d82612d36565b604082019050919050565b60006020820190508181036000830152612dc181612d85565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612e24602383612122565b9150612e2f82612dc8565b604082019050919050565b60006020820190508181036000830152612e5381612e17565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612eb6602683612122565b9150612ec182612e5a565b604082019050919050565b60006020820190508181036000830152612ee581612ea9565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f48602183612122565b9150612f5382612eec565b604082019050919050565b60006020820190508181036000830152612f7781612f3b565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612fda602283612122565b9150612fe582612f7e565b604082019050919050565b6000602082019050818103600083015261300981612fcd565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613046601f83612122565b915061305182613010565b602082019050919050565b6000602082019050818103600083015261307581613039565b905091905056fea26469706673582212201f2d0f3545c68ad2312165d2b755692a9a6c25cc10cde1459f7a3e4a34b57f5564736f6c63430008080033a2646970667358221220c650e3107b0ff7bff2253609902c655d4c2df739eb83892e9e40e89d81c7634064736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "defaultProtocolFeePercent": {
        "details": "defaultProtocolFeePercent is the default protocol fee percentage. ex: 2% = 2 * 10**16 = 20000000000000000.defaultStreamerFeePercent is the default streamer fee percentage. ex: 2% = 2 * 10**16 = 20000000000000000.defaultFeeDestination is the default fee destination address.isPaused is a boolean to pause the factory and its token creation function.duration is the default duration in seconds for the lifespan of a token."
      },
      "numDeployedTokens": {
        "details": "numDeployedTokens is the number of deployed tokens.deployedTokenIndices is a mapping of token addresses to their assigned index.deployedTokens is a mapping of token indices to TokenInfo structs."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 893,
        "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
        "label": "numDeployedTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 897,
        "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
        "label": "deployedTokenIndices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 902,
        "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
        "label": "deployedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenInfo)890_storage)"
      },
      {
        "astId": 905,
        "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
        "label": "defaultProtocolFeePercent",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 907,
        "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
        "label": "defaultStreamerFeePercent",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 909,
        "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
        "label": "defaultFeeDestination",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 911,
        "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
        "label": "isPaused",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 913,
        "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
        "label": "duration",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenInfo)890_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TempTokenFactoryV1.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)890_storage"
      },
      "t_struct(TokenInfo)890_storage": {
        "encoding": "inplace",
        "label": "struct TempTokenFactoryV1.TokenInfo",
        "members": [
          {
            "astId": 885,
            "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 887,
            "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 889,
            "contract": "contracts/TempTokenFactoryV1.sol:TempTokenFactoryV1",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}