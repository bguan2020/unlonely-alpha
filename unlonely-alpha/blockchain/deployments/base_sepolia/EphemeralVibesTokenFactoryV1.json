{
  "address": "0x994005256A268953C0620e8983DcB9900c097914",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultFeeDestination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_defaultProtocolFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultStreamerFeePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "EphemeralVibesTokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeDestination",
          "type": "address"
        }
      ],
      "name": "FeeDestinationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeePercentSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "name": "StreamerFeePercentSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createEphemeralVibesToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultProtocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultStreamerFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deployedTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deployedTokenInfos",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "setFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setStreamerFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21c245337161e86bc37c1d495f96ebdf88e3bceaa959b08582fd0b43b5f6433d",
  "receipt": {
    "to": null,
    "from": "0x4F3d3f2F895Db524AC3944BDd17fE632473bCa4a",
    "contractAddress": "0x994005256A268953C0620e8983DcB9900c097914",
    "transactionIndex": 2,
    "gasUsed": "4080473",
    "logsBloom": "0x
    "blockHash": "0xb2a2b135e7bb8de137addb9fb5b971adde4c9997a2832979f0f3a08f6dba17ae",
    "transactionHash": "0x21c245337161e86bc37c1d495f96ebdf88e3bceaa959b08582fd0b43b5f6433d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 7340284,
        "transactionHash": "0x21c245337161e86bc37c1d495f96ebdf88e3bceaa959b08582fd0b43b5f6433d",
        "address": "0x994005256A268953C0620e8983DcB9900c097914",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f3d3f2f895db524ac3944bdd17fe632473bca4a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb2a2b135e7bb8de137addb9fb5b971adde4c9997a2832979f0f3a08f6dba17ae"
      }
    ],
    "blockNumber": 7340284,
    "cumulativeGasUsed": "4145348",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4F3d3f2F895Db524AC3944BDd17fE632473bCa4a",
    "20000000000000000",
    "20000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9cf0d2252f48a4e84dbe38a9ea6e0724",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultFeeDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultProtocolFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultStreamerFeePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"EphemeralVibesTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeDestination\",\"type\":\"address\"}],\"name\":\"FeeDestinationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeePercentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"StreamerFeePercentSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createEphemeralVibesToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultProtocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultStreamerFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployedTokenInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setStreamerFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EphemeralVibesTokenFactoryV1.sol\":\"EphemeralVibesTokenFactoryV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/EphemeralVibesTokenFactoryV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./EphemeralVibesTokenV1.sol\\\"; // Make sure this import path matches where your token contract is located.\\r\\n\\r\\ncontract EphemeralVibesTokenFactoryV1 is Ownable {\\r\\n\\r\\n    struct TokenInfo {\\r\\n        address owner;\\r\\n        uint256 endTimestamp;\\r\\n    }\\r\\n\\r\\n    address[] public deployedTokenAddresses;\\r\\n    mapping(address => TokenInfo) public deployedTokenInfos;\\r\\n\\r\\n    uint256 public defaultProtocolFeePercent;\\r\\n    uint256 public defaultStreamerFeePercent;\\r\\n    address public defaultFeeDestination;\\r\\n\\r\\n    // Event to log the creation of a new EphemeralVibesToken.\\r\\n    event EphemeralVibesTokenCreated(address indexed tokenAddress, address indexed owner, string name, string symbol, uint256 endTimestamp);\\r\\n    event FeeDestinationSet(address indexed feeDestination);\\r\\n    event ProtocolFeePercentSet(uint256 feePercent);\\r\\n    event StreamerFeePercentSet(uint256 feePercent);\\r\\n\\r\\n    constructor(address _defaultFeeDestination, uint256 _defaultProtocolFeePercent, uint256 _defaultStreamerFeePercent) {\\r\\n        require(_defaultFeeDestination != address(0), \\\"Default fee destination cannot be the zero address\\\");\\r\\n        \\r\\n        defaultProtocolFeePercent = _defaultProtocolFeePercent;\\r\\n        defaultStreamerFeePercent = _defaultStreamerFeePercent;\\r\\n        defaultFeeDestination = _defaultFeeDestination;\\r\\n    }\\r\\n\\r\\n    // This function creates a new EphemeralVibesToken contract.\\r\\n    function createEphemeralVibesToken(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint256 duration\\r\\n    ) public returns (address) {\\r\\n        uint256 endTimestamp = block.timestamp + duration;\\r\\n        EphemeralVibesTokenV1 newToken = new EphemeralVibesTokenV1(name, symbol, endTimestamp, defaultFeeDestination, defaultProtocolFeePercent, defaultStreamerFeePercent);        \\r\\n        deployedTokenAddresses.push(address(newToken));\\r\\n        deployedTokenInfos[address(newToken)] = TokenInfo(msg.sender, endTimestamp);\\r\\n        newToken.transferOwnership(msg.sender); // Transfer ownership of the new token to the caller of this function.\\r\\n        emit EphemeralVibesTokenCreated(address(newToken), msg.sender, name, symbol, endTimestamp);\\r\\n        return address(newToken);\\r\\n    }\\r\\n\\r\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\r\\n        defaultFeeDestination = _feeDestination;\\r\\n        emit FeeDestinationSet(_feeDestination);\\r\\n    }\\r\\n\\r\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        defaultProtocolFeePercent = _feePercent;\\r\\n        emit ProtocolFeePercentSet(_feePercent);\\r\\n    }\\r\\n\\r\\n    function setStreamerFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        defaultStreamerFeePercent = _feePercent;\\r\\n        emit StreamerFeePercentSet(_feePercent);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x02cef2cba29a65b0b8650d931d09f14fe182eb179e9932cf69bdd46a57fd0a32\",\"license\":\"MIT\"},\"contracts/EphemeralVibesTokenV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract EphemeralVibesTokenV1 is ERC20, Ownable, ReentrancyGuard {\\r\\n    address public protocolFeeDestination;\\r\\n    uint256 public protocolFeePercent;\\r\\n    uint256 public streamerFeePercent;\\r\\n    uint256 public MAX_SUPPLY = 20_000_000;\\r\\n    uint256 public endTimestamp;\\r\\n\\r\\n    event Mint(address indexed account, uint256 amount, address indexed streamerAddress, uint256 indexed totalSupply, uint256 protocolFeePercent, uint256 streamerFeePercent);\\r\\n    event Burn(address indexed account, uint256 amount, address indexed streamerAddress, uint256 indexed totalSupply, uint256 protocolFeePercent, uint256 streamerFeePercent);\\r\\n    event Drain(address indexed account, uint256 balance);\\r\\n\\r\\n    error InsufficientValue(uint256 minimumValue, uint256 value);\\r\\n    error BurnAmountTooHigh(uint256 maximumAmount, uint256 amount);\\r\\n    error EtherTransferFailed(address to, uint256 value);\\r\\n    error ActionNotAllowed();\\r\\n\\r\\n    modifier activePhase() {\\r\\n        require(block.timestamp < endTimestamp, \\\"Active phase has ended\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier endedPhase() {\\r\\n        require(block.timestamp >= endTimestamp, \\\"Contract is still in active phase\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n   constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint256 _endTimestamp,\\r\\n        address _protocolFeeDestination,\\r\\n        uint256 _protocolFeePercent,\\r\\n        uint256 _streamerFeePercent\\r\\n    ) ERC20(name, symbol) {\\r\\n        require(_protocolFeeDestination != address(0), \\\"Fee destination cannot be the zero address\\\");\\r\\n        \\r\\n        endTimestamp = _endTimestamp;\\r\\n        protocolFeePercent = _protocolFeePercent;\\r\\n        streamerFeePercent = _streamerFeePercent;\\r\\n        protocolFeeDestination = _protocolFeeDestination;\\r\\n    }\\r\\n\\r\\n     function mint(uint256 _amount) external payable activePhase {\\r\\n        require(totalSupply() + _amount <= MAX_SUPPLY, \\\"Maximum supply exceeded\\\");\\r\\n        uint256 cost = mintCost(_amount);\\r\\n        uint256 protocolFee = cost * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = cost * streamerFeePercent / 1 ether;\\r\\n        uint256 totalCost = cost + protocolFee + subjectFee;\\r\\n\\r\\n        if (msg.value < totalCost) {\\r\\n            revert InsufficientValue(totalCost, msg.value);\\r\\n        }\\r\\n\\r\\n        _mint(msg.sender, _amount);\\r\\n\\r\\n        if(msg.value > totalCost) {\\r\\n            (bool sent,) = msg.sender.call{value: msg.value - totalCost}(\\\"\\\");\\r\\n            if (!sent) {\\r\\n                revert EtherTransferFailed(msg.sender, msg.value - totalCost);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = owner().call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        emit Mint(msg.sender, _amount, owner(), totalSupply(), protocolFeePercent, streamerFeePercent);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _amount) external activePhase {\\r\\n        if (_amount > balanceOf(msg.sender)) {\\r\\n            revert BurnAmountTooHigh(balanceOf(msg.sender), _amount);\\r\\n        }\\r\\n\\r\\n        // Calculate refund before burn, to use the totalSupply before the burn\\r\\n        uint256 proceeds = burnProceeds(_amount);\\r\\n        uint256 protocolFee = proceeds * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = proceeds * streamerFeePercent / 1 ether;\\r\\n\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        (bool sent,) = msg.sender.call{value: proceeds - protocolFee - subjectFee}(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert EtherTransferFailed(msg.sender, proceeds - protocolFee - subjectFee);\\r\\n        }\\r\\n\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = owner().call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        emit Burn(msg.sender, _amount, owner(), totalSupply(), protocolFeePercent, streamerFeePercent);\\r\\n    }\\r\\n\\r\\n    function drainFundsIntoMyWallet() external onlyOwner endedPhase nonReentrant {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"No funds available to drain\\\");\\r\\n\\r\\n        (bool success, ) = owner().call{value: balance}(\\\"\\\");\\r\\n        require(success, \\\"Failed to transfer funds\\\");\\r\\n\\r\\n        emit Drain(msg.sender, balance);\\r\\n    }\\r\\n\\r\\n    function mintCost(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all tokens already minted\\r\\n        uint256 sumPricesCurrentTotalSupply = sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens already minted + the tokens to be newly minted\\r\\n        uint256 sumPricesNewTotalSupply = sumOfPriceToNTokens(totalSupply() + _amount);\\r\\n\\r\\n        return sumPricesNewTotalSupply - sumPricesCurrentTotalSupply;\\r\\n    }\\r\\n    \\r\\n    function mintCostAfterFees(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all tokens already minted\\r\\n        uint256 sumPricesCurrentTotalSupply = sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens already minted + the tokens to be newly minted\\r\\n        uint256 sumPricesNewTotalSupply = sumOfPriceToNTokens(totalSupply() + _amount);\\r\\n        uint256 sumDiff = sumPricesNewTotalSupply - sumPricesCurrentTotalSupply;\\r\\n\\r\\n        uint256 protocolFee = sumDiff * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = sumDiff * streamerFeePercent / 1 ether;\\r\\n        uint256 totalCost = sumDiff + protocolFee + subjectFee;\\r\\n\\r\\n        return totalCost;\\r\\n    }\\r\\n\\r\\n    function burnProceeds(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all the tokens already minted\\r\\n        uint256 sumBeforeBurn = sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens after burning _amount\\r\\n        uint256 sumAfterBurn = sumOfPriceToNTokens(totalSupply() - _amount);\\r\\n\\r\\n        return sumBeforeBurn - sumAfterBurn;\\r\\n    }\\r\\n\\r\\n    function burnProceedsAfterFees(uint256 _amount) public view returns (uint256) {\\r\\n        if (_amount > totalSupply()) {\\r\\n            // If the amount to burn exceeds total supply, return 0 or some error value\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 sumBeforeBurn = sumOfPriceToNTokens(totalSupply());\\r\\n        uint256 sumAfterBurn = sumOfPriceToNTokens(totalSupply() - _amount);\\r\\n\\r\\n        uint256 sumDiff = sumBeforeBurn - sumAfterBurn;\\r\\n\\r\\n        uint256 protocolFee = sumDiff * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = sumDiff * streamerFeePercent / 1 ether;\\r\\n\\r\\n        // Check if sumDiff is less than the total fees\\r\\n        if (sumDiff < protocolFee + subjectFee) {\\r\\n            // Handle the scenario, such as returning 0 or a specific error value\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 proceeds = sumDiff - protocolFee - subjectFee;\\r\\n        return proceeds;\\r\\n    }\\r\\n\\r\\n    function decimals() pure public override returns (uint8) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getIsActive() public view returns (bool) {\\r\\n        return block.timestamp < endTimestamp;\\r\\n    }\\r\\n\\r\\n    // The price of *all* tokens from number 1 to n.\\r\\n    function sumOfPriceToNTokens(uint256 n_) pure public returns (uint256) {\\r\\n        return n_ * (n_ + 1) * (2 * n_ + 1) / 6;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7af6041f915763e56912815ba653c76fb32cf3dd653ba1f12a0474901abc8cdb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004af838038062004af8833981810160405281019062000037919062000293565b620000576200004b6200012260201b60201c565b6200012a60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c19062000376565b60405180910390fd5b816003819055508060048190555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000398565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022082620001f3565b9050919050565b620002328162000213565b81146200023e57600080fd5b50565b600081519050620002528162000227565b92915050565b6000819050919050565b6200026d8162000258565b81146200027957600080fd5b50565b6000815190506200028d8162000262565b92915050565b600080600060608486031215620002af57620002ae620001ee565b5b6000620002bf8682870162000241565b9350506020620002d2868287016200027c565b9250506040620002e5868287016200027c565b9150509250925092565b600082825260208201905092915050565b7f44656661756c74206665652064657374696e6174696f6e2063616e6e6f74206260008201527f6520746865207a65726f20616464726573730000000000000000000000000000602082015250565b60006200035e603283620002ef565b91506200036b8262000300565b604082019050919050565b6000602082019050818103600083015262000391816200034f565b9050919050565b61475080620003a86000396000f3fe60806040523480156200001157600080fd5b5060043610620000c45760003560e01c8063a4983421116200007b578063a49834211462000191578063a68398cc14620001b1578063aa70b27e14620001e8578063d7f20549146200021e578063f2fde38b1462000240578063fbe53234146200026057620000c4565b80633f376c7014620000c95780634416178314620000ff578063715018a614620001215780637a31c185146200012d5780638c6186a3146200014d5780638da5cb5b146200016f575b600080fd5b620000e76004803603810190620000e1919062000ac4565b62000280565b604051620000f6919062000ba3565b60405180910390f35b6200010962000507565b60405162000118919062000bd1565b60405180910390f35b6200012b6200050d565b005b6200014b600480360381019062000145919062000bee565b62000525565b005b6200015762000572565b60405162000166919062000ba3565b60405180910390f35b6200017962000598565b60405162000188919062000ba3565b60405180910390f35b620001af6004803603810190620001a9919062000bee565b620005c1565b005b620001cf6004803603810190620001c9919062000c51565b6200060e565b604051620001df92919062000c83565b60405180910390f35b62000206600480360381019062000200919062000bee565b62000652565b60405162000215919062000ba3565b60405180910390f35b6200022862000692565b60405162000237919062000bd1565b60405180910390f35b6200025e600480360381019062000258919062000c51565b62000698565b005b6200027e600480360381019062000278919062000c51565b62000723565b005b600080824262000291919062000cdf565b90506000858583600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354600454604051620002cf9062000905565b620002e09695949392919062000dcf565b604051809103906000f080158015620002fd573d6000803e3d6000fd5b5090506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815250600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b81526004016200045c919062000ba3565b600060405180830381600087803b1580156200047757600080fd5b505af11580156200048c573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f36738150924a8382e966a659e46efe780fe559bce71123a1f4049e6583180aea888886604051620004f39392919062000e4a565b60405180910390a380925050509392505050565b60035481565b62000517620007b4565b62000523600062000839565b565b6200052f620007b4565b806004819055507f444c2ee6a42985e86e4d1c21435989ae523bae8ee02a11e8579bc4ac18b1d4ae8160405162000567919062000bd1565b60405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b620005cb620007b4565b806003819055507fa318485d4b7a387f0695a0179248931f1d023e08844d98b4e9e34775324bceb58160405162000603919062000bd1565b60405180910390a150565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600181815481106200066357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b620006a2620007b4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000715576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200070c9062000f0b565b60405180910390fd5b620007208162000839565b50565b6200072d620007b4565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f9ffcc7872e184f6db78bf00d137d6a7d52aa1546937286c01382063602bbcad660405160405180910390a250565b620007be620008fd565b73ffffffffffffffffffffffffffffffffffffffff16620007de62000598565b73ffffffffffffffffffffffffffffffffffffffff161462000837576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200082e9062000f7d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b61377b8062000fa083390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200097c8262000931565b810181811067ffffffffffffffff821117156200099e576200099d62000942565b5b80604052505050565b6000620009b362000913565b9050620009c1828262000971565b919050565b600067ffffffffffffffff821115620009e457620009e362000942565b5b620009ef8262000931565b9050602081019050919050565b82818337600083830152505050565b600062000a2262000a1c84620009c6565b620009a7565b90508281526020810184848401111562000a415762000a406200092c565b5b62000a4e848285620009fc565b509392505050565b600082601f83011262000a6e5762000a6d62000927565b5b813562000a8084826020860162000a0b565b91505092915050565b6000819050919050565b62000a9e8162000a89565b811462000aaa57600080fd5b50565b60008135905062000abe8162000a93565b92915050565b60008060006060848603121562000ae05762000adf6200091d565b5b600084013567ffffffffffffffff81111562000b015762000b0062000922565b5b62000b0f8682870162000a56565b935050602084013567ffffffffffffffff81111562000b335762000b3262000922565b5b62000b418682870162000a56565b925050604062000b548682870162000aad565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000b8b8262000b5e565b9050919050565b62000b9d8162000b7e565b82525050565b600060208201905062000bba600083018462000b92565b92915050565b62000bcb8162000a89565b82525050565b600060208201905062000be8600083018462000bc0565b92915050565b60006020828403121562000c075762000c066200091d565b5b600062000c178482850162000aad565b91505092915050565b62000c2b8162000b7e565b811462000c3757600080fd5b50565b60008135905062000c4b8162000c20565b92915050565b60006020828403121562000c6a5762000c696200091d565b5b600062000c7a8482850162000c3a565b91505092915050565b600060408201905062000c9a600083018562000b92565b62000ca9602083018462000bc0565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000cec8262000a89565b915062000cf98362000a89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000d315762000d3062000cb0565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000d7857808201518184015260208101905062000d5b565b8381111562000d88576000848401525b50505050565b600062000d9b8262000d3c565b62000da7818562000d47565b935062000db981856020860162000d58565b62000dc48162000931565b840191505092915050565b600060c082019050818103600083015262000deb818962000d8e565b9050818103602083015262000e01818862000d8e565b905062000e12604083018762000bc0565b62000e21606083018662000b92565b62000e30608083018562000bc0565b62000e3f60a083018462000bc0565b979650505050505050565b6000606082019050818103600083015262000e66818662000d8e565b9050818103602083015262000e7c818562000d8e565b905062000e8d604083018462000bc0565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000ef360268362000d47565b915062000f008262000e95565b604082019050919050565b6000602082019050818103600083015262000f268162000ee4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000f6560208362000d47565b915062000f728262000f2d565b602082019050919050565b6000602082019050818103600083015262000f988162000f56565b905091905056fe60806040526301312d00600a553480156200001957600080fd5b506040516200377b3803806200377b83398181016040528101906200003f91906200052d565b858581600390805190602001906200005992919062000240565b5080600490805190602001906200007292919062000240565b50505062000095620000896200017260201b60201c565b6200017a60201b60201c565b6001600681905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000107906200068e565b60405180910390fd5b83600b81905550816008819055508060098190555082600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505062000715565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200024e90620006df565b90600052602060002090601f016020900481019282620002725760008555620002be565b82601f106200028d57805160ff1916838001178555620002be565b82800160010185558215620002be579182015b82811115620002bd578251825591602001919060010190620002a0565b5b509050620002cd9190620002d1565b5090565b5b80821115620002ec576000816000905550600101620002d2565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000359826200030e565b810181811067ffffffffffffffff821117156200037b576200037a6200031f565b5b80604052505050565b600062000390620002f0565b90506200039e82826200034e565b919050565b600067ffffffffffffffff821115620003c157620003c06200031f565b5b620003cc826200030e565b9050602081019050919050565b60005b83811015620003f9578082015181840152602081019050620003dc565b8381111562000409576000848401525b50505050565b6000620004266200042084620003a3565b62000384565b90508281526020810184848401111562000445576200044462000309565b5b62000452848285620003d9565b509392505050565b600082601f83011262000472576200047162000304565b5b8151620004848482602086016200040f565b91505092915050565b6000819050919050565b620004a2816200048d565b8114620004ae57600080fd5b50565b600081519050620004c28162000497565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004f582620004c8565b9050919050565b6200050781620004e8565b81146200051357600080fd5b50565b6000815190506200052781620004fc565b92915050565b60008060008060008060c087890312156200054d576200054c620002fa565b5b600087015167ffffffffffffffff8111156200056e576200056d620002ff565b5b6200057c89828a016200045a565b965050602087015167ffffffffffffffff811115620005a0576200059f620002ff565b5b620005ae89828a016200045a565b9550506040620005c189828a01620004b1565b9450506060620005d489828a0162000516565b9350506080620005e789828a01620004b1565b92505060a0620005fa89828a01620004b1565b9150509295509295509295565b600082825260208201905092915050565b7f4665652064657374696e6174696f6e2063616e6e6f7420626520746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600062000676602a8362000607565b9150620006838262000618565b604082019050919050565b60006020820190508181036000830152620006a98162000667565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620006f857607f821691505b602082108114156200070f576200070e620006b0565b5b50919050565b61305680620007256000396000f3fe6080604052600436106101b75760003560e01c8063715018a6116100ec578063c5a1d5e21161008a578063dd62ed3e11610064578063dd62ed3e14610651578063f2fde38b1461068e578063f46d9324146106b7578063fba7cc79146106e2576101b7565b8063c5a1d5e2146105ac578063d6e6eb9f146105e9578063d7e8946614610614576101b7565b8063a0712d68116100c6578063a0712d68146104eb578063a457c2d714610507578063a85adeab14610544578063a9059cbb1461056f576101b7565b8063715018a61461047e5780638da5cb5b1461049557806395d89b41146104c0576101b7565b806332cb6b0c1161015957806342966c681161013357806342966c68146103b05780634768e885146103d95780634ce7957c1461041657806370a0823114610441576101b7565b806332cb6b0c1461030b57806338cb037a146103365780633950935114610373576101b7565b806318160ddd1161019557806318160ddd1461023b57806323b872dd1461026657806327de8f27146102a3578063313ce567146102e0576101b7565b806306fdde03146101bc578063095ea7b3146101e7578063147d073514610224575b600080fd5b3480156101c857600080fd5b506101d161070d565b6040516101de9190612154565b60405180910390f35b3480156101f357600080fd5b5061020e6004803603810190610209919061220f565b61079f565b60405161021b919061226a565b60405180910390f35b34801561023057600080fd5b506102396107c2565b005b34801561024757600080fd5b5061025061096c565b60405161025d9190612294565b60405180910390f35b34801561027257600080fd5b5061028d600480360381019061028891906122af565b610976565b60405161029a919061226a565b60405180910390f35b3480156102af57600080fd5b506102ca60048036038101906102c59190612302565b6109a5565b6040516102d79190612294565b60405180910390f35b3480156102ec57600080fd5b506102f56109ee565b604051610302919061234b565b60405180910390f35b34801561031757600080fd5b506103206109f3565b60405161032d9190612294565b60405180910390f35b34801561034257600080fd5b5061035d60048036038101906103589190612302565b6109f9565b60405161036a9190612294565b60405180910390f35b34801561037f57600080fd5b5061039a6004803603810190610395919061220f565b610ab0565b6040516103a7919061226a565b60405180910390f35b3480156103bc57600080fd5b506103d760048036038101906103d29190612302565b610ae7565b005b3480156103e557600080fd5b5061040060048036038101906103fb9190612302565b610e8e565b60405161040d9190612294565b60405180910390f35b34801561042257600080fd5b5061042b610ede565b6040516104389190612375565b60405180910390f35b34801561044d57600080fd5b5061046860048036038101906104639190612390565b610f04565b6040516104759190612294565b60405180910390f35b34801561048a57600080fd5b50610493610f4c565b005b3480156104a157600080fd5b506104aa610f60565b6040516104b79190612375565b60405180910390f35b3480156104cc57600080fd5b506104d5610f8a565b6040516104e29190612154565b60405180910390f35b61050560048036038101906105009190612302565b61101c565b005b34801561051357600080fd5b5061052e6004803603810190610529919061220f565b611419565b60405161053b919061226a565b60405180910390f35b34801561055057600080fd5b50610559611490565b6040516105669190612294565b60405180910390f35b34801561057b57600080fd5b506105966004803603810190610591919061220f565b611496565b6040516105a3919061226a565b60405180910390f35b3480156105b857600080fd5b506105d360048036038101906105ce9190612302565b6114b9565b6040516105e09190612294565b60405180910390f35b3480156105f557600080fd5b506105fe6115ab565b60405161060b9190612294565b60405180910390f35b34801561062057600080fd5b5061063b60048036038101906106369190612302565b6115b1565b6040516106489190612294565b60405180910390f35b34801561065d57600080fd5b50610678600480360381019061067391906123bd565b6115fa565b6040516106859190612294565b60405180910390f35b34801561069a57600080fd5b506106b560048036038101906106b09190612390565b611681565b005b3480156106c357600080fd5b506106cc611705565b6040516106d99190612294565b60405180910390f35b3480156106ee57600080fd5b506106f761170b565b604051610704919061226a565b60405180910390f35b60606003805461071c9061242c565b80601f01602080910402602001604051908101604052809291908181526020018280546107489061242c565b80156107955780601f1061076a57610100808354040283529160200191610795565b820191906000526020600020905b81548152906001019060200180831161077857829003601f168201915b5050505050905090565b6000806107aa611717565b90506107b781858561171f565b600191505092915050565b6107ca6118ea565b600b5442101561080f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610806906124d0565b60405180910390fd5b610817611968565b60004790506000811161085f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108569061253c565b60405180910390fd5b6000610869610f60565b73ffffffffffffffffffffffffffffffffffffffff168260405161088c9061258d565b60006040518083038185875af1925050503d80600081146108c9576040519150601f19603f3d011682016040523d82523d6000602084013e6108ce565b606091505b5050905080610912576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610909906125ee565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167ff36f4d6622e16a536bbb049064af779cdd483a0b388d347d3752a65f1058bf5b836040516109589190612294565b60405180910390a2505061096a6119b8565b565b6000600254905090565b600080610981611717565b905061098e8582856119c2565b610999858585611a4e565b60019150509392505050565b6000806109b86109b361096c565b610e8e565b905060006109d7846109c861096c565b6109d2919061263d565b610e8e565b905081816109e59190612693565b92505050919050565b600090565b600a5481565b600080610a0c610a0761096c565b610e8e565b90506000610a2b84610a1c61096c565b610a26919061263d565b610e8e565b905060008282610a3b9190612693565b90506000670de0b6b3a764000060085483610a5691906126c7565b610a609190612750565b90506000670de0b6b3a764000060095484610a7b91906126c7565b610a859190612750565b90506000818385610a96919061263d565b610aa0919061263d565b9050809650505050505050919050565b600080610abb611717565b9050610adc818585610acd85896115fa565b610ad7919061263d565b61171f565b600191505092915050565b600b544210610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b22906127cd565b60405180910390fd5b610b3433610f04565b811115610b8257610b4433610f04565b816040517f59efbd20000000000000000000000000000000000000000000000000000000008152600401610b799291906127ed565b60405180910390fd5b6000610b8d826115b1565b90506000670de0b6b3a764000060085483610ba891906126c7565b610bb29190612750565b90506000670de0b6b3a764000060095484610bcd91906126c7565b610bd79190612750565b9050610be33385611cc6565b60003373ffffffffffffffffffffffffffffffffffffffff16828486610c099190612693565b610c139190612693565b604051610c1f9061258d565b60006040518083038185875af1925050503d8060008114610c5c576040519150601f19603f3d011682016040523d82523d6000602084013e610c61565b606091505b5050905080610cbf5733828486610c789190612693565b610c829190612693565b6040517f2c6a51e2000000000000000000000000000000000000000000000000000000008152600401610cb6929190612816565b60405180910390fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610d079061258d565b60006040518083038185875af1925050503d8060008114610d44576040519150601f19603f3d011682016040523d82523d6000602084013e610d49565b606091505b505090506000610d57610f60565b73ffffffffffffffffffffffffffffffffffffffff1684604051610d7a9061258d565b60006040518083038185875af1925050503d8060008114610db7576040519150601f19603f3d011682016040523d82523d6000602084013e610dbc565b606091505b50509050818015610dca5750805b610e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e009061288b565b60405180910390fd5b610e1161096c565b610e19610f60565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3e16d8cfffc726d59dd4696083a0c49bbb236e50396f01dbaff45a429e7bad128a600854600954604051610e7d939291906128ab565b60405180910390a450505050505050565b600060066001836002610ea191906126c7565b610eab919061263d565b600184610eb8919061263d565b84610ec391906126c7565b610ecd91906126c7565b610ed79190612750565b9050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f546118ea565b610f5e6000611e94565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610f999061242c565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc59061242c565b80156110125780601f10610fe757610100808354040283529160200191611012565b820191906000526020600020905b815481529060010190602001808311610ff557829003601f168201915b5050505050905090565b600b544210611060576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611057906127cd565b60405180910390fd5b600a548161106c61096c565b611076919061263d565b11156110b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ae9061292e565b60405180910390fd5b60006110c2826109a5565b90506000670de0b6b3a7640000600854836110dd91906126c7565b6110e79190612750565b90506000670de0b6b3a76400006009548461110291906126c7565b61110c9190612750565b9050600081838561111d919061263d565b611127919061263d565b9050803410156111705780346040517f7040b58c0000000000000000000000000000000000000000000000000000000081526004016111679291906127ed565b60405180910390fd5b61117a3386611f5a565b8034111561124a5760003373ffffffffffffffffffffffffffffffffffffffff1682346111a79190612693565b6040516111b39061258d565b60006040518083038185875af1925050503d80600081146111f0576040519150601f19603f3d011682016040523d82523d6000602084013e6111f5565b606091505b50509050806112485733823461120b9190612693565b6040517f2c6a51e200000000000000000000000000000000000000000000000000000000815260040161123f929190612816565b60405180910390fd5b505b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846040516112929061258d565b60006040518083038185875af1925050503d80600081146112cf576040519150601f19603f3d011682016040523d82523d6000602084013e6112d4565b606091505b5050905060006112e2610f60565b73ffffffffffffffffffffffffffffffffffffffff16846040516113059061258d565b60006040518083038185875af1925050503d8060008114611342576040519150601f19603f3d011682016040523d82523d6000602084013e611347565b606091505b505090508180156113555750805b611394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138b9061288b565b60405180910390fd5b61139c61096c565b6113a4610f60565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5860d9008a30f310a429551672216806f453f09e78d42235b44e85dc43a1df2a8a600854600954604051611408939291906128ab565b60405180910390a450505050505050565b600080611424611717565b9050600061143282866115fa565b905083811015611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146e906129c0565b60405180910390fd5b611484828686840361171f565b60019250505092915050565b600b5481565b6000806114a1611717565b90506114ae818585611a4e565b600191505092915050565b60006114c361096c565b8211156114d357600090506115a6565b60006114e56114e061096c565b610e8e565b90506000611504846114f561096c565b6114ff9190612693565b610e8e565b9050600081836115149190612693565b90506000670de0b6b3a76400006008548361152f91906126c7565b6115399190612750565b90506000670de0b6b3a76400006009548461155491906126c7565b61155e9190612750565b9050808261156c919061263d565b831015611581576000955050505050506115a6565b60008183856115909190612693565b61159a9190612693565b90508096505050505050505b919050565b60085481565b6000806115c46115bf61096c565b610e8e565b905060006115e3846115d461096c565b6115de9190612693565b610e8e565b905080826115f19190612693565b92505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6116896118ea565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f090612a52565b60405180910390fd5b61170281611e94565b50565b60095481565b6000600b544210905090565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561178f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178690612ae4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f690612b76565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118dd9190612294565b60405180910390a3505050565b6118f2611717565b73ffffffffffffffffffffffffffffffffffffffff16611910610f60565b73ffffffffffffffffffffffffffffffffffffffff1614611966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195d90612be2565b60405180910390fd5b565b600260065414156119ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a590612c4e565b60405180910390fd5b6002600681905550565b6001600681905550565b60006119ce84846115fa565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611a485781811015611a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3190612cba565b60405180910390fd5b611a47848484840361171f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab590612d4c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2590612dde565b60405180910390fd5b611b398383836120b1565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb690612e70565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cad9190612294565b60405180910390a3611cc08484846120b6565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2d90612f02565b60405180910390fd5b611d42826000836120b1565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbf90612f94565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e7b9190612294565b60405180910390a3611e8f836000846120b6565b505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc190613000565b60405180910390fd5b611fd6600083836120b1565b8060026000828254611fe8919061263d565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120999190612294565b60405180910390a36120ad600083836120b6565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120f55780820151818401526020810190506120da565b83811115612104576000848401525b50505050565b6000601f19601f8301169050919050565b6000612126826120bb565b61213081856120c6565b93506121408185602086016120d7565b6121498161210a565b840191505092915050565b6000602082019050818103600083015261216e818461211b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121a68261217b565b9050919050565b6121b68161219b565b81146121c157600080fd5b50565b6000813590506121d3816121ad565b92915050565b6000819050919050565b6121ec816121d9565b81146121f757600080fd5b50565b600081359050612209816121e3565b92915050565b6000806040838503121561222657612225612176565b5b6000612234858286016121c4565b9250506020612245858286016121fa565b9150509250929050565b60008115159050919050565b6122648161224f565b82525050565b600060208201905061227f600083018461225b565b92915050565b61228e816121d9565b82525050565b60006020820190506122a96000830184612285565b92915050565b6000806000606084860312156122c8576122c7612176565b5b60006122d6868287016121c4565b93505060206122e7868287016121c4565b92505060406122f8868287016121fa565b9150509250925092565b60006020828403121561231857612317612176565b5b6000612326848285016121fa565b91505092915050565b600060ff82169050919050565b6123458161232f565b82525050565b6000602082019050612360600083018461233c565b92915050565b61236f8161219b565b82525050565b600060208201905061238a6000830184612366565b92915050565b6000602082840312156123a6576123a5612176565b5b60006123b4848285016121c4565b91505092915050565b600080604083850312156123d4576123d3612176565b5b60006123e2858286016121c4565b92505060206123f3858286016121c4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061244457607f821691505b60208210811415612458576124576123fd565b5b50919050565b7f436f6e7472616374206973207374696c6c20696e20616374697665207068617360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006124ba6021836120c6565b91506124c58261245e565b604082019050919050565b600060208201905081810360008301526124e9816124ad565b9050919050565b7f4e6f2066756e647320617661696c61626c6520746f20647261696e0000000000600082015250565b6000612526601b836120c6565b9150612531826124f0565b602082019050919050565b6000602082019050818103600083015261255581612519565b9050919050565b600081905092915050565b50565b600061257760008361255c565b915061258282612567565b600082019050919050565b60006125988261256a565b9150819050919050565b7f4661696c656420746f207472616e736665722066756e64730000000000000000600082015250565b60006125d86018836120c6565b91506125e3826125a2565b602082019050919050565b60006020820190508181036000830152612607816125cb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612648826121d9565b9150612653836121d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126885761268761260e565b5b828201905092915050565b600061269e826121d9565b91506126a9836121d9565b9250828210156126bc576126bb61260e565b5b828203905092915050565b60006126d2826121d9565b91506126dd836121d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156127165761271561260e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061275b826121d9565b9150612766836121d9565b92508261277657612775612721565b5b828204905092915050565b7f4163746976652070686173652068617320656e64656400000000000000000000600082015250565b60006127b76016836120c6565b91506127c282612781565b602082019050919050565b600060208201905081810360008301526127e6816127aa565b9050919050565b60006040820190506128026000830185612285565b61280f6020830184612285565b9392505050565b600060408201905061282b6000830185612366565b6128386020830184612285565b9392505050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b60006128756014836120c6565b91506128808261283f565b602082019050919050565b600060208201905081810360008301526128a481612868565b9050919050565b60006060820190506128c06000830186612285565b6128cd6020830185612285565b6128da6040830184612285565b949350505050565b7f4d6178696d756d20737570706c79206578636565646564000000000000000000600082015250565b60006129186017836120c6565b9150612923826128e2565b602082019050919050565b600060208201905081810360008301526129478161290b565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006129aa6025836120c6565b91506129b58261294e565b604082019050919050565b600060208201905081810360008301526129d98161299d565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a3c6026836120c6565b9150612a47826129e0565b604082019050919050565b60006020820190508181036000830152612a6b81612a2f565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612ace6024836120c6565b9150612ad982612a72565b604082019050919050565b60006020820190508181036000830152612afd81612ac1565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b606022836120c6565b9150612b6b82612b04565b604082019050919050565b60006020820190508181036000830152612b8f81612b53565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612bcc6020836120c6565b9150612bd782612b96565b602082019050919050565b60006020820190508181036000830152612bfb81612bbf565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612c38601f836120c6565b9150612c4382612c02565b602082019050919050565b60006020820190508181036000830152612c6781612c2b565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612ca4601d836120c6565b9150612caf82612c6e565b602082019050919050565b60006020820190508181036000830152612cd381612c97565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612d366025836120c6565b9150612d4182612cda565b604082019050919050565b60006020820190508181036000830152612d6581612d29565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612dc86023836120c6565b9150612dd382612d6c565b604082019050919050565b60006020820190508181036000830152612df781612dbb565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612e5a6026836120c6565b9150612e6582612dfe565b604082019050919050565b60006020820190508181036000830152612e8981612e4d565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612eec6021836120c6565b9150612ef782612e90565b604082019050919050565b60006020820190508181036000830152612f1b81612edf565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f7e6022836120c6565b9150612f8982612f22565b604082019050919050565b60006020820190508181036000830152612fad81612f71565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612fea601f836120c6565b9150612ff582612fb4565b602082019050919050565b6000602082019050818103600083015261301981612fdd565b905091905056fea26469706673582212200e86f80208802d1af94e6c257493b71dcfaa07eddfd303dd36c9c47044e8bda664736f6c63430008080033a2646970667358221220f61078b512e5af7a42d8e3a83539cdef9d5f2cbcbb52c36151e8bfdd548489d664736f6c63430008080033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000c45760003560e01c8063a4983421116200007b578063a49834211462000191578063a68398cc14620001b1578063aa70b27e14620001e8578063d7f20549146200021e578063f2fde38b1462000240578063fbe53234146200026057620000c4565b80633f376c7014620000c95780634416178314620000ff578063715018a614620001215780637a31c185146200012d5780638c6186a3146200014d5780638da5cb5b146200016f575b600080fd5b620000e76004803603810190620000e1919062000ac4565b62000280565b604051620000f6919062000ba3565b60405180910390f35b6200010962000507565b60405162000118919062000bd1565b60405180910390f35b6200012b6200050d565b005b6200014b600480360381019062000145919062000bee565b62000525565b005b6200015762000572565b60405162000166919062000ba3565b60405180910390f35b6200017962000598565b60405162000188919062000ba3565b60405180910390f35b620001af6004803603810190620001a9919062000bee565b620005c1565b005b620001cf6004803603810190620001c9919062000c51565b6200060e565b604051620001df92919062000c83565b60405180910390f35b62000206600480360381019062000200919062000bee565b62000652565b60405162000215919062000ba3565b60405180910390f35b6200022862000692565b60405162000237919062000bd1565b60405180910390f35b6200025e600480360381019062000258919062000c51565b62000698565b005b6200027e600480360381019062000278919062000c51565b62000723565b005b600080824262000291919062000cdf565b90506000858583600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354600454604051620002cf9062000905565b620002e09695949392919062000dcf565b604051809103906000f080158015620002fd573d6000803e3d6000fd5b5090506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815250600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b81526004016200045c919062000ba3565b600060405180830381600087803b1580156200047757600080fd5b505af11580156200048c573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f36738150924a8382e966a659e46efe780fe559bce71123a1f4049e6583180aea888886604051620004f39392919062000e4a565b60405180910390a380925050509392505050565b60035481565b62000517620007b4565b62000523600062000839565b565b6200052f620007b4565b806004819055507f444c2ee6a42985e86e4d1c21435989ae523bae8ee02a11e8579bc4ac18b1d4ae8160405162000567919062000bd1565b60405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b620005cb620007b4565b806003819055507fa318485d4b7a387f0695a0179248931f1d023e08844d98b4e9e34775324bceb58160405162000603919062000bd1565b60405180910390a150565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600181815481106200066357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b620006a2620007b4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000715576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200070c9062000f0b565b60405180910390fd5b620007208162000839565b50565b6200072d620007b4565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f9ffcc7872e184f6db78bf00d137d6a7d52aa1546937286c01382063602bbcad660405160405180910390a250565b620007be620008fd565b73ffffffffffffffffffffffffffffffffffffffff16620007de62000598565b73ffffffffffffffffffffffffffffffffffffffff161462000837576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200082e9062000f7d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b61377b8062000fa083390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200097c8262000931565b810181811067ffffffffffffffff821117156200099e576200099d62000942565b5b80604052505050565b6000620009b362000913565b9050620009c1828262000971565b919050565b600067ffffffffffffffff821115620009e457620009e362000942565b5b620009ef8262000931565b9050602081019050919050565b82818337600083830152505050565b600062000a2262000a1c84620009c6565b620009a7565b90508281526020810184848401111562000a415762000a406200092c565b5b62000a4e848285620009fc565b509392505050565b600082601f83011262000a6e5762000a6d62000927565b5b813562000a8084826020860162000a0b565b91505092915050565b6000819050919050565b62000a9e8162000a89565b811462000aaa57600080fd5b50565b60008135905062000abe8162000a93565b92915050565b60008060006060848603121562000ae05762000adf6200091d565b5b600084013567ffffffffffffffff81111562000b015762000b0062000922565b5b62000b0f8682870162000a56565b935050602084013567ffffffffffffffff81111562000b335762000b3262000922565b5b62000b418682870162000a56565b925050604062000b548682870162000aad565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000b8b8262000b5e565b9050919050565b62000b9d8162000b7e565b82525050565b600060208201905062000bba600083018462000b92565b92915050565b62000bcb8162000a89565b82525050565b600060208201905062000be8600083018462000bc0565b92915050565b60006020828403121562000c075762000c066200091d565b5b600062000c178482850162000aad565b91505092915050565b62000c2b8162000b7e565b811462000c3757600080fd5b50565b60008135905062000c4b8162000c20565b92915050565b60006020828403121562000c6a5762000c696200091d565b5b600062000c7a8482850162000c3a565b91505092915050565b600060408201905062000c9a600083018562000b92565b62000ca9602083018462000bc0565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000cec8262000a89565b915062000cf98362000a89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000d315762000d3062000cb0565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000d7857808201518184015260208101905062000d5b565b8381111562000d88576000848401525b50505050565b600062000d9b8262000d3c565b62000da7818562000d47565b935062000db981856020860162000d58565b62000dc48162000931565b840191505092915050565b600060c082019050818103600083015262000deb818962000d8e565b9050818103602083015262000e01818862000d8e565b905062000e12604083018762000bc0565b62000e21606083018662000b92565b62000e30608083018562000bc0565b62000e3f60a083018462000bc0565b979650505050505050565b6000606082019050818103600083015262000e66818662000d8e565b9050818103602083015262000e7c818562000d8e565b905062000e8d604083018462000bc0565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000ef360268362000d47565b915062000f008262000e95565b604082019050919050565b6000602082019050818103600083015262000f268162000ee4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000f6560208362000d47565b915062000f728262000f2d565b602082019050919050565b6000602082019050818103600083015262000f988162000f56565b905091905056fe60806040526301312d00600a553480156200001957600080fd5b506040516200377b3803806200377b83398181016040528101906200003f91906200052d565b858581600390805190602001906200005992919062000240565b5080600490805190602001906200007292919062000240565b50505062000095620000896200017260201b60201c565b6200017a60201b60201c565b6001600681905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000107906200068e565b60405180910390fd5b83600b81905550816008819055508060098190555082600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505062000715565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200024e90620006df565b90600052602060002090601f016020900481019282620002725760008555620002be565b82601f106200028d57805160ff1916838001178555620002be565b82800160010185558215620002be579182015b82811115620002bd578251825591602001919060010190620002a0565b5b509050620002cd9190620002d1565b5090565b5b80821115620002ec576000816000905550600101620002d2565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000359826200030e565b810181811067ffffffffffffffff821117156200037b576200037a6200031f565b5b80604052505050565b600062000390620002f0565b90506200039e82826200034e565b919050565b600067ffffffffffffffff821115620003c157620003c06200031f565b5b620003cc826200030e565b9050602081019050919050565b60005b83811015620003f9578082015181840152602081019050620003dc565b8381111562000409576000848401525b50505050565b6000620004266200042084620003a3565b62000384565b90508281526020810184848401111562000445576200044462000309565b5b62000452848285620003d9565b509392505050565b600082601f83011262000472576200047162000304565b5b8151620004848482602086016200040f565b91505092915050565b6000819050919050565b620004a2816200048d565b8114620004ae57600080fd5b50565b600081519050620004c28162000497565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004f582620004c8565b9050919050565b6200050781620004e8565b81146200051357600080fd5b50565b6000815190506200052781620004fc565b92915050565b60008060008060008060c087890312156200054d576200054c620002fa565b5b600087015167ffffffffffffffff8111156200056e576200056d620002ff565b5b6200057c89828a016200045a565b965050602087015167ffffffffffffffff811115620005a0576200059f620002ff565b5b620005ae89828a016200045a565b9550506040620005c189828a01620004b1565b9450506060620005d489828a0162000516565b9350506080620005e789828a01620004b1565b92505060a0620005fa89828a01620004b1565b9150509295509295509295565b600082825260208201905092915050565b7f4665652064657374696e6174696f6e2063616e6e6f7420626520746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600062000676602a8362000607565b9150620006838262000618565b604082019050919050565b60006020820190508181036000830152620006a98162000667565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620006f857607f821691505b602082108114156200070f576200070e620006b0565b5b50919050565b61305680620007256000396000f3fe6080604052600436106101b75760003560e01c8063715018a6116100ec578063c5a1d5e21161008a578063dd62ed3e11610064578063dd62ed3e14610651578063f2fde38b1461068e578063f46d9324146106b7578063fba7cc79146106e2576101b7565b8063c5a1d5e2146105ac578063d6e6eb9f146105e9578063d7e8946614610614576101b7565b8063a0712d68116100c6578063a0712d68146104eb578063a457c2d714610507578063a85adeab14610544578063a9059cbb1461056f576101b7565b8063715018a61461047e5780638da5cb5b1461049557806395d89b41146104c0576101b7565b806332cb6b0c1161015957806342966c681161013357806342966c68146103b05780634768e885146103d95780634ce7957c1461041657806370a0823114610441576101b7565b806332cb6b0c1461030b57806338cb037a146103365780633950935114610373576101b7565b806318160ddd1161019557806318160ddd1461023b57806323b872dd1461026657806327de8f27146102a3578063313ce567146102e0576101b7565b806306fdde03146101bc578063095ea7b3146101e7578063147d073514610224575b600080fd5b3480156101c857600080fd5b506101d161070d565b6040516101de9190612154565b60405180910390f35b3480156101f357600080fd5b5061020e6004803603810190610209919061220f565b61079f565b60405161021b919061226a565b60405180910390f35b34801561023057600080fd5b506102396107c2565b005b34801561024757600080fd5b5061025061096c565b60405161025d9190612294565b60405180910390f35b34801561027257600080fd5b5061028d600480360381019061028891906122af565b610976565b60405161029a919061226a565b60405180910390f35b3480156102af57600080fd5b506102ca60048036038101906102c59190612302565b6109a5565b6040516102d79190612294565b60405180910390f35b3480156102ec57600080fd5b506102f56109ee565b604051610302919061234b565b60405180910390f35b34801561031757600080fd5b506103206109f3565b60405161032d9190612294565b60405180910390f35b34801561034257600080fd5b5061035d60048036038101906103589190612302565b6109f9565b60405161036a9190612294565b60405180910390f35b34801561037f57600080fd5b5061039a6004803603810190610395919061220f565b610ab0565b6040516103a7919061226a565b60405180910390f35b3480156103bc57600080fd5b506103d760048036038101906103d29190612302565b610ae7565b005b3480156103e557600080fd5b5061040060048036038101906103fb9190612302565b610e8e565b60405161040d9190612294565b60405180910390f35b34801561042257600080fd5b5061042b610ede565b6040516104389190612375565b60405180910390f35b34801561044d57600080fd5b5061046860048036038101906104639190612390565b610f04565b6040516104759190612294565b60405180910390f35b34801561048a57600080fd5b50610493610f4c565b005b3480156104a157600080fd5b506104aa610f60565b6040516104b79190612375565b60405180910390f35b3480156104cc57600080fd5b506104d5610f8a565b6040516104e29190612154565b60405180910390f35b61050560048036038101906105009190612302565b61101c565b005b34801561051357600080fd5b5061052e6004803603810190610529919061220f565b611419565b60405161053b919061226a565b60405180910390f35b34801561055057600080fd5b50610559611490565b6040516105669190612294565b60405180910390f35b34801561057b57600080fd5b506105966004803603810190610591919061220f565b611496565b6040516105a3919061226a565b60405180910390f35b3480156105b857600080fd5b506105d360048036038101906105ce9190612302565b6114b9565b6040516105e09190612294565b60405180910390f35b3480156105f557600080fd5b506105fe6115ab565b60405161060b9190612294565b60405180910390f35b34801561062057600080fd5b5061063b60048036038101906106369190612302565b6115b1565b6040516106489190612294565b60405180910390f35b34801561065d57600080fd5b50610678600480360381019061067391906123bd565b6115fa565b6040516106859190612294565b60405180910390f35b34801561069a57600080fd5b506106b560048036038101906106b09190612390565b611681565b005b3480156106c357600080fd5b506106cc611705565b6040516106d99190612294565b60405180910390f35b3480156106ee57600080fd5b506106f761170b565b604051610704919061226a565b60405180910390f35b60606003805461071c9061242c565b80601f01602080910402602001604051908101604052809291908181526020018280546107489061242c565b80156107955780601f1061076a57610100808354040283529160200191610795565b820191906000526020600020905b81548152906001019060200180831161077857829003601f168201915b5050505050905090565b6000806107aa611717565b90506107b781858561171f565b600191505092915050565b6107ca6118ea565b600b5442101561080f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610806906124d0565b60405180910390fd5b610817611968565b60004790506000811161085f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108569061253c565b60405180910390fd5b6000610869610f60565b73ffffffffffffffffffffffffffffffffffffffff168260405161088c9061258d565b60006040518083038185875af1925050503d80600081146108c9576040519150601f19603f3d011682016040523d82523d6000602084013e6108ce565b606091505b5050905080610912576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610909906125ee565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167ff36f4d6622e16a536bbb049064af779cdd483a0b388d347d3752a65f1058bf5b836040516109589190612294565b60405180910390a2505061096a6119b8565b565b6000600254905090565b600080610981611717565b905061098e8582856119c2565b610999858585611a4e565b60019150509392505050565b6000806109b86109b361096c565b610e8e565b905060006109d7846109c861096c565b6109d2919061263d565b610e8e565b905081816109e59190612693565b92505050919050565b600090565b600a5481565b600080610a0c610a0761096c565b610e8e565b90506000610a2b84610a1c61096c565b610a26919061263d565b610e8e565b905060008282610a3b9190612693565b90506000670de0b6b3a764000060085483610a5691906126c7565b610a609190612750565b90506000670de0b6b3a764000060095484610a7b91906126c7565b610a859190612750565b90506000818385610a96919061263d565b610aa0919061263d565b9050809650505050505050919050565b600080610abb611717565b9050610adc818585610acd85896115fa565b610ad7919061263d565b61171f565b600191505092915050565b600b544210610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b22906127cd565b60405180910390fd5b610b3433610f04565b811115610b8257610b4433610f04565b816040517f59efbd20000000000000000000000000000000000000000000000000000000008152600401610b799291906127ed565b60405180910390fd5b6000610b8d826115b1565b90506000670de0b6b3a764000060085483610ba891906126c7565b610bb29190612750565b90506000670de0b6b3a764000060095484610bcd91906126c7565b610bd79190612750565b9050610be33385611cc6565b60003373ffffffffffffffffffffffffffffffffffffffff16828486610c099190612693565b610c139190612693565b604051610c1f9061258d565b60006040518083038185875af1925050503d8060008114610c5c576040519150601f19603f3d011682016040523d82523d6000602084013e610c61565b606091505b5050905080610cbf5733828486610c789190612693565b610c829190612693565b6040517f2c6a51e2000000000000000000000000000000000000000000000000000000008152600401610cb6929190612816565b60405180910390fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610d079061258d565b60006040518083038185875af1925050503d8060008114610d44576040519150601f19603f3d011682016040523d82523d6000602084013e610d49565b606091505b505090506000610d57610f60565b73ffffffffffffffffffffffffffffffffffffffff1684604051610d7a9061258d565b60006040518083038185875af1925050503d8060008114610db7576040519150601f19603f3d011682016040523d82523d6000602084013e610dbc565b606091505b50509050818015610dca5750805b610e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e009061288b565b60405180910390fd5b610e1161096c565b610e19610f60565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3e16d8cfffc726d59dd4696083a0c49bbb236e50396f01dbaff45a429e7bad128a600854600954604051610e7d939291906128ab565b60405180910390a450505050505050565b600060066001836002610ea191906126c7565b610eab919061263d565b600184610eb8919061263d565b84610ec391906126c7565b610ecd91906126c7565b610ed79190612750565b9050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f546118ea565b610f5e6000611e94565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610f999061242c565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc59061242c565b80156110125780601f10610fe757610100808354040283529160200191611012565b820191906000526020600020905b815481529060010190602001808311610ff557829003601f168201915b5050505050905090565b600b544210611060576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611057906127cd565b60405180910390fd5b600a548161106c61096c565b611076919061263d565b11156110b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ae9061292e565b60405180910390fd5b60006110c2826109a5565b90506000670de0b6b3a7640000600854836110dd91906126c7565b6110e79190612750565b90506000670de0b6b3a76400006009548461110291906126c7565b61110c9190612750565b9050600081838561111d919061263d565b611127919061263d565b9050803410156111705780346040517f7040b58c0000000000000000000000000000000000000000000000000000000081526004016111679291906127ed565b60405180910390fd5b61117a3386611f5a565b8034111561124a5760003373ffffffffffffffffffffffffffffffffffffffff1682346111a79190612693565b6040516111b39061258d565b60006040518083038185875af1925050503d80600081146111f0576040519150601f19603f3d011682016040523d82523d6000602084013e6111f5565b606091505b50509050806112485733823461120b9190612693565b6040517f2c6a51e200000000000000000000000000000000000000000000000000000000815260040161123f929190612816565b60405180910390fd5b505b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846040516112929061258d565b60006040518083038185875af1925050503d80600081146112cf576040519150601f19603f3d011682016040523d82523d6000602084013e6112d4565b606091505b5050905060006112e2610f60565b73ffffffffffffffffffffffffffffffffffffffff16846040516113059061258d565b60006040518083038185875af1925050503d8060008114611342576040519150601f19603f3d011682016040523d82523d6000602084013e611347565b606091505b505090508180156113555750805b611394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138b9061288b565b60405180910390fd5b61139c61096c565b6113a4610f60565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5860d9008a30f310a429551672216806f453f09e78d42235b44e85dc43a1df2a8a600854600954604051611408939291906128ab565b60405180910390a450505050505050565b600080611424611717565b9050600061143282866115fa565b905083811015611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146e906129c0565b60405180910390fd5b611484828686840361171f565b60019250505092915050565b600b5481565b6000806114a1611717565b90506114ae818585611a4e565b600191505092915050565b60006114c361096c565b8211156114d357600090506115a6565b60006114e56114e061096c565b610e8e565b90506000611504846114f561096c565b6114ff9190612693565b610e8e565b9050600081836115149190612693565b90506000670de0b6b3a76400006008548361152f91906126c7565b6115399190612750565b90506000670de0b6b3a76400006009548461155491906126c7565b61155e9190612750565b9050808261156c919061263d565b831015611581576000955050505050506115a6565b60008183856115909190612693565b61159a9190612693565b90508096505050505050505b919050565b60085481565b6000806115c46115bf61096c565b610e8e565b905060006115e3846115d461096c565b6115de9190612693565b610e8e565b905080826115f19190612693565b92505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6116896118ea565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f090612a52565b60405180910390fd5b61170281611e94565b50565b60095481565b6000600b544210905090565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561178f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178690612ae4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f690612b76565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118dd9190612294565b60405180910390a3505050565b6118f2611717565b73ffffffffffffffffffffffffffffffffffffffff16611910610f60565b73ffffffffffffffffffffffffffffffffffffffff1614611966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195d90612be2565b60405180910390fd5b565b600260065414156119ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a590612c4e565b60405180910390fd5b6002600681905550565b6001600681905550565b60006119ce84846115fa565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611a485781811015611a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3190612cba565b60405180910390fd5b611a47848484840361171f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab590612d4c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2590612dde565b60405180910390fd5b611b398383836120b1565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb690612e70565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cad9190612294565b60405180910390a3611cc08484846120b6565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2d90612f02565b60405180910390fd5b611d42826000836120b1565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbf90612f94565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e7b9190612294565b60405180910390a3611e8f836000846120b6565b505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc190613000565b60405180910390fd5b611fd6600083836120b1565b8060026000828254611fe8919061263d565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120999190612294565b60405180910390a36120ad600083836120b6565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120f55780820151818401526020810190506120da565b83811115612104576000848401525b50505050565b6000601f19601f8301169050919050565b6000612126826120bb565b61213081856120c6565b93506121408185602086016120d7565b6121498161210a565b840191505092915050565b6000602082019050818103600083015261216e818461211b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121a68261217b565b9050919050565b6121b68161219b565b81146121c157600080fd5b50565b6000813590506121d3816121ad565b92915050565b6000819050919050565b6121ec816121d9565b81146121f757600080fd5b50565b600081359050612209816121e3565b92915050565b6000806040838503121561222657612225612176565b5b6000612234858286016121c4565b9250506020612245858286016121fa565b9150509250929050565b60008115159050919050565b6122648161224f565b82525050565b600060208201905061227f600083018461225b565b92915050565b61228e816121d9565b82525050565b60006020820190506122a96000830184612285565b92915050565b6000806000606084860312156122c8576122c7612176565b5b60006122d6868287016121c4565b93505060206122e7868287016121c4565b92505060406122f8868287016121fa565b9150509250925092565b60006020828403121561231857612317612176565b5b6000612326848285016121fa565b91505092915050565b600060ff82169050919050565b6123458161232f565b82525050565b6000602082019050612360600083018461233c565b92915050565b61236f8161219b565b82525050565b600060208201905061238a6000830184612366565b92915050565b6000602082840312156123a6576123a5612176565b5b60006123b4848285016121c4565b91505092915050565b600080604083850312156123d4576123d3612176565b5b60006123e2858286016121c4565b92505060206123f3858286016121c4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061244457607f821691505b60208210811415612458576124576123fd565b5b50919050565b7f436f6e7472616374206973207374696c6c20696e20616374697665207068617360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006124ba6021836120c6565b91506124c58261245e565b604082019050919050565b600060208201905081810360008301526124e9816124ad565b9050919050565b7f4e6f2066756e647320617661696c61626c6520746f20647261696e0000000000600082015250565b6000612526601b836120c6565b9150612531826124f0565b602082019050919050565b6000602082019050818103600083015261255581612519565b9050919050565b600081905092915050565b50565b600061257760008361255c565b915061258282612567565b600082019050919050565b60006125988261256a565b9150819050919050565b7f4661696c656420746f207472616e736665722066756e64730000000000000000600082015250565b60006125d86018836120c6565b91506125e3826125a2565b602082019050919050565b60006020820190508181036000830152612607816125cb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612648826121d9565b9150612653836121d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126885761268761260e565b5b828201905092915050565b600061269e826121d9565b91506126a9836121d9565b9250828210156126bc576126bb61260e565b5b828203905092915050565b60006126d2826121d9565b91506126dd836121d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156127165761271561260e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061275b826121d9565b9150612766836121d9565b92508261277657612775612721565b5b828204905092915050565b7f4163746976652070686173652068617320656e64656400000000000000000000600082015250565b60006127b76016836120c6565b91506127c282612781565b602082019050919050565b600060208201905081810360008301526127e6816127aa565b9050919050565b60006040820190506128026000830185612285565b61280f6020830184612285565b9392505050565b600060408201905061282b6000830185612366565b6128386020830184612285565b9392505050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b60006128756014836120c6565b91506128808261283f565b602082019050919050565b600060208201905081810360008301526128a481612868565b9050919050565b60006060820190506128c06000830186612285565b6128cd6020830185612285565b6128da6040830184612285565b949350505050565b7f4d6178696d756d20737570706c79206578636565646564000000000000000000600082015250565b60006129186017836120c6565b9150612923826128e2565b602082019050919050565b600060208201905081810360008301526129478161290b565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006129aa6025836120c6565b91506129b58261294e565b604082019050919050565b600060208201905081810360008301526129d98161299d565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a3c6026836120c6565b9150612a47826129e0565b604082019050919050565b60006020820190508181036000830152612a6b81612a2f565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612ace6024836120c6565b9150612ad982612a72565b604082019050919050565b60006020820190508181036000830152612afd81612ac1565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b606022836120c6565b9150612b6b82612b04565b604082019050919050565b60006020820190508181036000830152612b8f81612b53565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612bcc6020836120c6565b9150612bd782612b96565b602082019050919050565b60006020820190508181036000830152612bfb81612bbf565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612c38601f836120c6565b9150612c4382612c02565b602082019050919050565b60006020820190508181036000830152612c6781612c2b565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612ca4601d836120c6565b9150612caf82612c6e565b602082019050919050565b60006020820190508181036000830152612cd381612c97565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612d366025836120c6565b9150612d4182612cda565b604082019050919050565b60006020820190508181036000830152612d6581612d29565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612dc86023836120c6565b9150612dd382612d6c565b604082019050919050565b60006020820190508181036000830152612df781612dbb565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612e5a6026836120c6565b9150612e6582612dfe565b604082019050919050565b60006020820190508181036000830152612e8981612e4d565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612eec6021836120c6565b9150612ef782612e90565b604082019050919050565b60006020820190508181036000830152612f1b81612edf565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f7e6022836120c6565b9150612f8982612f22565b604082019050919050565b60006020820190508181036000830152612fad81612f71565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612fea601f836120c6565b9150612ff582612fb4565b602082019050919050565b6000602082019050818103600083015261301981612fdd565b905091905056fea26469706673582212200e86f80208802d1af94e6c257493b71dcfaa07eddfd303dd36c9c47044e8bda664736f6c63430008080033a2646970667358221220f61078b512e5af7a42d8e3a83539cdef9d5f2cbcbb52c36151e8bfdd548489d664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/EphemeralVibesTokenFactoryV1.sol:EphemeralVibesTokenFactoryV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/EphemeralVibesTokenFactoryV1.sol:EphemeralVibesTokenFactoryV1",
        "label": "deployedTokenAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 896,
        "contract": "contracts/EphemeralVibesTokenFactoryV1.sol:EphemeralVibesTokenFactoryV1",
        "label": "deployedTokenInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(TokenInfo)888_storage)"
      },
      {
        "astId": 898,
        "contract": "contracts/EphemeralVibesTokenFactoryV1.sol:EphemeralVibesTokenFactoryV1",
        "label": "defaultProtocolFeePercent",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 900,
        "contract": "contracts/EphemeralVibesTokenFactoryV1.sol:EphemeralVibesTokenFactoryV1",
        "label": "defaultStreamerFeePercent",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 902,
        "contract": "contracts/EphemeralVibesTokenFactoryV1.sol:EphemeralVibesTokenFactoryV1",
        "label": "defaultFeeDestination",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(TokenInfo)888_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EphemeralVibesTokenFactoryV1.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)888_storage"
      },
      "t_struct(TokenInfo)888_storage": {
        "encoding": "inplace",
        "label": "struct EphemeralVibesTokenFactoryV1.TokenInfo",
        "members": [
          {
            "astId": 885,
            "contract": "contracts/EphemeralVibesTokenFactoryV1.sol:EphemeralVibesTokenFactoryV1",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 887,
            "contract": "contracts/EphemeralVibesTokenFactoryV1.sol:EphemeralVibesTokenFactoryV1",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}