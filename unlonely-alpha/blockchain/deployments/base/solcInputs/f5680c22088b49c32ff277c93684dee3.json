{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/TempTokenFactoryV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./TempTokenV1.sol\"; // Make sure this import path matches where your token contract is located.\r\n\r\ncontract TempTokenFactoryV1 is Ownable {\r\n\r\n    // Here we have a struct to store information about each token that is deployed.\r\n    struct TokenInfo {\r\n        address tokenAddress;\r\n        address ownerAddress;\r\n        uint256 endTimestamp;\r\n    }\r\n\r\n    /**\r\n        * @dev numDeployedTokens is the number of deployed tokens.\r\n        * @dev deployedTokenIndices is a mapping of token addresses to their assigned index.\r\n        * @dev deployedTokens is a mapping of token indices to TokenInfo structs.\r\n     */\r\n    uint256 public numDeployedTokens;\r\n    mapping(address => uint256) public deployedTokenIndices;\r\n    mapping(uint256 => TokenInfo) public deployedTokens;\r\n\r\n    /**\r\n        * @dev defaultProtocolFeePercent is the default protocol fee percentage. ex: 2% = 2 * 10**16 = 20000000000000000.\r\n        * @dev defaultStreamerFeePercent is the default streamer fee percentage. ex: 2% = 2 * 10**16 = 20000000000000000.\r\n        * @dev defaultFeeDestination is the default fee destination address.\r\n        * @dev isPaused is a boolean to pause the factory and its token creation function.\r\n        * @dev duration is the default duration in seconds for the lifespan of a token.\r\n     */\r\n    uint256 public defaultProtocolFeePercent;\r\n    uint256 public defaultStreamerFeePercent;\r\n    address public defaultFeeDestination;\r\n    bool public isPaused;\r\n    uint256 public duration;\r\n\r\n    // Event to log the creation of a new TempToken.\r\n    event TempTokenCreated(address indexed tokenAddress, address indexed owner, string name, string symbol, uint256 endTimestamp);\r\n    event FeeDestinationSet(address indexed feeDestination);\r\n    event ProtocolFeePercentSet(uint256 feePercent);\r\n    event StreamerFeePercentSet(uint256 feePercent);\r\n    event PauseFactorySet(bool isPaused, uint256 numDeployedTokens);\r\n    event DurationSet(uint256 duration);\r\n\r\n    constructor(address _defaultFeeDestination, uint256 _defaultProtocolFeePercent, uint256 _defaultStreamerFeePercent) {\r\n        require(_defaultFeeDestination != address(0), \"Default fee destination cannot be the zero address\");\r\n\r\n        defaultProtocolFeePercent = _defaultProtocolFeePercent;\r\n        defaultStreamerFeePercent = _defaultStreamerFeePercent;\r\n        defaultFeeDestination = _defaultFeeDestination;\r\n        duration = 1 hours; // Sets the initial duration to 3600 seconds\r\n    }\r\n\r\n    // This function creates a new TempToken contract.\r\n    function createTempToken(\r\n        string memory name,\r\n        string memory symbol\r\n    ) public returns (address) {\r\n        require(!isPaused, \"Factory is paused\");\r\n        uint256 endTimestamp = block.timestamp + duration;\r\n        TempTokenV1 newToken = new TempTokenV1(name, symbol, endTimestamp, defaultFeeDestination, defaultProtocolFeePercent, defaultStreamerFeePercent, address(this));        \r\n        \r\n        /**\r\n            * @dev We increment the numDeployedTokens and use the new value as the index to store the TokenInfo struct in the deployedTokens mapping.\r\n            * @dev We also store the index of the token in the deployedTokenIndices mapping using the token's address as the key.\r\n         */\r\n        uint256 index = ++numDeployedTokens;\r\n        deployedTokens[index] = TokenInfo(address(newToken), msg.sender, endTimestamp);\r\n        deployedTokenIndices[address(newToken)] = index;\r\n\r\n        newToken.transferOwnership(msg.sender); // Transfer ownership of the new token to the caller of this function.\r\n        emit TempTokenCreated(address(newToken), msg.sender, name, symbol, endTimestamp);\r\n        return address(newToken);\r\n    }\r\n\r\n    function setFeeDestination(address _feeDestination) public onlyOwner {\r\n        defaultFeeDestination = _feeDestination;\r\n        emit FeeDestinationSet(_feeDestination);\r\n    }\r\n\r\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\r\n        defaultProtocolFeePercent = _feePercent;\r\n        emit ProtocolFeePercentSet(_feePercent);\r\n    }\r\n\r\n    function setStreamerFeePercent(uint256 _feePercent) public onlyOwner {\r\n        defaultStreamerFeePercent = _feePercent;\r\n        emit StreamerFeePercentSet(_feePercent);\r\n    }\r\n\r\n    function setPauseFactory(bool _isPaused) public onlyOwner {\r\n        isPaused = _isPaused;\r\n        emit PauseFactorySet(_isPaused, numDeployedTokens);\r\n    }\r\n\r\n    function setDuration(uint256 _duration) public onlyOwner {\r\n        duration = _duration;\r\n        emit DurationSet(_duration);\r\n    }\r\n\r\n    function getTokenInfo(address tokenAddress) public view returns (TokenInfo memory) {\r\n        uint256 index = deployedTokenIndices[tokenAddress];\r\n        return deployedTokens[index];\r\n    }\r\n}"
    },
    "contracts/TempTokenV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract TempTokenV1 is ERC20, Ownable, ReentrancyGuard {\r\n\r\n    address public factoryAddress;\r\n    address public protocolFeeDestination;\r\n    uint256 public protocolFeePercent;\r\n    uint256 public streamerFeePercent;\r\n    uint256 public endTimestamp;\r\n\r\n    event Mint(address indexed account, uint256 amount, address indexed streamerAddress, uint256 indexed totalSupply, uint256 protocolFeePercent, uint256 streamerFeePercent);\r\n    event Burn(address indexed account, uint256 amount, address indexed streamerAddress, uint256 indexed totalSupply, uint256 protocolFeePercent, uint256 streamerFeePercent);\r\n    event Drain(address indexed account, uint256 balance);\r\n\r\n    error InsufficientValue(uint256 minimumValue, uint256 value);\r\n    error BurnAmountTooHigh(uint256 maximumAmount, uint256 amount);\r\n    error EtherTransferFailed(address to, uint256 value);\r\n    error ActionNotAllowed();\r\n\r\n    modifier activePhase() {\r\n        require(block.timestamp < endTimestamp, \"Active phase has ended\");\r\n        _;\r\n    }\r\n\r\n    modifier endedPhase() {\r\n        require(block.timestamp >= endTimestamp, \"Contract is still in active phase\");\r\n        _;\r\n    }\r\n\r\n   constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 _endTimestamp,\r\n        address _protocolFeeDestination,\r\n        uint256 _protocolFeePercent,\r\n        uint256 _streamerFeePercent,\r\n        address _factoryAddress\r\n    ) ERC20(name, symbol) {\r\n        require(_protocolFeeDestination != address(0), \"Fee destination cannot be the zero address\");\r\n        \r\n        endTimestamp = _endTimestamp;\r\n        protocolFeePercent = _protocolFeePercent;\r\n        streamerFeePercent = _streamerFeePercent;\r\n        protocolFeeDestination = _protocolFeeDestination;\r\n        factoryAddress = _factoryAddress;\r\n    }\r\n\r\n    function mint(uint256 _amount) external payable activePhase {\r\n        uint256 cost = mintCost(_amount);\r\n        uint256 protocolFee = cost * protocolFeePercent / 1 ether;\r\n        uint256 subjectFee = cost * streamerFeePercent / 1 ether;\r\n        uint256 totalCost = cost + protocolFee + subjectFee;\r\n\r\n        if (msg.value < totalCost) {\r\n            revert InsufficientValue(totalCost, msg.value);\r\n        }\r\n\r\n        _mint(msg.sender, _amount);\r\n\r\n        if(msg.value > totalCost) {\r\n            (bool sent,) = msg.sender.call{value: msg.value - totalCost}(\"\");\r\n            if (!sent) {\r\n                revert EtherTransferFailed(msg.sender, msg.value - totalCost);\r\n            }\r\n        }\r\n\r\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\"\");\r\n        (bool success2, ) = owner().call{value: subjectFee}(\"\");\r\n        require(success1 && success2, \"Unable to send funds\");\r\n\r\n        emit Mint(msg.sender, _amount, owner(), totalSupply(), protocolFeePercent, streamerFeePercent);\r\n    }\r\n\r\n    function burn(uint256 _amount) external activePhase {\r\n        if (_amount > balanceOf(msg.sender)) {\r\n            revert BurnAmountTooHigh(balanceOf(msg.sender), _amount);\r\n        }\r\n\r\n        // Calculate refund before burn, to use the totalSupply before the burn\r\n        uint256 proceeds = burnProceeds(_amount);\r\n        uint256 protocolFee = proceeds * protocolFeePercent / 1 ether;\r\n        uint256 subjectFee = proceeds * streamerFeePercent / 1 ether;\r\n\r\n        _burn(msg.sender, _amount);\r\n\r\n        (bool sent,) = msg.sender.call{value: proceeds - protocolFee - subjectFee}(\"\");\r\n        if (!sent) {\r\n            revert EtherTransferFailed(msg.sender, proceeds - protocolFee - subjectFee);\r\n        }\r\n\r\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\"\");\r\n        (bool success2, ) = owner().call{value: subjectFee}(\"\");\r\n        require(success1 && success2, \"Unable to send funds\");\r\n\r\n        emit Burn(msg.sender, _amount, owner(), totalSupply(), protocolFeePercent, streamerFeePercent);\r\n    }\r\n\r\n    function drainFundsIntoMyWallet() external onlyOwner endedPhase nonReentrant {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No funds available to drain\");\r\n\r\n        (bool success, ) = owner().call{value: balance}(\"\");\r\n        require(success, \"Failed to transfer funds\");\r\n\r\n        emit Drain(msg.sender, balance);\r\n    }\r\n\r\n    function mintCost(uint256 _amount) public view returns (uint256) {\r\n        // The sum of the prices of all tokens already minted\r\n        uint256 sumPricesCurrentTotalSupply = sumOfPriceToNTokens(totalSupply());\r\n        // The sum of the prices of all the tokens already minted + the tokens to be newly minted\r\n        uint256 sumPricesNewTotalSupply = sumOfPriceToNTokens(totalSupply() + _amount);\r\n\r\n        return sumPricesNewTotalSupply - sumPricesCurrentTotalSupply;\r\n    }\r\n    \r\n    function mintCostAfterFees(uint256 _amount) public view returns (uint256) {\r\n        // The sum of the prices of all tokens already minted\r\n        uint256 sumPricesCurrentTotalSupply = sumOfPriceToNTokens(totalSupply());\r\n        // The sum of the prices of all the tokens already minted + the tokens to be newly minted\r\n        uint256 sumPricesNewTotalSupply = sumOfPriceToNTokens(totalSupply() + _amount);\r\n        uint256 sumDiff = sumPricesNewTotalSupply - sumPricesCurrentTotalSupply;\r\n\r\n        uint256 protocolFee = sumDiff * protocolFeePercent / 1 ether;\r\n        uint256 subjectFee = sumDiff * streamerFeePercent / 1 ether;\r\n        uint256 totalCost = sumDiff + protocolFee + subjectFee;\r\n\r\n        return totalCost;\r\n    }\r\n\r\n    function burnProceeds(uint256 _amount) public view returns (uint256) {\r\n        // The sum of the prices of all the tokens already minted\r\n        uint256 sumBeforeBurn = sumOfPriceToNTokens(totalSupply());\r\n        // The sum of the prices of all the tokens after burning _amount\r\n        uint256 sumAfterBurn = sumOfPriceToNTokens(totalSupply() - _amount);\r\n\r\n        return sumBeforeBurn - sumAfterBurn;\r\n    }\r\n\r\n    function burnProceedsAfterFees(uint256 _amount) public view returns (uint256) {\r\n        if (_amount > totalSupply()) {\r\n            // If the amount to burn exceeds total supply, return 0 or some error value\r\n            return 0;\r\n        }\r\n\r\n        uint256 sumBeforeBurn = sumOfPriceToNTokens(totalSupply());\r\n        uint256 sumAfterBurn = sumOfPriceToNTokens(totalSupply() - _amount);\r\n\r\n        uint256 sumDiff = sumBeforeBurn - sumAfterBurn;\r\n\r\n        uint256 protocolFee = sumDiff * protocolFeePercent / 1 ether;\r\n        uint256 subjectFee = sumDiff * streamerFeePercent / 1 ether;\r\n\r\n        // Check if sumDiff is less than the total fees\r\n        if (sumDiff < protocolFee + subjectFee) {\r\n            // Handle the scenario, such as returning 0 or a specific error value\r\n            return 0;\r\n        }\r\n\r\n        uint256 proceeds = sumDiff - protocolFee - subjectFee;\r\n        return proceeds;\r\n    }\r\n\r\n    function decimals() pure public override returns (uint8) {\r\n        return 0;\r\n    }\r\n\r\n    function getIsActive() public view returns (bool) {\r\n        return block.timestamp < endTimestamp;\r\n    }\r\n\r\n    // The price of *all* tokens from number 1 to n.\r\n    function sumOfPriceToNTokens(uint256 n_) pure public returns (uint256) {\r\n        return n_ * (n_ + 1) * (2 * n_ + 1) / 6;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}