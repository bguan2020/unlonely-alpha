{
  "address": "0x78d7a31BA97a8edfa038cddD27c2043427a5A607",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "eventByte",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "isBuy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "badgeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "subjectEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tournamentEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pooledEth",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct UnlonelyTournament.TradeInfo",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyVIPBadge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTournamentPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "generateKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "getHolderBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTournamentPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTournamentCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "selectTournamentWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellVIPBadge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "setFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setSubjectFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setTournamentCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setTournamentFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournament",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPayoutClaimable",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "winningBadge",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "vipPooledEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournamentFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vipBadgeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vipBadgeSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x475026ddb04382cf1c0b41570efb268051352737b1343a0bf60afd522cb06251",
  "receipt": {
    "to": null,
    "from": "0x141Edb16C70307Cf2F0f04aF2dDa75423a0E1bEa",
    "contractAddress": "0x78d7a31BA97a8edfa038cddD27c2043427a5A607",
    "transactionIndex": 3,
    "gasUsed": "3434706",
    "logsBloom": "0x
    "blockHash": "0x504bb8265bef677490e543bdac7a189b644f36f1861a6843f35d9b4b4cb7f13b",
    "transactionHash": "0x475026ddb04382cf1c0b41570efb268051352737b1343a0bf60afd522cb06251",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 6650760,
        "transactionHash": "0x475026ddb04382cf1c0b41570efb268051352737b1343a0bf60afd522cb06251",
        "address": "0x78d7a31BA97a8edfa038cddD27c2043427a5A607",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000141edb16c70307cf2f0f04af2dda75423a0e1bea"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x504bb8265bef677490e543bdac7a189b644f36f1861a6843f35d9b4b4cb7f13b"
      }
    ],
    "blockNumber": 6650760,
    "cumulativeGasUsed": "3643917",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "55859cb0cbc24a7dfc0e2d943d2877ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"eventByte\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"badgeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tournamentEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pooledEth\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct UnlonelyTournament.TradeInfo\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyVIPBadge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTournamentPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"generateKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getHolderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTournamentPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTournamentCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"selectTournamentWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellVIPBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTournamentCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setTournamentFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournament\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPayoutClaimable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"winningBadge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vipPooledEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipBadgeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vipBadgeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnlonelyTournament.sol\":\"UnlonelyTournament\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"contracts/UnlonelyTournament.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract UnlonelyTournament is Ownable, ReentrancyGuard {\\r\\n    // Tournament is a struct that holds the state of a tournament, eventByte key pointing to the winning VIPBadge as well as the vip pooled ETH. Only one tournament is allowed at a time. This is intentional.\\r\\n    \\r\\n    enum EventType {\\r\\n        YayNayVote,\\r\\n        VIPBadge\\r\\n    }\\r\\n\\r\\n    struct Tournament {\\r\\n        bool isActive;\\r\\n        bool isPayoutClaimable;\\r\\n        bytes32 winningBadge;\\r\\n        uint256 vipPooledEth;\\r\\n    }\\r\\n\\r\\n    struct TradeInfo {\\r\\n        address trader;\\r\\n        bytes32 eventByte;\\r\\n        bool isBuy;\\r\\n        uint256 badgeAmount;\\r\\n        uint256 ethAmount;\\r\\n        uint256 protocolEthAmount;\\r\\n        uint256 subjectEthAmount;\\r\\n        uint256 tournamentEthAmount;\\r\\n        uint256 supply;\\r\\n        uint256 pooledEth;\\r\\n    }\\r\\n\\r\\n    Tournament public tournament;\\r\\n\\r\\n    address public protocolFeeDestination;\\r\\n    uint256 public protocolFeePercent;\\r\\n    uint256 public subjectFeePercent;\\r\\n    uint256 public tournamentFeePercent;\\r\\n\\r\\n    event Trade(TradeInfo trade);\\r\\n    event Payout(address indexed voter, uint256 amount);\\r\\n\\r\\n    mapping(bytes32 => uint256) public vipBadgeSupply;\\r\\n    mapping(bytes32 => mapping(address => uint256)) public vipBadgeBalance;\\r\\n    mapping(address => bool) public isTournamentCreator;\\r\\n\\r\\n    modifier onlyTournamentCreator() {\\r\\n        require(isTournamentCreator[msg.sender], \\\"Caller is not a tournament creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validEventType(EventType eventType) {\\r\\n        require(\\r\\n            eventType == EventType.VIPBadge,\\r\\n            \\\"Invalid event type\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        // Set the contract deployer as the initial tournament creator\\r\\n        isTournamentCreator[msg.sender] = true;\\r\\n\\r\\n        protocolFeePercent = 5 * 10**16; // 5%\\r\\n        subjectFeePercent = 5 * 10**16;  // 5%\\r\\n        tournamentFeePercent = 5 * 10**16;  // 5%\\r\\n    }\\r\\n\\r\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\r\\n        protocolFeeDestination = _feeDestination;\\r\\n    }\\r\\n\\r\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        protocolFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        subjectFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setTournamentFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        tournamentFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setTournamentCreator(address creator, bool value) public onlyOwner {\\r\\n        isTournamentCreator[creator] = value;\\r\\n    }\\r\\n\\r\\n\\tfunction generateKey(address streamerAddress, uint256 eventId, EventType eventType) public pure validEventType(eventType) returns (bytes32) {\\r\\n        require(eventId < 1000000, \\\"ID must be less than 1 million\\\");\\r\\n        return keccak256(abi.encodePacked(streamerAddress, eventId, eventType));\\r\\n    }\\r\\n\\r\\n    function getTournamentPayout(address _address) public view returns (uint256){\\r\\n        if (!tournament.isPayoutClaimable) return 0;\\r\\n        uint256 totalPool = tournament.vipPooledEth;\\r\\n        uint256 totalWinningShares = vipBadgeSupply[tournament.winningBadge];\\r\\n        uint256 userPayout = totalWinningShares == 0 ? 0 : (totalPool * vipBadgeBalance[tournament.winningBadge][_address] / totalWinningShares);\\r\\n        return userPayout;\\r\\n    }\\r\\n\\r\\n    function getHolderBalance(address streamerAddress, uint256 eventId, EventType eventType, address holder) public view validEventType(eventType) returns (uint256 balance) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        return vipBadgeBalance[key][holder];\\r\\n    }\\r\\n\\r\\n    function getSupply(address streamerAddress, uint256 eventId, EventType eventType) public view validEventType(eventType) returns (uint256 supply) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        return vipBadgeSupply[key];\\r\\n    }\\r\\n\\r\\n    function getPrice(uint256 supply, uint256 amount) public pure returns (uint256) {\\r\\n        if (supply == 0 && amount == 0) return 0;\\r\\n\\r\\n        uint256 sum1 = supply == 0 ? 0 : (supply - 1) * supply * (2 * (supply - 1) + 1) / 6;\\r\\n        uint256 sum2 = (supply == 0 && amount == 1) ? 0 : (amount + supply - 1) * (supply + amount) * (2 * (amount + supply - 1) + 1) / 6;\\r\\n        uint256 summation = sum2 - sum1;\\r\\n        return summation * 1 ether / 32000;\\r\\n    }\\r\\n\\r\\n    function getBuyPrice(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256 price) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 supply = vipBadgeSupply[key];\\r\\n        return getPrice(supply, amount);\\r\\n    }\\r\\n\\r\\n    function getSellPrice(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256 price) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 supply = vipBadgeSupply[key];\\r\\n        if (supply < amount) return 0;\\r\\n        return getPrice(supply - amount, amount);\\r\\n    }\\r\\n\\r\\n    function getBuyPriceAfterFee(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256) {\\r\\n        uint256 price = getBuyPrice(streamerAddress, eventId, eventType, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? price * tournamentFeePercent / 1 ether : 0;\\r\\n        return price + protocolFee + subjectFee + tournamentFee;\\r\\n    }\\r\\n\\r\\n    function getSellPriceAfterFee(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256) {\\r\\n        uint256 price = getSellPrice(streamerAddress, eventId, eventType, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? price * tournamentFeePercent / 1 ether : 0;\\r\\n        return price - protocolFee - subjectFee - tournamentFee;\\r\\n    }\\r\\n\\r\\n    function startTournament() public onlyTournamentCreator {\\r\\n        require(!tournament.isActive, \\\"Tournament is already active.\\\");\\r\\n        require(!tournament.isPayoutClaimable, \\\"Winner payouts still allowed.\\\");\\r\\n        tournament = Tournament({\\r\\n            isActive: true,\\r\\n            isPayoutClaimable: false,\\r\\n            winningBadge: bytes32(0),\\r\\n            vipPooledEth: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function selectTournamentWinner(address streamerAddress, uint256 eventId, EventType eventType) public onlyTournamentCreator validEventType(eventType) {\\r\\n        require(tournament.isActive, \\\"Tournament is not active.\\\");\\r\\n        require(!tournament.isPayoutClaimable, \\\"Winner payouts already allowed.\\\");\\r\\n        bytes32 winningBadge = generateKey(streamerAddress, eventId, eventType);\\r\\n        tournament.winningBadge = winningBadge;\\r\\n        tournament.isPayoutClaimable = true;\\r\\n        tournament.isActive = false;\\r\\n    }\\r\\n    \\r\\n    function endTournament() public onlyTournamentCreator {\\r\\n        require(!tournament.isActive, \\\"Tournament still active.\\\");\\r\\n        require(tournament.isPayoutClaimable, \\\"Winner payouts already stopped.\\\");\\r\\n        tournament.isPayoutClaimable = false;\\r\\n        tournament.winningBadge = bytes32(0);\\r\\n    }\\r\\n\\r\\n    function buyVIPBadge(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public payable validEventType(eventType) {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        require(amount > 0, \\\"Cannot buy zero badges\\\");\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        require(key != tournament.winningBadge, \\\"Cannot buy winning badge during payout phase\\\");\\r\\n        uint256 price = getPrice(vipBadgeSupply[key], amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? (price * tournamentFeePercent / 1 ether) : 0;  // Assume tournamentFeePercent is defined\\r\\n        require(msg.value >= price + protocolFee + subjectFee + tournamentFee, \\\"Insufficient payment\\\");\\r\\n\\r\\n        // Update the contract state\\r\\n        vipBadgeSupply[key] += amount;\\r\\n        vipBadgeBalance[key][msg.sender] += amount;\\r\\n        tournament.vipPooledEth += tournamentFee;\\r\\n\\r\\n        TradeInfo memory tradeInfo = TradeInfo({\\r\\n            trader: msg.sender,\\r\\n            eventByte: key,\\r\\n            isBuy: true,\\r\\n            badgeAmount: amount,\\r\\n            ethAmount: price,\\r\\n            protocolEthAmount: protocolFee,\\r\\n            subjectEthAmount: subjectFee,\\r\\n            tournamentEthAmount: tournamentFee,\\r\\n            supply: vipBadgeSupply[key],\\r\\n            pooledEth: tournament.vipPooledEth\\r\\n        });\\r\\n\\r\\n        emit Trade(tradeInfo);\\r\\n\\r\\n        // Send protocol and subject fees\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n\\r\\n    function sellVIPBadge(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public validEventType(eventType) nonReentrant {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        require(amount > 0, \\\"Cannot buy zero badges\\\");\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        require(vipBadgeBalance[key][msg.sender] >= amount, \\\"Insufficient badges\\\");\\r\\n        uint256 price = getPrice(vipBadgeSupply[key] - amount, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? (price * tournamentFeePercent / 1 ether) : 0;  // Assume tournamentFeePercent is defined\\r\\n\\r\\n        // Update the contract state\\r\\n        vipBadgeSupply[key] -= amount;\\r\\n        vipBadgeBalance[key][msg.sender] -= amount;\\r\\n        tournament.vipPooledEth += tournamentFee;\\r\\n\\r\\n        TradeInfo memory tradeInfo = TradeInfo({\\r\\n            trader: msg.sender,\\r\\n            eventByte: key,\\r\\n            isBuy: false,\\r\\n            badgeAmount: amount,\\r\\n            ethAmount: price,\\r\\n            protocolEthAmount: protocolFee,\\r\\n            subjectEthAmount: subjectFee,\\r\\n            tournamentEthAmount: tournamentFee,\\r\\n            supply: vipBadgeSupply[key],\\r\\n            pooledEth: tournament.vipPooledEth\\r\\n        });\\r\\n\\r\\n        emit Trade(tradeInfo);\\r\\n\\r\\n        // Send protocol and subject fees\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        // Send the remaining amount to the seller\\r\\n        uint256 netAmount = price - protocolFee - subjectFee - tournamentFee;\\r\\n        (bool success3, ) = msg.sender.call{value: netAmount}(\\\"\\\");\\r\\n        require(success3, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n\\r\\n    function claimTournamentPayout() public nonReentrant {\\r\\n        require(tournament.isPayoutClaimable, \\\"Winner payout not allowed right now\\\");\\r\\n        require(vipBadgeBalance[tournament.winningBadge][msg.sender] > 0, \\\"No VIP badges to claim payout for.\\\");\\r\\n        uint256 totalPool = tournament.vipPooledEth;\\r\\n        uint256 totalWinningShares = vipBadgeSupply[tournament.winningBadge];\\r\\n        uint256 userPayout = totalWinningShares == 0 ? 0 : (totalPool * vipBadgeBalance[tournament.winningBadge][msg.sender] / totalWinningShares);\\r\\n        require(userPayout > 0, \\\"No payout for user\\\");\\r\\n\\r\\n        // Reset user's shares after distributing\\r\\n        vipBadgeSupply[tournament.winningBadge] -= vipBadgeBalance[tournament.winningBadge][msg.sender];\\r\\n        vipBadgeBalance[tournament.winningBadge][msg.sender] = 0;\\r\\n\\r\\n        // Deduct the user's payout from the sharesSubject's pool\\r\\n        tournament.vipPooledEth -= userPayout;\\r\\n\\r\\n        emit Payout(msg.sender, userPayout);\\r\\n        (bool success, ) = msg.sender.call{value: userPayout}(\\\"\\\");\\r\\n        require(success, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa09115493d817248550a713ab56f8d88011efaf9a405e0cb07f8fc174b2c4a07\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200003262000026620000c160201b60201c565b620000c960201b60201c565b600180819055506001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555066b1a2bc2ec5000060068190555066b1a2bc2ec5000060078190555066b1a2bc2ec500006008819055506200018d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613af5806200019d6000396000f3fe6080604052600436106101d85760003560e01c806372641ecd11610102578063c94892f011610095578063effb67e611610064578063effb67e6146106c6578063f2fde38b146106ef578063fbe5323414610718578063fcebcf5e14610741576101d8565b8063c94892f0146105e4578063d6e6eb9f14610621578063d87986fe1461064c578063e8b9af5114610689576101d8565b8063a4983421116100d1578063a49834211461053e578063ac210a5d14610567578063bb47380a14610590578063bf559d11146105cd576101d8565b806372641ecd14610482578063775c1e5d146104bf5780637788c25f146104fc5780638da5cb5b14610513576101d8565b806348c2dde81161017a5780635a8a764e116101495780635a8a764e146103dc5780635ad92eea146104055780635cf4ee911461042e578063715018a61461046b576101d8565b806348c2dde8146103345780634ce7957c1461035d5780634d633a8f146103885780635564285d1461039f576101d8565b806324dc441d116101b657806324dc441d146102855780633aecedd2146102b0578063451aea50146102ed578063483ccffe14610309576101d8565b80630d734519146101dd57806317798d011461021a5780631e0197e214610257575b600080fd5b3480156101e957600080fd5b5061020460048036038101906101ff919061290a565b61077e565b6040516102119190612976565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c9190612991565b610861565b60405161024e9190612a07565b60405180910390f35b34801561026357600080fd5b5061026c610908565b60405161027c9493929190612a3d565b60405180910390f35b34801561029157600080fd5b5061029a610940565b6040516102a79190612a07565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d29190612991565b610946565b6040516102e49190612a07565b60405180910390f35b61030760048036038101906103029190612991565b610a7e565b005b34801561031557600080fd5b5061031e610fd3565b60405161032b9190612a07565b60405180910390f35b34801561034057600080fd5b5061035b60048036038101906103569190612991565b610fd9565b005b34801561036957600080fd5b50610372611604565b60405161037f9190612a91565b60405180910390f35b34801561039457600080fd5b5061039d61162a565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190612aac565b611788565b6040516103d39190612a07565b60405180910390f35b3480156103e857600080fd5b5061040360048036038101906103fe9190612b13565b61185d565b005b34801561041157600080fd5b5061042c6004803603810190610427919061290a565b61186f565b005b34801561043a57600080fd5b5061045560048036038101906104509190612b40565b611a63565b6040516104629190612a07565b60405180910390f35b34801561047757600080fd5b50610480611bb6565b005b34801561048e57600080fd5b506104a960048036038101906104a49190612b80565b611bca565b6040516104b69190612a07565b60405180910390f35b3480156104cb57600080fd5b506104e660048036038101906104e1919061290a565b611c9d565b6040516104f39190612a07565b60405180910390f35b34801561050857600080fd5b50610511611d34565b005b34801561051f57600080fd5b50610528612110565b6040516105359190612a91565b60405180910390f35b34801561054a57600080fd5b5061056560048036038101906105609190612b13565b612139565b005b34801561057357600080fd5b5061058e60048036038101906105899190612bd9565b61214b565b005b34801561059c57600080fd5b506105b760048036038101906105b29190612991565b6121ae565b6040516105c49190612a07565b60405180910390f35b3480156105d957600080fd5b506105e2612274565b005b3480156105f057600080fd5b5061060b60048036038101906106069190612b80565b61242c565b6040516106189190612c19565b60405180910390f35b34801561062d57600080fd5b5061063661244c565b6040516106439190612a07565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e9190612c60565b612452565b6040516106809190612a07565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab9190612991565b61246a565b6040516106bd9190612a07565b60405180910390f35b3480156106d257600080fd5b506106ed60048036038101906106e89190612b13565b6125a2565b005b3480156106fb57600080fd5b5061071660048036038101906107119190612b80565b6125b4565b005b34801561072457600080fd5b5061073f600480360381019061073a9190612b80565b612638565b005b34801561074d57600080fd5b5061076860048036038101906107639190612c8d565b612684565b6040516107759190612a07565b60405180910390f35b60008160018081111561079457610793612ccd565b5b8160018111156107a7576107a6612ccd565b5b146107e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107de90612d59565b60405180910390fd5b620f4240841061082c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082390612dc5565b60405180910390fd5b84848460405160200161084193929190612ebd565b604051602081830303815290604052805190602001209150509392505050565b60008260018081111561087757610876612ccd565b5b81600181111561088a57610889612ccd565b5b146108ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c190612d59565b60405180910390fd5b60006108d787878761077e565b90506000600960008381526020019081526020016000205490506108fb8186611a63565b9350505050949350505050565b60028060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154908060020154905084565b60075481565b60008260018081111561095c5761095b612ccd565b5b81600181111561096f5761096e612ccd565b5b146109af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a690612d59565b60405180910390fd5b60006109bd878787876121ae565b90506000670de0b6b3a7640000600654836109d89190612f29565b6109e29190612fb2565b90506000670de0b6b3a7640000600754846109fd9190612f29565b610a079190612fb2565b90506000600260000160009054906101000a900460ff16610a29576000610a4b565b670de0b6b3a764000060085485610a409190612f29565b610a4a9190612fb2565b5b905080828486610a5b9190612fe3565b610a659190612fe3565b610a6f9190612fe3565b95505050505050949350505050565b81600180811115610a9257610a91612ccd565b5b816001811115610aa557610aa4612ccd565b5b14610ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adc90612d59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e90613089565b60405180910390fd5b60008211610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb1906130f5565b60405180910390fd5b6000610bc786868661077e565b9050600260010154811415610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0890613187565b60405180910390fd5b6000610c30600960008481526020019081526020016000205485611a63565b90506000670de0b6b3a764000060065483610c4b9190612f29565b610c559190612fb2565b90506000670de0b6b3a764000060075484610c709190612f29565b610c7a9190612fb2565b90506000600260000160009054906101000a900460ff16610c9c576000610cbe565b670de0b6b3a764000060085485610cb39190612f29565b610cbd9190612fb2565b5b905080828486610cce91906131a7565b610cd891906131a7565b610ce291906131a7565b341015610d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1b90613249565b60405180910390fd5b86600960008781526020019081526020016000206000828254610d4791906131a7565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dae91906131a7565b9250508190555080600280016000828254610dc991906131a7565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160011515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf81604051610e799190613371565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1685604051610ec9906133be565b60006040518083038185875af1925050503d8060008114610f06576040519150601f19603f3d011682016040523d82523d6000602084013e610f0b565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff1685604051610f35906133be565b60006040518083038185875af1925050503d8060008114610f72576040519150601f19603f3d011682016040523d82523d6000602084013e610f77565b606091505b50509050818015610f855750805b610fc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbb9061341f565b60405180910390fd5b50505050505050505050505050565b60085481565b81600180811115610fed57610fec612ccd565b5b81600181111561100057610fff612ccd565b5b14611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103790612d59565b60405180910390fd5b6110486126a9565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d190613089565b60405180910390fd5b6000821161111d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611114906130f5565b60405180910390fd5b600061112a86868661077e565b905082600a600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b69061348b565b60405180910390fd5b60006111e98460096000858152602001908152602001600020546111e39190612fe3565b85611a63565b90506000670de0b6b3a7640000600654836112049190612f29565b61120e9190612fb2565b90506000670de0b6b3a7640000600754846112299190612f29565b6112339190612fb2565b90506000600260000160009054906101000a900460ff16611255576000611277565b670de0b6b3a76400006008548561126c9190612f29565b6112769190612fb2565b5b90508660096000878152602001908152602001600020600082825461129c9190612fe3565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113039190612fe3565b925050819055508060028001600082825461131e91906131a7565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160001515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf816040516113ce9190613371565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168560405161141e906133be565b60006040518083038185875af1925050503d806000811461145b576040519150601f19603f3d011682016040523d82523d6000602084013e611460565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff168560405161148a906133be565b60006040518083038185875af1925050503d80600081146114c7576040519150601f19603f3d011682016040523d82523d6000602084013e6114cc565b606091505b505090508180156114da5750805b611519576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115109061341f565b60405180910390fd5b60008486888a6115299190612fe3565b6115339190612fe3565b61153d9190612fe3565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051611565906133be565b60006040518083038185875af1925050503d80600081146115a2576040519150601f19603f3d011682016040523d82523d6000602084013e6115a7565b606091505b50509050806115eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e29061341f565b60405180910390fd5b505050505050505050506115fd6126f9565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166116b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ad9061351d565b60405180910390fd5b600260000160009054906101000a900460ff1615611709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170090613589565b60405180910390fd5b600260000160019054906101000a900460ff1661175b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611752906135f5565b60405180910390fd5b6000600260000160016101000a81548160ff0219169083151502179055506000801b600260010181905550565b60008260018081111561179e5761179d612ccd565b5b8160018111156117b1576117b0612ccd565b5b146117f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e890612d59565b60405180910390fd5b60006117fe87878761077e565b9050600a600082815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505050949350505050565b611865612702565b8060078190555050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f29061351d565b60405180910390fd5b8060018081111561190f5761190e612ccd565b5b81600181111561192257611921612ccd565b5b14611962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195990612d59565b60405180910390fd5b600260000160009054906101000a900460ff166119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ab90613661565b60405180910390fd5b600260000160019054906101000a900460ff1615611a07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fe906136cd565b60405180910390fd5b6000611a1485858561077e565b9050806002600101819055506001600260000160016101000a81548160ff0219169083151502179055506000600260000160006101000a81548160ff0219169083151502179055505050505050565b60008083148015611a745750600082145b15611a825760009050611bb0565b6000808414611ae257600660018086611a9b9190612fe3565b6002611aa79190612f29565b611ab191906131a7565b85600187611abf9190612fe3565b611ac99190612f29565b611ad39190612f29565b611add9190612fb2565b611ae5565b60005b905060008085148015611af85750600184145b611b745760066001808787611b0d91906131a7565b611b179190612fe3565b6002611b239190612f29565b611b2d91906131a7565b8587611b3991906131a7565b60018888611b4791906131a7565b611b519190612fe3565b611b5b9190612f29565b611b659190612f29565b611b6f9190612fb2565b611b77565b60005b905060008282611b879190612fe3565b9050617d00670de0b6b3a764000082611ba09190612f29565b611baa9190612fb2565b93505050505b92915050565b611bbe612702565b611bc86000612780565b565b6000600260000160019054906101000a900460ff16611bec5760009050611c98565b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611c8c5781600a6000600260010154815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611c7d9190612f29565b611c879190612fb2565b611c8f565b60005b90508093505050505b919050565b600081600180811115611cb357611cb2612ccd565b5b816001811115611cc657611cc5612ccd565b5b14611d06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfd90612d59565b60405180910390fd5b6000611d1386868661077e565b90506009600082815260200190815260200160002054925050509392505050565b611d3c6126a9565b600260000160019054906101000a900460ff16611d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d859061375f565b60405180910390fd5b6000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d906137f1565b60405180910390fd5b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611ec65781600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611eb79190612f29565b611ec19190612fb2565b611ec9565b60005b905060008111611f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f059061385d565b60405180910390fd5b600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546009600060026001015481526020019081526020016000206000828254611f8b9190612fe3565b925050819055506000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806002800160008282546120019190612fe3565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a68260405161204e9190612a07565b60405180910390a260003373ffffffffffffffffffffffffffffffffffffffff168260405161207c906133be565b60006040518083038185875af1925050503d80600081146120b9576040519150601f19603f3d011682016040523d82523d6000602084013e6120be565b606091505b5050905080612102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f99061341f565b60405180910390fd5b5050505061210e6126f9565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612141612702565b8060068190555050565b612153612702565b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000826001808111156121c4576121c3612ccd565b5b8160018111156121d7576121d6612ccd565b5b14612217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220e90612d59565b60405180910390fd5b600061222487878761077e565b9050600060096000838152602001908152602001600020549050848110156122515760009350505061226b565b61226685826122609190612fe3565b86611a63565b935050505b50949350505050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f79061351d565b60405180910390fd5b600260000160009054906101000a900460ff1615612353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234a906138c9565b60405180910390fd5b600260000160019054906101000a900460ff16156123a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239d90613935565b60405180910390fd5b60405180608001604052806001151581526020016000151581526020016000801b81526020016000815250600260008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001015560608201518160020155905050565b600b6020528060005260406000206000915054906101000a900460ff1681565b60065481565b60096020528060005260406000206000915090505481565b6000826001808111156124805761247f612ccd565b5b81600181111561249357612492612ccd565b5b146124d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ca90612d59565b60405180910390fd5b60006124e187878787610861565b90506000670de0b6b3a7640000600654836124fc9190612f29565b6125069190612fb2565b90506000670de0b6b3a7640000600754846125219190612f29565b61252b9190612fb2565b90506000600260000160009054906101000a900460ff1661254d57600061256f565b670de0b6b3a7640000600854856125649190612f29565b61256e9190612fb2565b5b90508082848661257f91906131a7565b61258991906131a7565b61259391906131a7565b95505050505050949350505050565b6125aa612702565b8060088190555050565b6125bc612702565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561262c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612623906139c7565b60405180910390fd5b61263581612780565b50565b612640612702565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a602052816000526040600020602052806000526040600020600091509150505481565b600260015414156126ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e690613a33565b60405180910390fd5b6002600181905550565b60018081905550565b61270a612844565b73ffffffffffffffffffffffffffffffffffffffff16612728612110565b73ffffffffffffffffffffffffffffffffffffffff161461277e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277590613a9f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061287c82612851565b9050919050565b61288c81612871565b811461289757600080fd5b50565b6000813590506128a981612883565b92915050565b6000819050919050565b6128c2816128af565b81146128cd57600080fd5b50565b6000813590506128df816128b9565b92915050565b600281106128f257600080fd5b50565b600081359050612904816128e5565b92915050565b6000806000606084860312156129235761292261284c565b5b60006129318682870161289a565b9350506020612942868287016128d0565b9250506040612953868287016128f5565b9150509250925092565b6000819050919050565b6129708161295d565b82525050565b600060208201905061298b6000830184612967565b92915050565b600080600080608085870312156129ab576129aa61284c565b5b60006129b98782880161289a565b94505060206129ca878288016128d0565b93505060406129db878288016128f5565b92505060606129ec878288016128d0565b91505092959194509250565b612a01816128af565b82525050565b6000602082019050612a1c60008301846129f8565b92915050565b60008115159050919050565b612a3781612a22565b82525050565b6000608082019050612a526000830187612a2e565b612a5f6020830186612a2e565b612a6c6040830185612967565b612a7960608301846129f8565b95945050505050565b612a8b81612871565b82525050565b6000602082019050612aa66000830184612a82565b92915050565b60008060008060808587031215612ac657612ac561284c565b5b6000612ad48782880161289a565b9450506020612ae5878288016128d0565b9350506040612af6878288016128f5565b9250506060612b078782880161289a565b91505092959194509250565b600060208284031215612b2957612b2861284c565b5b6000612b37848285016128d0565b91505092915050565b60008060408385031215612b5757612b5661284c565b5b6000612b65858286016128d0565b9250506020612b76858286016128d0565b9150509250929050565b600060208284031215612b9657612b9561284c565b5b6000612ba48482850161289a565b91505092915050565b612bb681612a22565b8114612bc157600080fd5b50565b600081359050612bd381612bad565b92915050565b60008060408385031215612bf057612bef61284c565b5b6000612bfe8582860161289a565b9250506020612c0f85828601612bc4565b9150509250929050565b6000602082019050612c2e6000830184612a2e565b92915050565b612c3d8161295d565b8114612c4857600080fd5b50565b600081359050612c5a81612c34565b92915050565b600060208284031215612c7657612c7561284c565b5b6000612c8484828501612c4b565b91505092915050565b60008060408385031215612ca457612ca361284c565b5b6000612cb285828601612c4b565b9250506020612cc38582860161289a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f496e76616c6964206576656e7420747970650000000000000000000000000000600082015250565b6000612d43601283612cfc565b9150612d4e82612d0d565b602082019050919050565b60006020820190508181036000830152612d7281612d36565b9050919050565b7f4944206d757374206265206c657373207468616e2031206d696c6c696f6e0000600082015250565b6000612daf601e83612cfc565b9150612dba82612d79565b602082019050919050565b60006020820190508181036000830152612dde81612da2565b9050919050565b60008160601b9050919050565b6000612dfd82612de5565b9050919050565b6000612e0f82612df2565b9050919050565b612e27612e2282612871565b612e04565b82525050565b6000819050919050565b612e48612e43826128af565b612e2d565b82525050565b60028110612e5f57612e5e612ccd565b5b50565b6000819050612e7082612e4e565b919050565b6000612e8082612e62565b9050919050565b60008160f81b9050919050565b6000612e9f82612e87565b9050919050565b612eb7612eb282612e75565b612e94565b82525050565b6000612ec98286612e16565b601482019150612ed98285612e37565b602082019150612ee98284612ea6565b600182019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f34826128af565b9150612f3f836128af565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612f7857612f77612efa565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612fbd826128af565b9150612fc8836128af565b925082612fd857612fd7612f83565b5b828204905092915050565b6000612fee826128af565b9150612ff9836128af565b92508282101561300c5761300b612efa565b5b828203905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613073602a83612cfc565b915061307e82613017565b604082019050919050565b600060208201905081810360008301526130a281613066565b9050919050565b7f43616e6e6f7420627579207a65726f2062616467657300000000000000000000600082015250565b60006130df601683612cfc565b91506130ea826130a9565b602082019050919050565b6000602082019050818103600083015261310e816130d2565b9050919050565b7f43616e6e6f74206275792077696e6e696e6720626164676520647572696e672060008201527f7061796f75742070686173650000000000000000000000000000000000000000602082015250565b6000613171602c83612cfc565b915061317c82613115565b604082019050919050565b600060208201905081810360008301526131a081613164565b9050919050565b60006131b2826128af565b91506131bd836128af565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131f2576131f1612efa565b5b828201905092915050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b6000613233601483612cfc565b915061323e826131fd565b602082019050919050565b6000602082019050818103600083015261326281613226565b9050919050565b61327281612871565b82525050565b6132818161295d565b82525050565b61329081612a22565b82525050565b61329f816128af565b82525050565b610140820160008201516132bc6000850182613269565b5060208201516132cf6020850182613278565b5060408201516132e26040850182613287565b5060608201516132f56060850182613296565b5060808201516133086080850182613296565b5060a082015161331b60a0850182613296565b5060c082015161332e60c0850182613296565b5060e082015161334160e0850182613296565b50610100820151613356610100850182613296565b5061012082015161336b610120850182613296565b50505050565b60006101408201905061338760008301846132a5565b92915050565b600081905092915050565b50565b60006133a860008361338d565b91506133b382613398565b600082019050919050565b60006133c98261339b565b9150819050919050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b6000613409601483612cfc565b9150613414826133d3565b602082019050919050565b60006020820190508181036000830152613438816133fc565b9050919050565b7f496e73756666696369656e742062616467657300000000000000000000000000600082015250565b6000613475601383612cfc565b91506134808261343f565b602082019050919050565b600060208201905081810360008301526134a481613468565b9050919050565b7f43616c6c6572206973206e6f74206120746f75726e616d656e7420637265617460008201527f6f72000000000000000000000000000000000000000000000000000000000000602082015250565b6000613507602283612cfc565b9150613512826134ab565b604082019050919050565b60006020820190508181036000830152613536816134fa565b9050919050565b7f546f75726e616d656e74207374696c6c206163746976652e0000000000000000600082015250565b6000613573601883612cfc565b915061357e8261353d565b602082019050919050565b600060208201905081810360008301526135a281613566565b9050919050565b7f57696e6e6572207061796f75747320616c72656164792073746f707065642e00600082015250565b60006135df601f83612cfc565b91506135ea826135a9565b602082019050919050565b6000602082019050818103600083015261360e816135d2565b9050919050565b7f546f75726e616d656e74206973206e6f74206163746976652e00000000000000600082015250565b600061364b601983612cfc565b915061365682613615565b602082019050919050565b6000602082019050818103600083015261367a8161363e565b9050919050565b7f57696e6e6572207061796f75747320616c726561647920616c6c6f7765642e00600082015250565b60006136b7601f83612cfc565b91506136c282613681565b602082019050919050565b600060208201905081810360008301526136e6816136aa565b9050919050565b7f57696e6e6572207061796f7574206e6f7420616c6c6f7765642072696768742060008201527f6e6f770000000000000000000000000000000000000000000000000000000000602082015250565b6000613749602383612cfc565b9150613754826136ed565b604082019050919050565b600060208201905081810360008301526137788161373c565b9050919050565b7f4e6f205649502062616467657320746f20636c61696d207061796f757420666f60008201527f722e000000000000000000000000000000000000000000000000000000000000602082015250565b60006137db602283612cfc565b91506137e68261377f565b604082019050919050565b6000602082019050818103600083015261380a816137ce565b9050919050565b7f4e6f207061796f757420666f7220757365720000000000000000000000000000600082015250565b6000613847601283612cfc565b915061385282613811565b602082019050919050565b600060208201905081810360008301526138768161383a565b9050919050565b7f546f75726e616d656e7420697320616c7265616479206163746976652e000000600082015250565b60006138b3601d83612cfc565b91506138be8261387d565b602082019050919050565b600060208201905081810360008301526138e2816138a6565b9050919050565b7f57696e6e6572207061796f757473207374696c6c20616c6c6f7765642e000000600082015250565b600061391f601d83612cfc565b915061392a826138e9565b602082019050919050565b6000602082019050818103600083015261394e81613912565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006139b1602683612cfc565b91506139bc82613955565b604082019050919050565b600060208201905081810360008301526139e0816139a4565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613a1d601f83612cfc565b9150613a28826139e7565b602082019050919050565b60006020820190508181036000830152613a4c81613a10565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613a89602083612cfc565b9150613a9482613a53565b602082019050919050565b60006020820190508181036000830152613ab881613a7c565b905091905056fea2646970667358221220f6fc33fae81179e623db1f1750a9fbb8dc7e2a18f64b481b6ad588ff3e8f797764736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c806372641ecd11610102578063c94892f011610095578063effb67e611610064578063effb67e6146106c6578063f2fde38b146106ef578063fbe5323414610718578063fcebcf5e14610741576101d8565b8063c94892f0146105e4578063d6e6eb9f14610621578063d87986fe1461064c578063e8b9af5114610689576101d8565b8063a4983421116100d1578063a49834211461053e578063ac210a5d14610567578063bb47380a14610590578063bf559d11146105cd576101d8565b806372641ecd14610482578063775c1e5d146104bf5780637788c25f146104fc5780638da5cb5b14610513576101d8565b806348c2dde81161017a5780635a8a764e116101495780635a8a764e146103dc5780635ad92eea146104055780635cf4ee911461042e578063715018a61461046b576101d8565b806348c2dde8146103345780634ce7957c1461035d5780634d633a8f146103885780635564285d1461039f576101d8565b806324dc441d116101b657806324dc441d146102855780633aecedd2146102b0578063451aea50146102ed578063483ccffe14610309576101d8565b80630d734519146101dd57806317798d011461021a5780631e0197e214610257575b600080fd5b3480156101e957600080fd5b5061020460048036038101906101ff919061290a565b61077e565b6040516102119190612976565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c9190612991565b610861565b60405161024e9190612a07565b60405180910390f35b34801561026357600080fd5b5061026c610908565b60405161027c9493929190612a3d565b60405180910390f35b34801561029157600080fd5b5061029a610940565b6040516102a79190612a07565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d29190612991565b610946565b6040516102e49190612a07565b60405180910390f35b61030760048036038101906103029190612991565b610a7e565b005b34801561031557600080fd5b5061031e610fd3565b60405161032b9190612a07565b60405180910390f35b34801561034057600080fd5b5061035b60048036038101906103569190612991565b610fd9565b005b34801561036957600080fd5b50610372611604565b60405161037f9190612a91565b60405180910390f35b34801561039457600080fd5b5061039d61162a565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190612aac565b611788565b6040516103d39190612a07565b60405180910390f35b3480156103e857600080fd5b5061040360048036038101906103fe9190612b13565b61185d565b005b34801561041157600080fd5b5061042c6004803603810190610427919061290a565b61186f565b005b34801561043a57600080fd5b5061045560048036038101906104509190612b40565b611a63565b6040516104629190612a07565b60405180910390f35b34801561047757600080fd5b50610480611bb6565b005b34801561048e57600080fd5b506104a960048036038101906104a49190612b80565b611bca565b6040516104b69190612a07565b60405180910390f35b3480156104cb57600080fd5b506104e660048036038101906104e1919061290a565b611c9d565b6040516104f39190612a07565b60405180910390f35b34801561050857600080fd5b50610511611d34565b005b34801561051f57600080fd5b50610528612110565b6040516105359190612a91565b60405180910390f35b34801561054a57600080fd5b5061056560048036038101906105609190612b13565b612139565b005b34801561057357600080fd5b5061058e60048036038101906105899190612bd9565b61214b565b005b34801561059c57600080fd5b506105b760048036038101906105b29190612991565b6121ae565b6040516105c49190612a07565b60405180910390f35b3480156105d957600080fd5b506105e2612274565b005b3480156105f057600080fd5b5061060b60048036038101906106069190612b80565b61242c565b6040516106189190612c19565b60405180910390f35b34801561062d57600080fd5b5061063661244c565b6040516106439190612a07565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e9190612c60565b612452565b6040516106809190612a07565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab9190612991565b61246a565b6040516106bd9190612a07565b60405180910390f35b3480156106d257600080fd5b506106ed60048036038101906106e89190612b13565b6125a2565b005b3480156106fb57600080fd5b5061071660048036038101906107119190612b80565b6125b4565b005b34801561072457600080fd5b5061073f600480360381019061073a9190612b80565b612638565b005b34801561074d57600080fd5b5061076860048036038101906107639190612c8d565b612684565b6040516107759190612a07565b60405180910390f35b60008160018081111561079457610793612ccd565b5b8160018111156107a7576107a6612ccd565b5b146107e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107de90612d59565b60405180910390fd5b620f4240841061082c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082390612dc5565b60405180910390fd5b84848460405160200161084193929190612ebd565b604051602081830303815290604052805190602001209150509392505050565b60008260018081111561087757610876612ccd565b5b81600181111561088a57610889612ccd565b5b146108ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c190612d59565b60405180910390fd5b60006108d787878761077e565b90506000600960008381526020019081526020016000205490506108fb8186611a63565b9350505050949350505050565b60028060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154908060020154905084565b60075481565b60008260018081111561095c5761095b612ccd565b5b81600181111561096f5761096e612ccd565b5b146109af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a690612d59565b60405180910390fd5b60006109bd878787876121ae565b90506000670de0b6b3a7640000600654836109d89190612f29565b6109e29190612fb2565b90506000670de0b6b3a7640000600754846109fd9190612f29565b610a079190612fb2565b90506000600260000160009054906101000a900460ff16610a29576000610a4b565b670de0b6b3a764000060085485610a409190612f29565b610a4a9190612fb2565b5b905080828486610a5b9190612fe3565b610a659190612fe3565b610a6f9190612fe3565b95505050505050949350505050565b81600180811115610a9257610a91612ccd565b5b816001811115610aa557610aa4612ccd565b5b14610ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adc90612d59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e90613089565b60405180910390fd5b60008211610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb1906130f5565b60405180910390fd5b6000610bc786868661077e565b9050600260010154811415610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0890613187565b60405180910390fd5b6000610c30600960008481526020019081526020016000205485611a63565b90506000670de0b6b3a764000060065483610c4b9190612f29565b610c559190612fb2565b90506000670de0b6b3a764000060075484610c709190612f29565b610c7a9190612fb2565b90506000600260000160009054906101000a900460ff16610c9c576000610cbe565b670de0b6b3a764000060085485610cb39190612f29565b610cbd9190612fb2565b5b905080828486610cce91906131a7565b610cd891906131a7565b610ce291906131a7565b341015610d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1b90613249565b60405180910390fd5b86600960008781526020019081526020016000206000828254610d4791906131a7565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dae91906131a7565b9250508190555080600280016000828254610dc991906131a7565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160011515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf81604051610e799190613371565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1685604051610ec9906133be565b60006040518083038185875af1925050503d8060008114610f06576040519150601f19603f3d011682016040523d82523d6000602084013e610f0b565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff1685604051610f35906133be565b60006040518083038185875af1925050503d8060008114610f72576040519150601f19603f3d011682016040523d82523d6000602084013e610f77565b606091505b50509050818015610f855750805b610fc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbb9061341f565b60405180910390fd5b50505050505050505050505050565b60085481565b81600180811115610fed57610fec612ccd565b5b81600181111561100057610fff612ccd565b5b14611040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103790612d59565b60405180910390fd5b6110486126a9565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d190613089565b60405180910390fd5b6000821161111d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611114906130f5565b60405180910390fd5b600061112a86868661077e565b905082600a600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b69061348b565b60405180910390fd5b60006111e98460096000858152602001908152602001600020546111e39190612fe3565b85611a63565b90506000670de0b6b3a7640000600654836112049190612f29565b61120e9190612fb2565b90506000670de0b6b3a7640000600754846112299190612f29565b6112339190612fb2565b90506000600260000160009054906101000a900460ff16611255576000611277565b670de0b6b3a76400006008548561126c9190612f29565b6112769190612fb2565b5b90508660096000878152602001908152602001600020600082825461129c9190612fe3565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113039190612fe3565b925050819055508060028001600082825461131e91906131a7565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160001515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf816040516113ce9190613371565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168560405161141e906133be565b60006040518083038185875af1925050503d806000811461145b576040519150601f19603f3d011682016040523d82523d6000602084013e611460565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff168560405161148a906133be565b60006040518083038185875af1925050503d80600081146114c7576040519150601f19603f3d011682016040523d82523d6000602084013e6114cc565b606091505b505090508180156114da5750805b611519576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115109061341f565b60405180910390fd5b60008486888a6115299190612fe3565b6115339190612fe3565b61153d9190612fe3565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051611565906133be565b60006040518083038185875af1925050503d80600081146115a2576040519150601f19603f3d011682016040523d82523d6000602084013e6115a7565b606091505b50509050806115eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e29061341f565b60405180910390fd5b505050505050505050506115fd6126f9565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166116b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ad9061351d565b60405180910390fd5b600260000160009054906101000a900460ff1615611709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170090613589565b60405180910390fd5b600260000160019054906101000a900460ff1661175b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611752906135f5565b60405180910390fd5b6000600260000160016101000a81548160ff0219169083151502179055506000801b600260010181905550565b60008260018081111561179e5761179d612ccd565b5b8160018111156117b1576117b0612ccd565b5b146117f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e890612d59565b60405180910390fd5b60006117fe87878761077e565b9050600a600082815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505050949350505050565b611865612702565b8060078190555050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f29061351d565b60405180910390fd5b8060018081111561190f5761190e612ccd565b5b81600181111561192257611921612ccd565b5b14611962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195990612d59565b60405180910390fd5b600260000160009054906101000a900460ff166119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ab90613661565b60405180910390fd5b600260000160019054906101000a900460ff1615611a07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fe906136cd565b60405180910390fd5b6000611a1485858561077e565b9050806002600101819055506001600260000160016101000a81548160ff0219169083151502179055506000600260000160006101000a81548160ff0219169083151502179055505050505050565b60008083148015611a745750600082145b15611a825760009050611bb0565b6000808414611ae257600660018086611a9b9190612fe3565b6002611aa79190612f29565b611ab191906131a7565b85600187611abf9190612fe3565b611ac99190612f29565b611ad39190612f29565b611add9190612fb2565b611ae5565b60005b905060008085148015611af85750600184145b611b745760066001808787611b0d91906131a7565b611b179190612fe3565b6002611b239190612f29565b611b2d91906131a7565b8587611b3991906131a7565b60018888611b4791906131a7565b611b519190612fe3565b611b5b9190612f29565b611b659190612f29565b611b6f9190612fb2565b611b77565b60005b905060008282611b879190612fe3565b9050617d00670de0b6b3a764000082611ba09190612f29565b611baa9190612fb2565b93505050505b92915050565b611bbe612702565b611bc86000612780565b565b6000600260000160019054906101000a900460ff16611bec5760009050611c98565b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611c8c5781600a6000600260010154815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611c7d9190612f29565b611c879190612fb2565b611c8f565b60005b90508093505050505b919050565b600081600180811115611cb357611cb2612ccd565b5b816001811115611cc657611cc5612ccd565b5b14611d06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfd90612d59565b60405180910390fd5b6000611d1386868661077e565b90506009600082815260200190815260200160002054925050509392505050565b611d3c6126a9565b600260000160019054906101000a900460ff16611d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d859061375f565b60405180910390fd5b6000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d906137f1565b60405180910390fd5b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611ec65781600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611eb79190612f29565b611ec19190612fb2565b611ec9565b60005b905060008111611f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f059061385d565b60405180910390fd5b600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546009600060026001015481526020019081526020016000206000828254611f8b9190612fe3565b925050819055506000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806002800160008282546120019190612fe3565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a68260405161204e9190612a07565b60405180910390a260003373ffffffffffffffffffffffffffffffffffffffff168260405161207c906133be565b60006040518083038185875af1925050503d80600081146120b9576040519150601f19603f3d011682016040523d82523d6000602084013e6120be565b606091505b5050905080612102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f99061341f565b60405180910390fd5b5050505061210e6126f9565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612141612702565b8060068190555050565b612153612702565b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000826001808111156121c4576121c3612ccd565b5b8160018111156121d7576121d6612ccd565b5b14612217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220e90612d59565b60405180910390fd5b600061222487878761077e565b9050600060096000838152602001908152602001600020549050848110156122515760009350505061226b565b61226685826122609190612fe3565b86611a63565b935050505b50949350505050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f79061351d565b60405180910390fd5b600260000160009054906101000a900460ff1615612353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234a906138c9565b60405180910390fd5b600260000160019054906101000a900460ff16156123a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239d90613935565b60405180910390fd5b60405180608001604052806001151581526020016000151581526020016000801b81526020016000815250600260008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001015560608201518160020155905050565b600b6020528060005260406000206000915054906101000a900460ff1681565b60065481565b60096020528060005260406000206000915090505481565b6000826001808111156124805761247f612ccd565b5b81600181111561249357612492612ccd565b5b146124d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ca90612d59565b60405180910390fd5b60006124e187878787610861565b90506000670de0b6b3a7640000600654836124fc9190612f29565b6125069190612fb2565b90506000670de0b6b3a7640000600754846125219190612f29565b61252b9190612fb2565b90506000600260000160009054906101000a900460ff1661254d57600061256f565b670de0b6b3a7640000600854856125649190612f29565b61256e9190612fb2565b5b90508082848661257f91906131a7565b61258991906131a7565b61259391906131a7565b95505050505050949350505050565b6125aa612702565b8060088190555050565b6125bc612702565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561262c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612623906139c7565b60405180910390fd5b61263581612780565b50565b612640612702565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a602052816000526040600020602052806000526040600020600091509150505481565b600260015414156126ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e690613a33565b60405180910390fd5b6002600181905550565b60018081905550565b61270a612844565b73ffffffffffffffffffffffffffffffffffffffff16612728612110565b73ffffffffffffffffffffffffffffffffffffffff161461277e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277590613a9f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061287c82612851565b9050919050565b61288c81612871565b811461289757600080fd5b50565b6000813590506128a981612883565b92915050565b6000819050919050565b6128c2816128af565b81146128cd57600080fd5b50565b6000813590506128df816128b9565b92915050565b600281106128f257600080fd5b50565b600081359050612904816128e5565b92915050565b6000806000606084860312156129235761292261284c565b5b60006129318682870161289a565b9350506020612942868287016128d0565b9250506040612953868287016128f5565b9150509250925092565b6000819050919050565b6129708161295d565b82525050565b600060208201905061298b6000830184612967565b92915050565b600080600080608085870312156129ab576129aa61284c565b5b60006129b98782880161289a565b94505060206129ca878288016128d0565b93505060406129db878288016128f5565b92505060606129ec878288016128d0565b91505092959194509250565b612a01816128af565b82525050565b6000602082019050612a1c60008301846129f8565b92915050565b60008115159050919050565b612a3781612a22565b82525050565b6000608082019050612a526000830187612a2e565b612a5f6020830186612a2e565b612a6c6040830185612967565b612a7960608301846129f8565b95945050505050565b612a8b81612871565b82525050565b6000602082019050612aa66000830184612a82565b92915050565b60008060008060808587031215612ac657612ac561284c565b5b6000612ad48782880161289a565b9450506020612ae5878288016128d0565b9350506040612af6878288016128f5565b9250506060612b078782880161289a565b91505092959194509250565b600060208284031215612b2957612b2861284c565b5b6000612b37848285016128d0565b91505092915050565b60008060408385031215612b5757612b5661284c565b5b6000612b65858286016128d0565b9250506020612b76858286016128d0565b9150509250929050565b600060208284031215612b9657612b9561284c565b5b6000612ba48482850161289a565b91505092915050565b612bb681612a22565b8114612bc157600080fd5b50565b600081359050612bd381612bad565b92915050565b60008060408385031215612bf057612bef61284c565b5b6000612bfe8582860161289a565b9250506020612c0f85828601612bc4565b9150509250929050565b6000602082019050612c2e6000830184612a2e565b92915050565b612c3d8161295d565b8114612c4857600080fd5b50565b600081359050612c5a81612c34565b92915050565b600060208284031215612c7657612c7561284c565b5b6000612c8484828501612c4b565b91505092915050565b60008060408385031215612ca457612ca361284c565b5b6000612cb285828601612c4b565b9250506020612cc38582860161289a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f496e76616c6964206576656e7420747970650000000000000000000000000000600082015250565b6000612d43601283612cfc565b9150612d4e82612d0d565b602082019050919050565b60006020820190508181036000830152612d7281612d36565b9050919050565b7f4944206d757374206265206c657373207468616e2031206d696c6c696f6e0000600082015250565b6000612daf601e83612cfc565b9150612dba82612d79565b602082019050919050565b60006020820190508181036000830152612dde81612da2565b9050919050565b60008160601b9050919050565b6000612dfd82612de5565b9050919050565b6000612e0f82612df2565b9050919050565b612e27612e2282612871565b612e04565b82525050565b6000819050919050565b612e48612e43826128af565b612e2d565b82525050565b60028110612e5f57612e5e612ccd565b5b50565b6000819050612e7082612e4e565b919050565b6000612e8082612e62565b9050919050565b60008160f81b9050919050565b6000612e9f82612e87565b9050919050565b612eb7612eb282612e75565b612e94565b82525050565b6000612ec98286612e16565b601482019150612ed98285612e37565b602082019150612ee98284612ea6565b600182019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f34826128af565b9150612f3f836128af565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612f7857612f77612efa565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612fbd826128af565b9150612fc8836128af565b925082612fd857612fd7612f83565b5b828204905092915050565b6000612fee826128af565b9150612ff9836128af565b92508282101561300c5761300b612efa565b5b828203905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613073602a83612cfc565b915061307e82613017565b604082019050919050565b600060208201905081810360008301526130a281613066565b9050919050565b7f43616e6e6f7420627579207a65726f2062616467657300000000000000000000600082015250565b60006130df601683612cfc565b91506130ea826130a9565b602082019050919050565b6000602082019050818103600083015261310e816130d2565b9050919050565b7f43616e6e6f74206275792077696e6e696e6720626164676520647572696e672060008201527f7061796f75742070686173650000000000000000000000000000000000000000602082015250565b6000613171602c83612cfc565b915061317c82613115565b604082019050919050565b600060208201905081810360008301526131a081613164565b9050919050565b60006131b2826128af565b91506131bd836128af565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131f2576131f1612efa565b5b828201905092915050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b6000613233601483612cfc565b915061323e826131fd565b602082019050919050565b6000602082019050818103600083015261326281613226565b9050919050565b61327281612871565b82525050565b6132818161295d565b82525050565b61329081612a22565b82525050565b61329f816128af565b82525050565b610140820160008201516132bc6000850182613269565b5060208201516132cf6020850182613278565b5060408201516132e26040850182613287565b5060608201516132f56060850182613296565b5060808201516133086080850182613296565b5060a082015161331b60a0850182613296565b5060c082015161332e60c0850182613296565b5060e082015161334160e0850182613296565b50610100820151613356610100850182613296565b5061012082015161336b610120850182613296565b50505050565b60006101408201905061338760008301846132a5565b92915050565b600081905092915050565b50565b60006133a860008361338d565b91506133b382613398565b600082019050919050565b60006133c98261339b565b9150819050919050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b6000613409601483612cfc565b9150613414826133d3565b602082019050919050565b60006020820190508181036000830152613438816133fc565b9050919050565b7f496e73756666696369656e742062616467657300000000000000000000000000600082015250565b6000613475601383612cfc565b91506134808261343f565b602082019050919050565b600060208201905081810360008301526134a481613468565b9050919050565b7f43616c6c6572206973206e6f74206120746f75726e616d656e7420637265617460008201527f6f72000000000000000000000000000000000000000000000000000000000000602082015250565b6000613507602283612cfc565b9150613512826134ab565b604082019050919050565b60006020820190508181036000830152613536816134fa565b9050919050565b7f546f75726e616d656e74207374696c6c206163746976652e0000000000000000600082015250565b6000613573601883612cfc565b915061357e8261353d565b602082019050919050565b600060208201905081810360008301526135a281613566565b9050919050565b7f57696e6e6572207061796f75747320616c72656164792073746f707065642e00600082015250565b60006135df601f83612cfc565b91506135ea826135a9565b602082019050919050565b6000602082019050818103600083015261360e816135d2565b9050919050565b7f546f75726e616d656e74206973206e6f74206163746976652e00000000000000600082015250565b600061364b601983612cfc565b915061365682613615565b602082019050919050565b6000602082019050818103600083015261367a8161363e565b9050919050565b7f57696e6e6572207061796f75747320616c726561647920616c6c6f7765642e00600082015250565b60006136b7601f83612cfc565b91506136c282613681565b602082019050919050565b600060208201905081810360008301526136e6816136aa565b9050919050565b7f57696e6e6572207061796f7574206e6f7420616c6c6f7765642072696768742060008201527f6e6f770000000000000000000000000000000000000000000000000000000000602082015250565b6000613749602383612cfc565b9150613754826136ed565b604082019050919050565b600060208201905081810360008301526137788161373c565b9050919050565b7f4e6f205649502062616467657320746f20636c61696d207061796f757420666f60008201527f722e000000000000000000000000000000000000000000000000000000000000602082015250565b60006137db602283612cfc565b91506137e68261377f565b604082019050919050565b6000602082019050818103600083015261380a816137ce565b9050919050565b7f4e6f207061796f757420666f7220757365720000000000000000000000000000600082015250565b6000613847601283612cfc565b915061385282613811565b602082019050919050565b600060208201905081810360008301526138768161383a565b9050919050565b7f546f75726e616d656e7420697320616c7265616479206163746976652e000000600082015250565b60006138b3601d83612cfc565b91506138be8261387d565b602082019050919050565b600060208201905081810360008301526138e2816138a6565b9050919050565b7f57696e6e6572207061796f757473207374696c6c20616c6c6f7765642e000000600082015250565b600061391f601d83612cfc565b915061392a826138e9565b602082019050919050565b6000602082019050818103600083015261394e81613912565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006139b1602683612cfc565b91506139bc82613955565b604082019050919050565b600060208201905081810360008301526139e0816139a4565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613a1d601f83612cfc565b9150613a28826139e7565b602082019050919050565b60006020820190508181036000830152613a4c81613a10565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613a89602083612cfc565b9150613a9482613a53565b602082019050919050565b60006020820190508181036000830152613ab881613a7c565b905091905056fea2646970667358221220f6fc33fae81179e623db1f1750a9fbb8dc7e2a18f64b481b6ad588ff3e8f797764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 79,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 224,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "tournament",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Tournament)200_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "protocolFeeDestination",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 228,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "protocolFeePercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 230,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "subjectFeePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 232,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "tournamentFeePercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 247,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "vipBadgeSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 253,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "vipBadgeBalance",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 257,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "isTournamentCreator",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Tournament)200_storage": {
        "encoding": "inplace",
        "label": "struct UnlonelyTournament.Tournament",
        "members": [
          {
            "astId": 193,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 195,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "isPayoutClaimable",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 197,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "winningBadge",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 199,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "vipPooledEth",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}