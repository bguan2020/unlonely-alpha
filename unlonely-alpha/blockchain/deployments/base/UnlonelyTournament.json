{
  "address": "0x9A0db8993D942058e3F00A2E5e1F3b80Ea09bf9d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "eventByte",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "isBuy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "badgeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "subjectEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tournamentEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pooledEth",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct UnlonelyTournament.TradeInfo",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyVIPBadge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTournamentPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "generateKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "getHolderBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTournamentPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTournamentCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "selectTournamentWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellVIPBadge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "setFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setSubjectFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setTournamentCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setTournamentFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournament",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPayoutClaimable",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "winningBadge",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "vipPooledEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournamentFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vipBadgeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vipBadgeSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x72c3690e44da35c8f67a7ad6c4911454aef6c9044b9773645b0980b05c4e60ad",
  "receipt": {
    "to": null,
    "from": "0x141Edb16C70307Cf2F0f04aF2dDa75423a0E1bEa",
    "contractAddress": "0x9A0db8993D942058e3F00A2E5e1F3b80Ea09bf9d",
    "transactionIndex": 6,
    "gasUsed": "3534580",
    "logsBloom": "0x
    "blockHash": "0xd28a5c96ac8e27e25269e1438f8fe413d5540874b7f0868ad84d7786296818ed",
    "transactionHash": "0x72c3690e44da35c8f67a7ad6c4911454aef6c9044b9773645b0980b05c4e60ad",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 6767375,
        "transactionHash": "0x72c3690e44da35c8f67a7ad6c4911454aef6c9044b9773645b0980b05c4e60ad",
        "address": "0x9A0db8993D942058e3F00A2E5e1F3b80Ea09bf9d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000141edb16c70307cf2f0f04af2dda75423a0e1bea"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xd28a5c96ac8e27e25269e1438f8fe413d5540874b7f0868ad84d7786296818ed"
      }
    ],
    "blockNumber": 6767375,
    "cumulativeGasUsed": "4296101",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "52d5d42a1d60484826e01ffaa5fe7d5b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"eventByte\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"badgeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tournamentEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pooledEth\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct UnlonelyTournament.TradeInfo\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyVIPBadge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTournamentPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"generateKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getHolderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTournamentPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTournamentCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"selectTournamentWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellVIPBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTournamentCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setTournamentFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournament\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPayoutClaimable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"winningBadge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vipPooledEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipBadgeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vipBadgeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnlonelyTournament.sol\":\"UnlonelyTournament\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"contracts/UnlonelyTournament.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract UnlonelyTournament is Ownable, ReentrancyGuard {\\r\\n    // Tournament is a struct that holds the state of a tournament, eventByte key pointing to the winning VIPBadge as well as the vip pooled ETH. Only one tournament is allowed at a time. This is intentional.\\r\\n    \\r\\n    enum EventType {\\r\\n        YayNayVote,\\r\\n        VIPBadge\\r\\n    }\\r\\n\\r\\n    struct Tournament {\\r\\n        bool isActive;\\r\\n        bool isPayoutClaimable;\\r\\n        bytes32 winningBadge;\\r\\n        uint256 vipPooledEth;\\r\\n    }\\r\\n\\r\\n    struct TradeInfo {\\r\\n        address trader;\\r\\n        bytes32 eventByte;\\r\\n        bool isBuy;\\r\\n        uint256 badgeAmount;\\r\\n        uint256 ethAmount;\\r\\n        uint256 protocolEthAmount;\\r\\n        uint256 subjectEthAmount;\\r\\n        uint256 tournamentEthAmount;\\r\\n        uint256 supply;\\r\\n        uint256 pooledEth;\\r\\n    }\\r\\n\\r\\n    Tournament public tournament;\\r\\n\\r\\n    address public protocolFeeDestination;\\r\\n    uint256 public protocolFeePercent;\\r\\n    uint256 public subjectFeePercent;\\r\\n    uint256 public tournamentFeePercent;\\r\\n\\r\\n    event Trade(TradeInfo trade);\\r\\n    event Payout(address indexed voter, uint256 amount);\\r\\n\\r\\n    mapping(bytes32 => uint256) public vipBadgeSupply;\\r\\n    mapping(bytes32 => mapping(address => uint256)) public vipBadgeBalance;\\r\\n    mapping(address => bool) public isTournamentCreator;\\r\\n\\r\\n    modifier onlyTournamentCreator() {\\r\\n        require(isTournamentCreator[msg.sender], \\\"Caller is not a tournament creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validEventType(EventType eventType) {\\r\\n        require(\\r\\n            eventType == EventType.VIPBadge,\\r\\n            \\\"Invalid event type\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        // Set the contract deployer as the initial tournament creator\\r\\n        isTournamentCreator[msg.sender] = true;\\r\\n\\r\\n        protocolFeePercent = 5 * 10**16; // 5%\\r\\n        subjectFeePercent = 5 * 10**16;  // 5%\\r\\n        tournamentFeePercent = 5 * 10**16;  // 5%\\r\\n    }\\r\\n\\r\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\r\\n        protocolFeeDestination = _feeDestination;\\r\\n    }\\r\\n\\r\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        protocolFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        subjectFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setTournamentFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        tournamentFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setTournamentCreator(address creator, bool value) public onlyOwner {\\r\\n        isTournamentCreator[creator] = value;\\r\\n    }\\r\\n\\r\\n\\tfunction generateKey(address streamerAddress, uint256 eventId, EventType eventType) public pure validEventType(eventType) returns (bytes32) {\\r\\n        require(eventId < 1000000, \\\"ID must be less than 1 million\\\");\\r\\n        return keccak256(abi.encodePacked(streamerAddress, eventId, eventType));\\r\\n    }\\r\\n\\r\\n    function getTournamentPayout(address _address) public view returns (uint256){\\r\\n        if (!tournament.isPayoutClaimable) return 0;\\r\\n        uint256 totalPool = tournament.vipPooledEth;\\r\\n        uint256 totalWinningShares = vipBadgeSupply[tournament.winningBadge];\\r\\n        uint256 userPayout = totalWinningShares == 0 ? 0 : (totalPool * vipBadgeBalance[tournament.winningBadge][_address] / totalWinningShares);\\r\\n        return userPayout;\\r\\n    }\\r\\n\\r\\n    function getHolderBalance(address streamerAddress, uint256 eventId, EventType eventType, address holder) public view validEventType(eventType) returns (uint256 balance) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        return vipBadgeBalance[key][holder];\\r\\n    }\\r\\n\\r\\n    function getSupply(address streamerAddress, uint256 eventId, EventType eventType) public view validEventType(eventType) returns (uint256 supply) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        return vipBadgeSupply[key];\\r\\n    }\\r\\n\\r\\n    function getPrice(uint256 supply, uint256 amount) public pure returns (uint256) {\\r\\n        if (supply == 0 && amount == 0) return 0;\\r\\n\\r\\n        uint256 sum1 = supply == 0 ? 0 : (supply - 1) * supply * (2 * (supply - 1) + 1) / 6;\\r\\n        uint256 sum2 = (supply == 0 && amount == 1) ? 0 : (amount + supply - 1) * (supply + amount) * (2 * (amount + supply - 1) + 1) / 6;\\r\\n        uint256 summation = sum2 - sum1;\\r\\n        return summation * 1 ether / 32000;\\r\\n    }\\r\\n\\r\\n    function getBuyPrice(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256 price) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 supply = vipBadgeSupply[key];\\r\\n        return getPrice(supply, amount);\\r\\n    }\\r\\n\\r\\n    function getSellPrice(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256 price) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 supply = vipBadgeSupply[key];\\r\\n        if (supply < amount) return 0;\\r\\n        return getPrice(supply - amount, amount);\\r\\n    }\\r\\n\\r\\n    function getBuyPriceAfterFee(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256) {\\r\\n        uint256 price = getBuyPrice(streamerAddress, eventId, eventType, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? price * tournamentFeePercent / 1 ether : 0;\\r\\n        return price + protocolFee + subjectFee + tournamentFee;\\r\\n    }\\r\\n\\r\\n    function getSellPriceAfterFee(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256) {\\r\\n        uint256 price = getSellPrice(streamerAddress, eventId, eventType, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? price * tournamentFeePercent / 1 ether : 0;\\r\\n        return price - protocolFee - subjectFee - tournamentFee;\\r\\n    }\\r\\n\\r\\n    function startTournament() public onlyTournamentCreator {\\r\\n        require(!tournament.isActive, \\\"Tournament is already active.\\\");\\r\\n        require(!tournament.isPayoutClaimable, \\\"Winner payouts still allowed.\\\");\\r\\n        tournament = Tournament({\\r\\n            isActive: true,\\r\\n            isPayoutClaimable: false,\\r\\n            winningBadge: bytes32(0),\\r\\n            vipPooledEth: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function selectTournamentWinner(address streamerAddress, uint256 eventId, EventType eventType) public onlyTournamentCreator validEventType(eventType) {\\r\\n        require(tournament.isActive, \\\"Tournament is not active.\\\");\\r\\n        require(!tournament.isPayoutClaimable, \\\"Winner payouts already allowed.\\\");\\r\\n        bytes32 winningBadge = generateKey(streamerAddress, eventId, eventType);\\r\\n        tournament.winningBadge = winningBadge;\\r\\n        tournament.isPayoutClaimable = true;\\r\\n        tournament.isActive = false;\\r\\n        // winning badge ETH is added to the tournament pool\\r\\n        tournament.vipPooledEth += getPrice(0, vipBadgeSupply[winningBadge]);\\r\\n    }\\r\\n    \\r\\n    function endTournament() public onlyTournamentCreator {\\r\\n        require(!tournament.isActive, \\\"Tournament still active.\\\");\\r\\n        require(tournament.isPayoutClaimable, \\\"Winner payouts already stopped.\\\");\\r\\n        tournament.isPayoutClaimable = false;\\r\\n        tournament.winningBadge = bytes32(0);\\r\\n    }\\r\\n\\r\\n    function buyVIPBadge(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public payable validEventType(eventType) {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        require(amount > 0, \\\"Cannot buy zero badges\\\");\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        require(key != tournament.winningBadge, \\\"Cannot buy winning badge during payout phase\\\");\\r\\n        uint256 price = getPrice(vipBadgeSupply[key], amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? (price * tournamentFeePercent / 1 ether) : 0;  // Assume tournamentFeePercent is defined\\r\\n        require(msg.value >= price + protocolFee + subjectFee + tournamentFee, \\\"Insufficient payment\\\");\\r\\n\\r\\n        if(msg.value > (price + protocolFee + subjectFee + tournamentFee)) {\\r\\n            msg.sender.call{value: msg.value - (price + protocolFee + subjectFee + tournamentFee)}(\\\"\\\");\\r\\n        }\\r\\n\\r\\n        // Update the contract state\\r\\n        vipBadgeSupply[key] += amount;\\r\\n        vipBadgeBalance[key][msg.sender] += amount;\\r\\n        tournament.vipPooledEth += tournamentFee;\\r\\n\\r\\n        TradeInfo memory tradeInfo = TradeInfo({\\r\\n            trader: msg.sender,\\r\\n            eventByte: key,\\r\\n            isBuy: true,\\r\\n            badgeAmount: amount,\\r\\n            ethAmount: price,\\r\\n            protocolEthAmount: protocolFee,\\r\\n            subjectEthAmount: subjectFee,\\r\\n            tournamentEthAmount: tournamentFee,\\r\\n            supply: vipBadgeSupply[key],\\r\\n            pooledEth: tournament.vipPooledEth\\r\\n        });\\r\\n\\r\\n        emit Trade(tradeInfo);\\r\\n\\r\\n        // Send protocol and subject fees\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n\\r\\n    function sellVIPBadge(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public validEventType(eventType) nonReentrant {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        require(amount > 0, \\\"Cannot buy zero badges\\\");\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        require(vipBadgeBalance[key][msg.sender] >= amount, \\\"Insufficient badges\\\");\\r\\n        require(key != tournament.winningBadge, \\\"Cannot sell winning badge during payout phase\\\");\\r\\n        uint256 price = getPrice(vipBadgeSupply[key] - amount, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? (price * tournamentFeePercent / 1 ether) : 0;  // Assume tournamentFeePercent is defined\\r\\n\\r\\n        // Update the contract state\\r\\n        vipBadgeSupply[key] -= amount;\\r\\n        vipBadgeBalance[key][msg.sender] -= amount;\\r\\n        tournament.vipPooledEth += tournamentFee;\\r\\n\\r\\n        TradeInfo memory tradeInfo = TradeInfo({\\r\\n            trader: msg.sender,\\r\\n            eventByte: key,\\r\\n            isBuy: false,\\r\\n            badgeAmount: amount,\\r\\n            ethAmount: price,\\r\\n            protocolEthAmount: protocolFee,\\r\\n            subjectEthAmount: subjectFee,\\r\\n            tournamentEthAmount: tournamentFee,\\r\\n            supply: vipBadgeSupply[key],\\r\\n            pooledEth: tournament.vipPooledEth\\r\\n        });\\r\\n\\r\\n        emit Trade(tradeInfo);\\r\\n\\r\\n        // Send protocol and subject fees\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        // Send the remaining amount to the seller\\r\\n        uint256 netAmount = price - protocolFee - subjectFee - tournamentFee;\\r\\n        (bool success3, ) = msg.sender.call{value: netAmount}(\\\"\\\");\\r\\n        require(success3, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n\\r\\n    function claimTournamentPayout() public nonReentrant {\\r\\n        require(tournament.isPayoutClaimable, \\\"Winner payout not allowed right now\\\");\\r\\n        require(vipBadgeBalance[tournament.winningBadge][msg.sender] > 0, \\\"No VIP badges to claim payout for.\\\");\\r\\n        uint256 totalPool = tournament.vipPooledEth;\\r\\n        uint256 totalWinningShares = vipBadgeSupply[tournament.winningBadge];\\r\\n        uint256 userPayout = totalWinningShares == 0 ? 0 : (totalPool * vipBadgeBalance[tournament.winningBadge][msg.sender] / totalWinningShares);\\r\\n        require(userPayout > 0, \\\"No payout for user\\\");\\r\\n\\r\\n        // Reset user's shares after distributing\\r\\n        vipBadgeSupply[tournament.winningBadge] -= vipBadgeBalance[tournament.winningBadge][msg.sender];\\r\\n        vipBadgeBalance[tournament.winningBadge][msg.sender] = 0;\\r\\n\\r\\n        // Deduct the user's payout from the sharesSubject's pool\\r\\n        tournament.vipPooledEth -= userPayout;\\r\\n\\r\\n        emit Payout(msg.sender, userPayout);\\r\\n        (bool success, ) = msg.sender.call{value: userPayout}(\\\"\\\");\\r\\n        require(success, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8307fa93ef63627b9c90ee7ba01dbba5cd92f2ed01a0be4bb779ad7094a6ef18\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200003262000026620000c160201b60201c565b620000c960201b60201c565b600180819055506001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555066b1a2bc2ec5000060068190555066b1a2bc2ec5000060078190555066b1a2bc2ec500006008819055506200018d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613cc6806200019d6000396000f3fe6080604052600436106101d85760003560e01c806372641ecd11610102578063c94892f011610095578063effb67e611610064578063effb67e6146106c6578063f2fde38b146106ef578063fbe5323414610718578063fcebcf5e14610741576101d8565b8063c94892f0146105e4578063d6e6eb9f14610621578063d87986fe1461064c578063e8b9af5114610689576101d8565b8063a4983421116100d1578063a49834211461053e578063ac210a5d14610567578063bb47380a14610590578063bf559d11146105cd576101d8565b806372641ecd14610482578063775c1e5d146104bf5780637788c25f146104fc5780638da5cb5b14610513576101d8565b806348c2dde81161017a5780635a8a764e116101495780635a8a764e146103dc5780635ad92eea146104055780635cf4ee911461042e578063715018a61461046b576101d8565b806348c2dde8146103345780634ce7957c1461035d5780634d633a8f146103885780635564285d1461039f576101d8565b806324dc441d116101b657806324dc441d146102855780633aecedd2146102b0578063451aea50146102ed578063483ccffe14610309576101d8565b80630d734519146101dd57806317798d011461021a5780631e0197e214610257575b600080fd5b3480156101e957600080fd5b5061020460048036038101906101ff9190612a49565b61077e565b6040516102119190612ab5565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c9190612ad0565b610861565b60405161024e9190612b46565b60405180910390f35b34801561026357600080fd5b5061026c610908565b60405161027c9493929190612b7c565b60405180910390f35b34801561029157600080fd5b5061029a610940565b6040516102a79190612b46565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d29190612ad0565b610946565b6040516102e49190612b46565b60405180910390f35b61030760048036038101906103029190612ad0565b610a7e565b005b34801561031557600080fd5b5061031e611092565b60405161032b9190612b46565b60405180910390f35b34801561034057600080fd5b5061035b60048036038101906103569190612ad0565b611098565b005b34801561036957600080fd5b5061037261170b565b60405161037f9190612bd0565b60405180910390f35b34801561039457600080fd5b5061039d611731565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190612beb565b61188f565b6040516103d39190612b46565b60405180910390f35b3480156103e857600080fd5b5061040360048036038101906103fe9190612c52565b611964565b005b34801561041157600080fd5b5061042c60048036038101906104279190612a49565b611976565b005b34801561043a57600080fd5b5061045560048036038101906104509190612c7f565b611ba2565b6040516104629190612b46565b60405180910390f35b34801561047757600080fd5b50610480611cf5565b005b34801561048e57600080fd5b506104a960048036038101906104a49190612cbf565b611d09565b6040516104b69190612b46565b60405180910390f35b3480156104cb57600080fd5b506104e660048036038101906104e19190612a49565b611ddc565b6040516104f39190612b46565b60405180910390f35b34801561050857600080fd5b50610511611e73565b005b34801561051f57600080fd5b5061052861224f565b6040516105359190612bd0565b60405180910390f35b34801561054a57600080fd5b5061056560048036038101906105609190612c52565b612278565b005b34801561057357600080fd5b5061058e60048036038101906105899190612d18565b61228a565b005b34801561059c57600080fd5b506105b760048036038101906105b29190612ad0565b6122ed565b6040516105c49190612b46565b60405180910390f35b3480156105d957600080fd5b506105e26123b3565b005b3480156105f057600080fd5b5061060b60048036038101906106069190612cbf565b61256b565b6040516106189190612d58565b60405180910390f35b34801561062d57600080fd5b5061063661258b565b6040516106439190612b46565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e9190612d9f565b612591565b6040516106809190612b46565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab9190612ad0565b6125a9565b6040516106bd9190612b46565b60405180910390f35b3480156106d257600080fd5b506106ed60048036038101906106e89190612c52565b6126e1565b005b3480156106fb57600080fd5b5061071660048036038101906107119190612cbf565b6126f3565b005b34801561072457600080fd5b5061073f600480360381019061073a9190612cbf565b612777565b005b34801561074d57600080fd5b5061076860048036038101906107639190612dcc565b6127c3565b6040516107759190612b46565b60405180910390f35b60008160018081111561079457610793612e0c565b5b8160018111156107a7576107a6612e0c565b5b146107e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107de90612e98565b60405180910390fd5b620f4240841061082c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082390612f04565b60405180910390fd5b84848460405160200161084193929190612ffc565b604051602081830303815290604052805190602001209150509392505050565b60008260018081111561087757610876612e0c565b5b81600181111561088a57610889612e0c565b5b146108ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c190612e98565b60405180910390fd5b60006108d787878761077e565b90506000600960008381526020019081526020016000205490506108fb8186611ba2565b9350505050949350505050565b60028060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154908060020154905084565b60075481565b60008260018081111561095c5761095b612e0c565b5b81600181111561096f5761096e612e0c565b5b146109af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a690612e98565b60405180910390fd5b60006109bd878787876122ed565b90506000670de0b6b3a7640000600654836109d89190613068565b6109e291906130f1565b90506000670de0b6b3a7640000600754846109fd9190613068565b610a0791906130f1565b90506000600260000160009054906101000a900460ff16610a29576000610a4b565b670de0b6b3a764000060085485610a409190613068565b610a4a91906130f1565b5b905080828486610a5b9190613122565b610a659190613122565b610a6f9190613122565b95505050505050949350505050565b81600180811115610a9257610a91612e0c565b5b816001811115610aa557610aa4612e0c565b5b14610ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adc90612e98565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e906131c8565b60405180910390fd5b60008211610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb190613234565b60405180910390fd5b6000610bc786868661077e565b9050600260010154811415610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c08906132c6565b60405180910390fd5b6000610c30600960008481526020019081526020016000205485611ba2565b90506000670de0b6b3a764000060065483610c4b9190613068565b610c5591906130f1565b90506000670de0b6b3a764000060075484610c709190613068565b610c7a91906130f1565b90506000600260000160009054906101000a900460ff16610c9c576000610cbe565b670de0b6b3a764000060085485610cb39190613068565b610cbd91906130f1565b5b905080828486610cce91906132e6565b610cd891906132e6565b610ce291906132e6565b341015610d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1b90613388565b60405180910390fd5b80828486610d3291906132e6565b610d3c91906132e6565b610d4691906132e6565b341115610de3573373ffffffffffffffffffffffffffffffffffffffff1681838587610d7291906132e6565b610d7c91906132e6565b610d8691906132e6565b34610d919190613122565b604051610d9d906133d9565b60006040518083038185875af1925050503d8060008114610dda576040519150601f19603f3d011682016040523d82523d6000602084013e610ddf565b606091505b5050505b86600960008781526020019081526020016000206000828254610e0691906132e6565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e6d91906132e6565b9250508190555080600280016000828254610e8891906132e6565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160011515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf81604051610f3891906134f6565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1685604051610f88906133d9565b60006040518083038185875af1925050503d8060008114610fc5576040519150601f19603f3d011682016040523d82523d6000602084013e610fca565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff1685604051610ff4906133d9565b60006040518083038185875af1925050503d8060008114611031576040519150601f19603f3d011682016040523d82523d6000602084013e611036565b606091505b505090508180156110445750805b611083576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107a9061355e565b60405180910390fd5b50505050505050505050505050565b60085481565b816001808111156110ac576110ab612e0c565b5b8160018111156110bf576110be612e0c565b5b146110ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f690612e98565b60405180910390fd5b6111076127e8565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611199576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611190906131c8565b60405180910390fd5b600082116111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d390613234565b60405180910390fd5b60006111e986868661077e565b905082600a600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561127e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611275906135ca565b60405180910390fd5b6002600101548114156112c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bd9061365c565b60405180910390fd5b60006112f08460096000858152602001908152602001600020546112ea9190613122565b85611ba2565b90506000670de0b6b3a76400006006548361130b9190613068565b61131591906130f1565b90506000670de0b6b3a7640000600754846113309190613068565b61133a91906130f1565b90506000600260000160009054906101000a900460ff1661135c57600061137e565b670de0b6b3a7640000600854856113739190613068565b61137d91906130f1565b5b9050866009600087815260200190815260200160002060008282546113a39190613122565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461140a9190613122565b925050819055508060028001600082825461142591906132e6565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160001515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf816040516114d591906134f6565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1685604051611525906133d9565b60006040518083038185875af1925050503d8060008114611562576040519150601f19603f3d011682016040523d82523d6000602084013e611567565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff1685604051611591906133d9565b60006040518083038185875af1925050503d80600081146115ce576040519150601f19603f3d011682016040523d82523d6000602084013e6115d3565b606091505b505090508180156115e15750805b611620576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116179061355e565b60405180910390fd5b60008486888a6116309190613122565b61163a9190613122565b6116449190613122565b905060003373ffffffffffffffffffffffffffffffffffffffff168260405161166c906133d9565b60006040518083038185875af1925050503d80600081146116a9576040519150601f19603f3d011682016040523d82523d6000602084013e6116ae565b606091505b50509050806116f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e99061355e565b60405180910390fd5b50505050505050505050611704612838565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166117bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b4906136ee565b60405180910390fd5b600260000160009054906101000a900460ff1615611810576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118079061375a565b60405180910390fd5b600260000160019054906101000a900460ff16611862576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611859906137c6565b60405180910390fd5b6000600260000160016101000a81548160ff0219169083151502179055506000801b600260010181905550565b6000826001808111156118a5576118a4612e0c565b5b8160018111156118b8576118b7612e0c565b5b146118f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ef90612e98565b60405180910390fd5b600061190587878761077e565b9050600a600082815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505050949350505050565b61196c612841565b8060078190555050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f9906136ee565b60405180910390fd5b80600180811115611a1657611a15612e0c565b5b816001811115611a2957611a28612e0c565b5b14611a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6090612e98565b60405180910390fd5b600260000160009054906101000a900460ff16611abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab290613832565b60405180910390fd5b600260000160019054906101000a900460ff1615611b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b059061389e565b60405180910390fd5b6000611b1b85858561077e565b9050806002600101819055506001600260000160016101000a81548160ff0219169083151502179055506000600260000160006101000a81548160ff021916908315150217905550611b8160006009600084815260200190815260200160002054611ba2565b600280016000828254611b9491906132e6565b925050819055505050505050565b60008083148015611bb35750600082145b15611bc15760009050611cef565b6000808414611c2157600660018086611bda9190613122565b6002611be69190613068565b611bf091906132e6565b85600187611bfe9190613122565b611c089190613068565b611c129190613068565b611c1c91906130f1565b611c24565b60005b905060008085148015611c375750600184145b611cb35760066001808787611c4c91906132e6565b611c569190613122565b6002611c629190613068565b611c6c91906132e6565b8587611c7891906132e6565b60018888611c8691906132e6565b611c909190613122565b611c9a9190613068565b611ca49190613068565b611cae91906130f1565b611cb6565b60005b905060008282611cc69190613122565b9050617d00670de0b6b3a764000082611cdf9190613068565b611ce991906130f1565b93505050505b92915050565b611cfd612841565b611d0760006128bf565b565b6000600260000160019054906101000a900460ff16611d2b5760009050611dd7565b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611dcb5781600a6000600260010154815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611dbc9190613068565b611dc691906130f1565b611dce565b60005b90508093505050505b919050565b600081600180811115611df257611df1612e0c565b5b816001811115611e0557611e04612e0c565b5b14611e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3c90612e98565b60405180910390fd5b6000611e5286868661077e565b90506009600082815260200190815260200160002054925050509392505050565b611e7b6127e8565b600260000160019054906101000a900460ff16611ecd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec490613930565b60405180910390fd5b6000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5c906139c2565b60405180910390fd5b600060028001549050600060096000600260010154815260200190815260200160002054905060008082146120055781600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611ff69190613068565b61200091906130f1565b612008565b60005b90506000811161204d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204490613a2e565b60405180910390fd5b600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460096000600260010154815260200190815260200160002060008282546120ca9190613122565b925050819055506000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806002800160008282546121409190613122565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a68260405161218d9190612b46565b60405180910390a260003373ffffffffffffffffffffffffffffffffffffffff16826040516121bb906133d9565b60006040518083038185875af1925050503d80600081146121f8576040519150601f19603f3d011682016040523d82523d6000602084013e6121fd565b606091505b5050905080612241576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122389061355e565b60405180910390fd5b5050505061224d612838565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612280612841565b8060068190555050565b612292612841565b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008260018081111561230357612302612e0c565b5b81600181111561231657612315612e0c565b5b14612356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234d90612e98565b60405180910390fd5b600061236387878761077e565b905060006009600083815260200190815260200160002054905084811015612390576000935050506123aa565b6123a5858261239f9190613122565b86611ba2565b935050505b50949350505050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661243f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612436906136ee565b60405180910390fd5b600260000160009054906101000a900460ff1615612492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248990613a9a565b60405180910390fd5b600260000160019054906101000a900460ff16156124e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124dc90613b06565b60405180910390fd5b60405180608001604052806001151581526020016000151581526020016000801b81526020016000815250600260008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001015560608201518160020155905050565b600b6020528060005260406000206000915054906101000a900460ff1681565b60065481565b60096020528060005260406000206000915090505481565b6000826001808111156125bf576125be612e0c565b5b8160018111156125d2576125d1612e0c565b5b14612612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260990612e98565b60405180910390fd5b600061262087878787610861565b90506000670de0b6b3a76400006006548361263b9190613068565b61264591906130f1565b90506000670de0b6b3a7640000600754846126609190613068565b61266a91906130f1565b90506000600260000160009054906101000a900460ff1661268c5760006126ae565b670de0b6b3a7640000600854856126a39190613068565b6126ad91906130f1565b5b9050808284866126be91906132e6565b6126c891906132e6565b6126d291906132e6565b95505050505050949350505050565b6126e9612841565b8060088190555050565b6126fb612841565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561276b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276290613b98565b60405180910390fd5b612774816128bf565b50565b61277f612841565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a602052816000526040600020602052806000526040600020600091509150505481565b6002600154141561282e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282590613c04565b60405180910390fd5b6002600181905550565b60018081905550565b612849612983565b73ffffffffffffffffffffffffffffffffffffffff1661286761224f565b73ffffffffffffffffffffffffffffffffffffffff16146128bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b490613c70565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129bb82612990565b9050919050565b6129cb816129b0565b81146129d657600080fd5b50565b6000813590506129e8816129c2565b92915050565b6000819050919050565b612a01816129ee565b8114612a0c57600080fd5b50565b600081359050612a1e816129f8565b92915050565b60028110612a3157600080fd5b50565b600081359050612a4381612a24565b92915050565b600080600060608486031215612a6257612a6161298b565b5b6000612a70868287016129d9565b9350506020612a8186828701612a0f565b9250506040612a9286828701612a34565b9150509250925092565b6000819050919050565b612aaf81612a9c565b82525050565b6000602082019050612aca6000830184612aa6565b92915050565b60008060008060808587031215612aea57612ae961298b565b5b6000612af8878288016129d9565b9450506020612b0987828801612a0f565b9350506040612b1a87828801612a34565b9250506060612b2b87828801612a0f565b91505092959194509250565b612b40816129ee565b82525050565b6000602082019050612b5b6000830184612b37565b92915050565b60008115159050919050565b612b7681612b61565b82525050565b6000608082019050612b916000830187612b6d565b612b9e6020830186612b6d565b612bab6040830185612aa6565b612bb86060830184612b37565b95945050505050565b612bca816129b0565b82525050565b6000602082019050612be56000830184612bc1565b92915050565b60008060008060808587031215612c0557612c0461298b565b5b6000612c13878288016129d9565b9450506020612c2487828801612a0f565b9350506040612c3587828801612a34565b9250506060612c46878288016129d9565b91505092959194509250565b600060208284031215612c6857612c6761298b565b5b6000612c7684828501612a0f565b91505092915050565b60008060408385031215612c9657612c9561298b565b5b6000612ca485828601612a0f565b9250506020612cb585828601612a0f565b9150509250929050565b600060208284031215612cd557612cd461298b565b5b6000612ce3848285016129d9565b91505092915050565b612cf581612b61565b8114612d0057600080fd5b50565b600081359050612d1281612cec565b92915050565b60008060408385031215612d2f57612d2e61298b565b5b6000612d3d858286016129d9565b9250506020612d4e85828601612d03565b9150509250929050565b6000602082019050612d6d6000830184612b6d565b92915050565b612d7c81612a9c565b8114612d8757600080fd5b50565b600081359050612d9981612d73565b92915050565b600060208284031215612db557612db461298b565b5b6000612dc384828501612d8a565b91505092915050565b60008060408385031215612de357612de261298b565b5b6000612df185828601612d8a565b9250506020612e02858286016129d9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f496e76616c6964206576656e7420747970650000000000000000000000000000600082015250565b6000612e82601283612e3b565b9150612e8d82612e4c565b602082019050919050565b60006020820190508181036000830152612eb181612e75565b9050919050565b7f4944206d757374206265206c657373207468616e2031206d696c6c696f6e0000600082015250565b6000612eee601e83612e3b565b9150612ef982612eb8565b602082019050919050565b60006020820190508181036000830152612f1d81612ee1565b9050919050565b60008160601b9050919050565b6000612f3c82612f24565b9050919050565b6000612f4e82612f31565b9050919050565b612f66612f61826129b0565b612f43565b82525050565b6000819050919050565b612f87612f82826129ee565b612f6c565b82525050565b60028110612f9e57612f9d612e0c565b5b50565b6000819050612faf82612f8d565b919050565b6000612fbf82612fa1565b9050919050565b60008160f81b9050919050565b6000612fde82612fc6565b9050919050565b612ff6612ff182612fb4565b612fd3565b82525050565b60006130088286612f55565b6014820191506130188285612f76565b6020820191506130288284612fe5565b600182019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613073826129ee565b915061307e836129ee565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156130b7576130b6613039565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130fc826129ee565b9150613107836129ee565b925082613117576131166130c2565b5b828204905092915050565b600061312d826129ee565b9150613138836129ee565b92508282101561314b5761314a613039565b5b828203905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b60006131b2602a83612e3b565b91506131bd82613156565b604082019050919050565b600060208201905081810360008301526131e1816131a5565b9050919050565b7f43616e6e6f7420627579207a65726f2062616467657300000000000000000000600082015250565b600061321e601683612e3b565b9150613229826131e8565b602082019050919050565b6000602082019050818103600083015261324d81613211565b9050919050565b7f43616e6e6f74206275792077696e6e696e6720626164676520647572696e672060008201527f7061796f75742070686173650000000000000000000000000000000000000000602082015250565b60006132b0602c83612e3b565b91506132bb82613254565b604082019050919050565b600060208201905081810360008301526132df816132a3565b9050919050565b60006132f1826129ee565b91506132fc836129ee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561333157613330613039565b5b828201905092915050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b6000613372601483612e3b565b915061337d8261333c565b602082019050919050565b600060208201905081810360008301526133a181613365565b9050919050565b600081905092915050565b50565b60006133c36000836133a8565b91506133ce826133b3565b600082019050919050565b60006133e4826133b6565b9150819050919050565b6133f7816129b0565b82525050565b61340681612a9c565b82525050565b61341581612b61565b82525050565b613424816129ee565b82525050565b6101408201600082015161344160008501826133ee565b50602082015161345460208501826133fd565b506040820151613467604085018261340c565b50606082015161347a606085018261341b565b50608082015161348d608085018261341b565b5060a08201516134a060a085018261341b565b5060c08201516134b360c085018261341b565b5060e08201516134c660e085018261341b565b506101008201516134db61010085018261341b565b506101208201516134f061012085018261341b565b50505050565b60006101408201905061350c600083018461342a565b92915050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b6000613548601483612e3b565b915061355382613512565b602082019050919050565b600060208201905081810360008301526135778161353b565b9050919050565b7f496e73756666696369656e742062616467657300000000000000000000000000600082015250565b60006135b4601383612e3b565b91506135bf8261357e565b602082019050919050565b600060208201905081810360008301526135e3816135a7565b9050919050565b7f43616e6e6f742073656c6c2077696e6e696e6720626164676520647572696e6760008201527f207061796f757420706861736500000000000000000000000000000000000000602082015250565b6000613646602d83612e3b565b9150613651826135ea565b604082019050919050565b6000602082019050818103600083015261367581613639565b9050919050565b7f43616c6c6572206973206e6f74206120746f75726e616d656e7420637265617460008201527f6f72000000000000000000000000000000000000000000000000000000000000602082015250565b60006136d8602283612e3b565b91506136e38261367c565b604082019050919050565b60006020820190508181036000830152613707816136cb565b9050919050565b7f546f75726e616d656e74207374696c6c206163746976652e0000000000000000600082015250565b6000613744601883612e3b565b915061374f8261370e565b602082019050919050565b6000602082019050818103600083015261377381613737565b9050919050565b7f57696e6e6572207061796f75747320616c72656164792073746f707065642e00600082015250565b60006137b0601f83612e3b565b91506137bb8261377a565b602082019050919050565b600060208201905081810360008301526137df816137a3565b9050919050565b7f546f75726e616d656e74206973206e6f74206163746976652e00000000000000600082015250565b600061381c601983612e3b565b9150613827826137e6565b602082019050919050565b6000602082019050818103600083015261384b8161380f565b9050919050565b7f57696e6e6572207061796f75747320616c726561647920616c6c6f7765642e00600082015250565b6000613888601f83612e3b565b915061389382613852565b602082019050919050565b600060208201905081810360008301526138b78161387b565b9050919050565b7f57696e6e6572207061796f7574206e6f7420616c6c6f7765642072696768742060008201527f6e6f770000000000000000000000000000000000000000000000000000000000602082015250565b600061391a602383612e3b565b9150613925826138be565b604082019050919050565b600060208201905081810360008301526139498161390d565b9050919050565b7f4e6f205649502062616467657320746f20636c61696d207061796f757420666f60008201527f722e000000000000000000000000000000000000000000000000000000000000602082015250565b60006139ac602283612e3b565b91506139b782613950565b604082019050919050565b600060208201905081810360008301526139db8161399f565b9050919050565b7f4e6f207061796f757420666f7220757365720000000000000000000000000000600082015250565b6000613a18601283612e3b565b9150613a23826139e2565b602082019050919050565b60006020820190508181036000830152613a4781613a0b565b9050919050565b7f546f75726e616d656e7420697320616c7265616479206163746976652e000000600082015250565b6000613a84601d83612e3b565b9150613a8f82613a4e565b602082019050919050565b60006020820190508181036000830152613ab381613a77565b9050919050565b7f57696e6e6572207061796f757473207374696c6c20616c6c6f7765642e000000600082015250565b6000613af0601d83612e3b565b9150613afb82613aba565b602082019050919050565b60006020820190508181036000830152613b1f81613ae3565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613b82602683612e3b565b9150613b8d82613b26565b604082019050919050565b60006020820190508181036000830152613bb181613b75565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613bee601f83612e3b565b9150613bf982613bb8565b602082019050919050565b60006020820190508181036000830152613c1d81613be1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613c5a602083612e3b565b9150613c6582613c24565b602082019050919050565b60006020820190508181036000830152613c8981613c4d565b905091905056fea264697066735822122029d7bf965f8cc0fe7882f4cc1d95dcd4b2cc044ad791f5b30f43bf5ad7c1c45664736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c806372641ecd11610102578063c94892f011610095578063effb67e611610064578063effb67e6146106c6578063f2fde38b146106ef578063fbe5323414610718578063fcebcf5e14610741576101d8565b8063c94892f0146105e4578063d6e6eb9f14610621578063d87986fe1461064c578063e8b9af5114610689576101d8565b8063a4983421116100d1578063a49834211461053e578063ac210a5d14610567578063bb47380a14610590578063bf559d11146105cd576101d8565b806372641ecd14610482578063775c1e5d146104bf5780637788c25f146104fc5780638da5cb5b14610513576101d8565b806348c2dde81161017a5780635a8a764e116101495780635a8a764e146103dc5780635ad92eea146104055780635cf4ee911461042e578063715018a61461046b576101d8565b806348c2dde8146103345780634ce7957c1461035d5780634d633a8f146103885780635564285d1461039f576101d8565b806324dc441d116101b657806324dc441d146102855780633aecedd2146102b0578063451aea50146102ed578063483ccffe14610309576101d8565b80630d734519146101dd57806317798d011461021a5780631e0197e214610257575b600080fd5b3480156101e957600080fd5b5061020460048036038101906101ff9190612a49565b61077e565b6040516102119190612ab5565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c9190612ad0565b610861565b60405161024e9190612b46565b60405180910390f35b34801561026357600080fd5b5061026c610908565b60405161027c9493929190612b7c565b60405180910390f35b34801561029157600080fd5b5061029a610940565b6040516102a79190612b46565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d29190612ad0565b610946565b6040516102e49190612b46565b60405180910390f35b61030760048036038101906103029190612ad0565b610a7e565b005b34801561031557600080fd5b5061031e611092565b60405161032b9190612b46565b60405180910390f35b34801561034057600080fd5b5061035b60048036038101906103569190612ad0565b611098565b005b34801561036957600080fd5b5061037261170b565b60405161037f9190612bd0565b60405180910390f35b34801561039457600080fd5b5061039d611731565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190612beb565b61188f565b6040516103d39190612b46565b60405180910390f35b3480156103e857600080fd5b5061040360048036038101906103fe9190612c52565b611964565b005b34801561041157600080fd5b5061042c60048036038101906104279190612a49565b611976565b005b34801561043a57600080fd5b5061045560048036038101906104509190612c7f565b611ba2565b6040516104629190612b46565b60405180910390f35b34801561047757600080fd5b50610480611cf5565b005b34801561048e57600080fd5b506104a960048036038101906104a49190612cbf565b611d09565b6040516104b69190612b46565b60405180910390f35b3480156104cb57600080fd5b506104e660048036038101906104e19190612a49565b611ddc565b6040516104f39190612b46565b60405180910390f35b34801561050857600080fd5b50610511611e73565b005b34801561051f57600080fd5b5061052861224f565b6040516105359190612bd0565b60405180910390f35b34801561054a57600080fd5b5061056560048036038101906105609190612c52565b612278565b005b34801561057357600080fd5b5061058e60048036038101906105899190612d18565b61228a565b005b34801561059c57600080fd5b506105b760048036038101906105b29190612ad0565b6122ed565b6040516105c49190612b46565b60405180910390f35b3480156105d957600080fd5b506105e26123b3565b005b3480156105f057600080fd5b5061060b60048036038101906106069190612cbf565b61256b565b6040516106189190612d58565b60405180910390f35b34801561062d57600080fd5b5061063661258b565b6040516106439190612b46565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e9190612d9f565b612591565b6040516106809190612b46565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab9190612ad0565b6125a9565b6040516106bd9190612b46565b60405180910390f35b3480156106d257600080fd5b506106ed60048036038101906106e89190612c52565b6126e1565b005b3480156106fb57600080fd5b5061071660048036038101906107119190612cbf565b6126f3565b005b34801561072457600080fd5b5061073f600480360381019061073a9190612cbf565b612777565b005b34801561074d57600080fd5b5061076860048036038101906107639190612dcc565b6127c3565b6040516107759190612b46565b60405180910390f35b60008160018081111561079457610793612e0c565b5b8160018111156107a7576107a6612e0c565b5b146107e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107de90612e98565b60405180910390fd5b620f4240841061082c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082390612f04565b60405180910390fd5b84848460405160200161084193929190612ffc565b604051602081830303815290604052805190602001209150509392505050565b60008260018081111561087757610876612e0c565b5b81600181111561088a57610889612e0c565b5b146108ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c190612e98565b60405180910390fd5b60006108d787878761077e565b90506000600960008381526020019081526020016000205490506108fb8186611ba2565b9350505050949350505050565b60028060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154908060020154905084565b60075481565b60008260018081111561095c5761095b612e0c565b5b81600181111561096f5761096e612e0c565b5b146109af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a690612e98565b60405180910390fd5b60006109bd878787876122ed565b90506000670de0b6b3a7640000600654836109d89190613068565b6109e291906130f1565b90506000670de0b6b3a7640000600754846109fd9190613068565b610a0791906130f1565b90506000600260000160009054906101000a900460ff16610a29576000610a4b565b670de0b6b3a764000060085485610a409190613068565b610a4a91906130f1565b5b905080828486610a5b9190613122565b610a659190613122565b610a6f9190613122565b95505050505050949350505050565b81600180811115610a9257610a91612e0c565b5b816001811115610aa557610aa4612e0c565b5b14610ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adc90612e98565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e906131c8565b60405180910390fd5b60008211610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb190613234565b60405180910390fd5b6000610bc786868661077e565b9050600260010154811415610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c08906132c6565b60405180910390fd5b6000610c30600960008481526020019081526020016000205485611ba2565b90506000670de0b6b3a764000060065483610c4b9190613068565b610c5591906130f1565b90506000670de0b6b3a764000060075484610c709190613068565b610c7a91906130f1565b90506000600260000160009054906101000a900460ff16610c9c576000610cbe565b670de0b6b3a764000060085485610cb39190613068565b610cbd91906130f1565b5b905080828486610cce91906132e6565b610cd891906132e6565b610ce291906132e6565b341015610d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1b90613388565b60405180910390fd5b80828486610d3291906132e6565b610d3c91906132e6565b610d4691906132e6565b341115610de3573373ffffffffffffffffffffffffffffffffffffffff1681838587610d7291906132e6565b610d7c91906132e6565b610d8691906132e6565b34610d919190613122565b604051610d9d906133d9565b60006040518083038185875af1925050503d8060008114610dda576040519150601f19603f3d011682016040523d82523d6000602084013e610ddf565b606091505b5050505b86600960008781526020019081526020016000206000828254610e0691906132e6565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e6d91906132e6565b9250508190555080600280016000828254610e8891906132e6565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160011515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf81604051610f3891906134f6565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1685604051610f88906133d9565b60006040518083038185875af1925050503d8060008114610fc5576040519150601f19603f3d011682016040523d82523d6000602084013e610fca565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff1685604051610ff4906133d9565b60006040518083038185875af1925050503d8060008114611031576040519150601f19603f3d011682016040523d82523d6000602084013e611036565b606091505b505090508180156110445750805b611083576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107a9061355e565b60405180910390fd5b50505050505050505050505050565b60085481565b816001808111156110ac576110ab612e0c565b5b8160018111156110bf576110be612e0c565b5b146110ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f690612e98565b60405180910390fd5b6111076127e8565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611199576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611190906131c8565b60405180910390fd5b600082116111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d390613234565b60405180910390fd5b60006111e986868661077e565b905082600a600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561127e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611275906135ca565b60405180910390fd5b6002600101548114156112c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bd9061365c565b60405180910390fd5b60006112f08460096000858152602001908152602001600020546112ea9190613122565b85611ba2565b90506000670de0b6b3a76400006006548361130b9190613068565b61131591906130f1565b90506000670de0b6b3a7640000600754846113309190613068565b61133a91906130f1565b90506000600260000160009054906101000a900460ff1661135c57600061137e565b670de0b6b3a7640000600854856113739190613068565b61137d91906130f1565b5b9050866009600087815260200190815260200160002060008282546113a39190613122565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461140a9190613122565b925050819055508060028001600082825461142591906132e6565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160001515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf816040516114d591906134f6565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1685604051611525906133d9565b60006040518083038185875af1925050503d8060008114611562576040519150601f19603f3d011682016040523d82523d6000602084013e611567565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff1685604051611591906133d9565b60006040518083038185875af1925050503d80600081146115ce576040519150601f19603f3d011682016040523d82523d6000602084013e6115d3565b606091505b505090508180156115e15750805b611620576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116179061355e565b60405180910390fd5b60008486888a6116309190613122565b61163a9190613122565b6116449190613122565b905060003373ffffffffffffffffffffffffffffffffffffffff168260405161166c906133d9565b60006040518083038185875af1925050503d80600081146116a9576040519150601f19603f3d011682016040523d82523d6000602084013e6116ae565b606091505b50509050806116f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e99061355e565b60405180910390fd5b50505050505050505050611704612838565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166117bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b4906136ee565b60405180910390fd5b600260000160009054906101000a900460ff1615611810576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118079061375a565b60405180910390fd5b600260000160019054906101000a900460ff16611862576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611859906137c6565b60405180910390fd5b6000600260000160016101000a81548160ff0219169083151502179055506000801b600260010181905550565b6000826001808111156118a5576118a4612e0c565b5b8160018111156118b8576118b7612e0c565b5b146118f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ef90612e98565b60405180910390fd5b600061190587878761077e565b9050600a600082815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505050949350505050565b61196c612841565b8060078190555050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f9906136ee565b60405180910390fd5b80600180811115611a1657611a15612e0c565b5b816001811115611a2957611a28612e0c565b5b14611a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6090612e98565b60405180910390fd5b600260000160009054906101000a900460ff16611abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab290613832565b60405180910390fd5b600260000160019054906101000a900460ff1615611b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b059061389e565b60405180910390fd5b6000611b1b85858561077e565b9050806002600101819055506001600260000160016101000a81548160ff0219169083151502179055506000600260000160006101000a81548160ff021916908315150217905550611b8160006009600084815260200190815260200160002054611ba2565b600280016000828254611b9491906132e6565b925050819055505050505050565b60008083148015611bb35750600082145b15611bc15760009050611cef565b6000808414611c2157600660018086611bda9190613122565b6002611be69190613068565b611bf091906132e6565b85600187611bfe9190613122565b611c089190613068565b611c129190613068565b611c1c91906130f1565b611c24565b60005b905060008085148015611c375750600184145b611cb35760066001808787611c4c91906132e6565b611c569190613122565b6002611c629190613068565b611c6c91906132e6565b8587611c7891906132e6565b60018888611c8691906132e6565b611c909190613122565b611c9a9190613068565b611ca49190613068565b611cae91906130f1565b611cb6565b60005b905060008282611cc69190613122565b9050617d00670de0b6b3a764000082611cdf9190613068565b611ce991906130f1565b93505050505b92915050565b611cfd612841565b611d0760006128bf565b565b6000600260000160019054906101000a900460ff16611d2b5760009050611dd7565b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611dcb5781600a6000600260010154815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611dbc9190613068565b611dc691906130f1565b611dce565b60005b90508093505050505b919050565b600081600180811115611df257611df1612e0c565b5b816001811115611e0557611e04612e0c565b5b14611e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3c90612e98565b60405180910390fd5b6000611e5286868661077e565b90506009600082815260200190815260200160002054925050509392505050565b611e7b6127e8565b600260000160019054906101000a900460ff16611ecd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec490613930565b60405180910390fd5b6000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5c906139c2565b60405180910390fd5b600060028001549050600060096000600260010154815260200190815260200160002054905060008082146120055781600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611ff69190613068565b61200091906130f1565b612008565b60005b90506000811161204d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204490613a2e565b60405180910390fd5b600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460096000600260010154815260200190815260200160002060008282546120ca9190613122565b925050819055506000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806002800160008282546121409190613122565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a68260405161218d9190612b46565b60405180910390a260003373ffffffffffffffffffffffffffffffffffffffff16826040516121bb906133d9565b60006040518083038185875af1925050503d80600081146121f8576040519150601f19603f3d011682016040523d82523d6000602084013e6121fd565b606091505b5050905080612241576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122389061355e565b60405180910390fd5b5050505061224d612838565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612280612841565b8060068190555050565b612292612841565b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008260018081111561230357612302612e0c565b5b81600181111561231657612315612e0c565b5b14612356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234d90612e98565b60405180910390fd5b600061236387878761077e565b905060006009600083815260200190815260200160002054905084811015612390576000935050506123aa565b6123a5858261239f9190613122565b86611ba2565b935050505b50949350505050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661243f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612436906136ee565b60405180910390fd5b600260000160009054906101000a900460ff1615612492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248990613a9a565b60405180910390fd5b600260000160019054906101000a900460ff16156124e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124dc90613b06565b60405180910390fd5b60405180608001604052806001151581526020016000151581526020016000801b81526020016000815250600260008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001015560608201518160020155905050565b600b6020528060005260406000206000915054906101000a900460ff1681565b60065481565b60096020528060005260406000206000915090505481565b6000826001808111156125bf576125be612e0c565b5b8160018111156125d2576125d1612e0c565b5b14612612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260990612e98565b60405180910390fd5b600061262087878787610861565b90506000670de0b6b3a76400006006548361263b9190613068565b61264591906130f1565b90506000670de0b6b3a7640000600754846126609190613068565b61266a91906130f1565b90506000600260000160009054906101000a900460ff1661268c5760006126ae565b670de0b6b3a7640000600854856126a39190613068565b6126ad91906130f1565b5b9050808284866126be91906132e6565b6126c891906132e6565b6126d291906132e6565b95505050505050949350505050565b6126e9612841565b8060088190555050565b6126fb612841565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561276b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276290613b98565b60405180910390fd5b612774816128bf565b50565b61277f612841565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a602052816000526040600020602052806000526040600020600091509150505481565b6002600154141561282e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282590613c04565b60405180910390fd5b6002600181905550565b60018081905550565b612849612983565b73ffffffffffffffffffffffffffffffffffffffff1661286761224f565b73ffffffffffffffffffffffffffffffffffffffff16146128bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b490613c70565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129bb82612990565b9050919050565b6129cb816129b0565b81146129d657600080fd5b50565b6000813590506129e8816129c2565b92915050565b6000819050919050565b612a01816129ee565b8114612a0c57600080fd5b50565b600081359050612a1e816129f8565b92915050565b60028110612a3157600080fd5b50565b600081359050612a4381612a24565b92915050565b600080600060608486031215612a6257612a6161298b565b5b6000612a70868287016129d9565b9350506020612a8186828701612a0f565b9250506040612a9286828701612a34565b9150509250925092565b6000819050919050565b612aaf81612a9c565b82525050565b6000602082019050612aca6000830184612aa6565b92915050565b60008060008060808587031215612aea57612ae961298b565b5b6000612af8878288016129d9565b9450506020612b0987828801612a0f565b9350506040612b1a87828801612a34565b9250506060612b2b87828801612a0f565b91505092959194509250565b612b40816129ee565b82525050565b6000602082019050612b5b6000830184612b37565b92915050565b60008115159050919050565b612b7681612b61565b82525050565b6000608082019050612b916000830187612b6d565b612b9e6020830186612b6d565b612bab6040830185612aa6565b612bb86060830184612b37565b95945050505050565b612bca816129b0565b82525050565b6000602082019050612be56000830184612bc1565b92915050565b60008060008060808587031215612c0557612c0461298b565b5b6000612c13878288016129d9565b9450506020612c2487828801612a0f565b9350506040612c3587828801612a34565b9250506060612c46878288016129d9565b91505092959194509250565b600060208284031215612c6857612c6761298b565b5b6000612c7684828501612a0f565b91505092915050565b60008060408385031215612c9657612c9561298b565b5b6000612ca485828601612a0f565b9250506020612cb585828601612a0f565b9150509250929050565b600060208284031215612cd557612cd461298b565b5b6000612ce3848285016129d9565b91505092915050565b612cf581612b61565b8114612d0057600080fd5b50565b600081359050612d1281612cec565b92915050565b60008060408385031215612d2f57612d2e61298b565b5b6000612d3d858286016129d9565b9250506020612d4e85828601612d03565b9150509250929050565b6000602082019050612d6d6000830184612b6d565b92915050565b612d7c81612a9c565b8114612d8757600080fd5b50565b600081359050612d9981612d73565b92915050565b600060208284031215612db557612db461298b565b5b6000612dc384828501612d8a565b91505092915050565b60008060408385031215612de357612de261298b565b5b6000612df185828601612d8a565b9250506020612e02858286016129d9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f496e76616c6964206576656e7420747970650000000000000000000000000000600082015250565b6000612e82601283612e3b565b9150612e8d82612e4c565b602082019050919050565b60006020820190508181036000830152612eb181612e75565b9050919050565b7f4944206d757374206265206c657373207468616e2031206d696c6c696f6e0000600082015250565b6000612eee601e83612e3b565b9150612ef982612eb8565b602082019050919050565b60006020820190508181036000830152612f1d81612ee1565b9050919050565b60008160601b9050919050565b6000612f3c82612f24565b9050919050565b6000612f4e82612f31565b9050919050565b612f66612f61826129b0565b612f43565b82525050565b6000819050919050565b612f87612f82826129ee565b612f6c565b82525050565b60028110612f9e57612f9d612e0c565b5b50565b6000819050612faf82612f8d565b919050565b6000612fbf82612fa1565b9050919050565b60008160f81b9050919050565b6000612fde82612fc6565b9050919050565b612ff6612ff182612fb4565b612fd3565b82525050565b60006130088286612f55565b6014820191506130188285612f76565b6020820191506130288284612fe5565b600182019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613073826129ee565b915061307e836129ee565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156130b7576130b6613039565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130fc826129ee565b9150613107836129ee565b925082613117576131166130c2565b5b828204905092915050565b600061312d826129ee565b9150613138836129ee565b92508282101561314b5761314a613039565b5b828203905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b60006131b2602a83612e3b565b91506131bd82613156565b604082019050919050565b600060208201905081810360008301526131e1816131a5565b9050919050565b7f43616e6e6f7420627579207a65726f2062616467657300000000000000000000600082015250565b600061321e601683612e3b565b9150613229826131e8565b602082019050919050565b6000602082019050818103600083015261324d81613211565b9050919050565b7f43616e6e6f74206275792077696e6e696e6720626164676520647572696e672060008201527f7061796f75742070686173650000000000000000000000000000000000000000602082015250565b60006132b0602c83612e3b565b91506132bb82613254565b604082019050919050565b600060208201905081810360008301526132df816132a3565b9050919050565b60006132f1826129ee565b91506132fc836129ee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561333157613330613039565b5b828201905092915050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b6000613372601483612e3b565b915061337d8261333c565b602082019050919050565b600060208201905081810360008301526133a181613365565b9050919050565b600081905092915050565b50565b60006133c36000836133a8565b91506133ce826133b3565b600082019050919050565b60006133e4826133b6565b9150819050919050565b6133f7816129b0565b82525050565b61340681612a9c565b82525050565b61341581612b61565b82525050565b613424816129ee565b82525050565b6101408201600082015161344160008501826133ee565b50602082015161345460208501826133fd565b506040820151613467604085018261340c565b50606082015161347a606085018261341b565b50608082015161348d608085018261341b565b5060a08201516134a060a085018261341b565b5060c08201516134b360c085018261341b565b5060e08201516134c660e085018261341b565b506101008201516134db61010085018261341b565b506101208201516134f061012085018261341b565b50505050565b60006101408201905061350c600083018461342a565b92915050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b6000613548601483612e3b565b915061355382613512565b602082019050919050565b600060208201905081810360008301526135778161353b565b9050919050565b7f496e73756666696369656e742062616467657300000000000000000000000000600082015250565b60006135b4601383612e3b565b91506135bf8261357e565b602082019050919050565b600060208201905081810360008301526135e3816135a7565b9050919050565b7f43616e6e6f742073656c6c2077696e6e696e6720626164676520647572696e6760008201527f207061796f757420706861736500000000000000000000000000000000000000602082015250565b6000613646602d83612e3b565b9150613651826135ea565b604082019050919050565b6000602082019050818103600083015261367581613639565b9050919050565b7f43616c6c6572206973206e6f74206120746f75726e616d656e7420637265617460008201527f6f72000000000000000000000000000000000000000000000000000000000000602082015250565b60006136d8602283612e3b565b91506136e38261367c565b604082019050919050565b60006020820190508181036000830152613707816136cb565b9050919050565b7f546f75726e616d656e74207374696c6c206163746976652e0000000000000000600082015250565b6000613744601883612e3b565b915061374f8261370e565b602082019050919050565b6000602082019050818103600083015261377381613737565b9050919050565b7f57696e6e6572207061796f75747320616c72656164792073746f707065642e00600082015250565b60006137b0601f83612e3b565b91506137bb8261377a565b602082019050919050565b600060208201905081810360008301526137df816137a3565b9050919050565b7f546f75726e616d656e74206973206e6f74206163746976652e00000000000000600082015250565b600061381c601983612e3b565b9150613827826137e6565b602082019050919050565b6000602082019050818103600083015261384b8161380f565b9050919050565b7f57696e6e6572207061796f75747320616c726561647920616c6c6f7765642e00600082015250565b6000613888601f83612e3b565b915061389382613852565b602082019050919050565b600060208201905081810360008301526138b78161387b565b9050919050565b7f57696e6e6572207061796f7574206e6f7420616c6c6f7765642072696768742060008201527f6e6f770000000000000000000000000000000000000000000000000000000000602082015250565b600061391a602383612e3b565b9150613925826138be565b604082019050919050565b600060208201905081810360008301526139498161390d565b9050919050565b7f4e6f205649502062616467657320746f20636c61696d207061796f757420666f60008201527f722e000000000000000000000000000000000000000000000000000000000000602082015250565b60006139ac602283612e3b565b91506139b782613950565b604082019050919050565b600060208201905081810360008301526139db8161399f565b9050919050565b7f4e6f207061796f757420666f7220757365720000000000000000000000000000600082015250565b6000613a18601283612e3b565b9150613a23826139e2565b602082019050919050565b60006020820190508181036000830152613a4781613a0b565b9050919050565b7f546f75726e616d656e7420697320616c7265616479206163746976652e000000600082015250565b6000613a84601d83612e3b565b9150613a8f82613a4e565b602082019050919050565b60006020820190508181036000830152613ab381613a77565b9050919050565b7f57696e6e6572207061796f757473207374696c6c20616c6c6f7765642e000000600082015250565b6000613af0601d83612e3b565b9150613afb82613aba565b602082019050919050565b60006020820190508181036000830152613b1f81613ae3565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613b82602683612e3b565b9150613b8d82613b26565b604082019050919050565b60006020820190508181036000830152613bb181613b75565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613bee601f83612e3b565b9150613bf982613bb8565b602082019050919050565b60006020820190508181036000830152613c1d81613be1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613c5a602083612e3b565b9150613c6582613c24565b602082019050919050565b60006020820190508181036000830152613c8981613c4d565b905091905056fea264697066735822122029d7bf965f8cc0fe7882f4cc1d95dcd4b2cc044ad791f5b30f43bf5ad7c1c45664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1650,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1795,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "tournament",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Tournament)1771_storage"
      },
      {
        "astId": 1797,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "protocolFeeDestination",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1799,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "protocolFeePercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1801,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "subjectFeePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1803,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "tournamentFeePercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1818,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "vipBadgeSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1824,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "vipBadgeBalance",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1828,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "isTournamentCreator",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Tournament)1771_storage": {
        "encoding": "inplace",
        "label": "struct UnlonelyTournament.Tournament",
        "members": [
          {
            "astId": 1764,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1766,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "isPayoutClaimable",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1768,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "winningBadge",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1770,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "vipPooledEth",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}