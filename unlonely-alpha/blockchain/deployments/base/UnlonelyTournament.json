{
  "address": "0xbDb1Af6F2f3879cAcc5Eb9A2b8c770f7c424a5C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "eventByte",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "isBuy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "badgeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "subjectEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tournamentEthAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pooledEth",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct UnlonelyTournament.TradeInfo",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyVIPBadge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTournamentPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "endTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "generateKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "getHolderBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTournamentPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTournamentCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "selectTournamentWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "enum UnlonelyTournament.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellVIPBadge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "setFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setSubjectFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setTournamentCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setTournamentFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournament",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPayoutClaimable",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "winningBadge",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "vipPooledEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournamentFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vipBadgeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vipBadgeSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "winningBadges",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9648cabc5e7ee0e5aaf6707fc495e2a062d133bb9aff08593bebe5db0921f06e",
  "receipt": {
    "to": null,
    "from": "0x141Edb16C70307Cf2F0f04aF2dDa75423a0E1bEa",
    "contractAddress": "0xbDb1Af6F2f3879cAcc5Eb9A2b8c770f7c424a5C9",
    "transactionIndex": 7,
    "gasUsed": "3708011",
    "logsBloom": "0x
    "blockHash": "0xeccd0138a38f46ccefc35496bd60e56d51b3f2c6a267c14a221aed1d85cc5fff",
    "transactionHash": "0x9648cabc5e7ee0e5aaf6707fc495e2a062d133bb9aff08593bebe5db0921f06e",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 6824995,
        "transactionHash": "0x9648cabc5e7ee0e5aaf6707fc495e2a062d133bb9aff08593bebe5db0921f06e",
        "address": "0xbDb1Af6F2f3879cAcc5Eb9A2b8c770f7c424a5C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000141edb16c70307cf2f0f04af2dda75423a0e1bea"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0xeccd0138a38f46ccefc35496bd60e56d51b3f2c6a267c14a221aed1d85cc5fff"
      }
    ],
    "blockNumber": 6824995,
    "cumulativeGasUsed": "5126414",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "772738717276edefe5b200ab1ee6aafb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"eventByte\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"badgeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tournamentEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pooledEth\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct UnlonelyTournament.TradeInfo\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyVIPBadge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTournamentPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"endTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"generateKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getHolderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTournamentPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTournamentCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"selectTournamentWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"enum UnlonelyTournament.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellVIPBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTournamentCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setTournamentFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournament\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPayoutClaimable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"winningBadge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vipPooledEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipBadgeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vipBadgeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"winningBadges\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnlonelyTournament.sol\":\"UnlonelyTournament\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"contracts/UnlonelyTournament.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract UnlonelyTournament is Ownable, ReentrancyGuard {\\r\\n    // Tournament is a struct that holds the state of a tournament, eventByte key pointing to the winning VIPBadge as well as the vip pooled ETH. Only one tournament is allowed at a time. This is intentional.\\r\\n    \\r\\n    enum EventType {\\r\\n        YayNayVote,\\r\\n        VIPBadge\\r\\n    }\\r\\n\\r\\n    struct Tournament {\\r\\n        bool isActive;\\r\\n        bool isPayoutClaimable;\\r\\n        bytes32 winningBadge;\\r\\n        uint256 vipPooledEth;\\r\\n    }\\r\\n\\r\\n    struct TradeInfo {\\r\\n        address trader;\\r\\n        bytes32 eventByte;\\r\\n        bool isBuy;\\r\\n        uint256 badgeAmount;\\r\\n        uint256 ethAmount;\\r\\n        uint256 protocolEthAmount;\\r\\n        uint256 subjectEthAmount;\\r\\n        uint256 tournamentEthAmount;\\r\\n        uint256 supply;\\r\\n        uint256 pooledEth;\\r\\n    }\\r\\n\\r\\n    Tournament public tournament;\\r\\n\\r\\n    address public protocolFeeDestination;\\r\\n    uint256 public protocolFeePercent;\\r\\n    uint256 public subjectFeePercent;\\r\\n    uint256 public tournamentFeePercent;\\r\\n\\r\\n    event Trade(TradeInfo trade);\\r\\n    event Payout(address indexed voter, uint256 amount);\\r\\n\\r\\n    mapping(bytes32 => uint256) public vipBadgeSupply;\\r\\n    mapping(bytes32 => mapping(address => uint256)) public vipBadgeBalance;\\r\\n    mapping(bytes32 => bool) public winningBadges;\\r\\n    mapping(address => bool) public isTournamentCreator;\\r\\n\\r\\n    modifier onlyTournamentCreator() {\\r\\n        require(isTournamentCreator[msg.sender], \\\"Caller is not a tournament creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validEventType(EventType eventType) {\\r\\n        require(\\r\\n            eventType == EventType.VIPBadge,\\r\\n            \\\"Invalid event type\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        // Set the contract deployer as the initial tournament creator\\r\\n        isTournamentCreator[msg.sender] = true;\\r\\n\\r\\n        protocolFeePercent = 5 * 10**16; // 5%\\r\\n        subjectFeePercent = 5 * 10**16;  // 5%\\r\\n        tournamentFeePercent = 5 * 10**16;  // 5%\\r\\n    }\\r\\n\\r\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\r\\n        protocolFeeDestination = _feeDestination;\\r\\n    }\\r\\n\\r\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        protocolFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        subjectFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setTournamentFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        tournamentFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setTournamentCreator(address creator, bool value) public onlyOwner {\\r\\n        isTournamentCreator[creator] = value;\\r\\n    }\\r\\n\\r\\n\\tfunction generateKey(address streamerAddress, uint256 eventId, EventType eventType) public pure validEventType(eventType) returns (bytes32) {\\r\\n        require(eventId < 1000000, \\\"ID must be less than 1 million\\\");\\r\\n        return keccak256(abi.encodePacked(streamerAddress, eventId, eventType));\\r\\n    }\\r\\n\\r\\n    function getTournamentPayout(address _address) public view returns (uint256){\\r\\n        if (!tournament.isPayoutClaimable) return 0;\\r\\n        uint256 totalPool = tournament.vipPooledEth;\\r\\n        uint256 totalWinningShares = vipBadgeSupply[tournament.winningBadge];\\r\\n        uint256 userPayout = totalWinningShares == 0 ? 0 : (totalPool * vipBadgeBalance[tournament.winningBadge][_address] / totalWinningShares);\\r\\n        return userPayout;\\r\\n    }\\r\\n\\r\\n    function getHolderBalance(address streamerAddress, uint256 eventId, EventType eventType, address holder) public view validEventType(eventType) returns (uint256 balance) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        return vipBadgeBalance[key][holder];\\r\\n    }\\r\\n\\r\\n    function getSupply(address streamerAddress, uint256 eventId, EventType eventType) public view validEventType(eventType) returns (uint256 supply) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        return vipBadgeSupply[key];\\r\\n    }\\r\\n\\r\\n    function getPrice(uint256 supply, uint256 amount) public pure returns (uint256) {\\r\\n        if (supply == 0 && amount == 0) return 0;\\r\\n\\r\\n        uint256 sum1 = supply == 0 ? 0 : (supply - 1) * supply * (2 * (supply - 1) + 1) / 6;\\r\\n        uint256 sum2 = (supply == 0 && amount == 1) ? 0 : (amount + supply - 1) * (supply + amount) * (2 * (amount + supply - 1) + 1) / 6;\\r\\n        uint256 summation = sum2 - sum1;\\r\\n        return summation * 1 ether / 32000;\\r\\n    }\\r\\n\\r\\n    function getBuyPrice(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256 price) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 supply = vipBadgeSupply[key];\\r\\n        return getPrice(supply, amount);\\r\\n    }\\r\\n\\r\\n    function getSellPrice(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256 price) {\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        uint256 supply = vipBadgeSupply[key];\\r\\n        if (supply < amount) return 0;\\r\\n        return getPrice(supply - amount, amount);\\r\\n    }\\r\\n\\r\\n    function getBuyPriceAfterFee(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256) {\\r\\n        uint256 price = getBuyPrice(streamerAddress, eventId, eventType, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? price * tournamentFeePercent / 1 ether : 0;\\r\\n        return price + protocolFee + subjectFee + tournamentFee;\\r\\n    }\\r\\n\\r\\n    function getSellPriceAfterFee(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public view validEventType(eventType) returns (uint256) {\\r\\n        uint256 price = getSellPrice(streamerAddress, eventId, eventType, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? price * tournamentFeePercent / 1 ether : 0;\\r\\n        return price - protocolFee - subjectFee - tournamentFee;\\r\\n    }\\r\\n\\r\\n    function startTournament() public onlyTournamentCreator {\\r\\n        require(!tournament.isActive, \\\"Tournament is already active.\\\");\\r\\n        require(!tournament.isPayoutClaimable, \\\"Winner payouts still allowed.\\\");\\r\\n        tournament = Tournament({\\r\\n            isActive: true,\\r\\n            isPayoutClaimable: false,\\r\\n            winningBadge: bytes32(0),\\r\\n            vipPooledEth: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function selectTournamentWinner(address streamerAddress, uint256 eventId, EventType eventType) public onlyTournamentCreator validEventType(eventType) {\\r\\n        require(tournament.isActive, \\\"Tournament is not active.\\\");\\r\\n        require(!tournament.isPayoutClaimable, \\\"Winner payouts already allowed.\\\");\\r\\n        bytes32 winningBadge = generateKey(streamerAddress, eventId, eventType);\\r\\n        tournament.winningBadge = winningBadge;\\r\\n        tournament.isPayoutClaimable = true;\\r\\n        tournament.isActive = false;\\r\\n        winningBadges[winningBadge] = true;\\r\\n        // winning badge ETH is added to the tournament pool\\r\\n        tournament.vipPooledEth += getPrice(0, vipBadgeSupply[winningBadge]);\\r\\n    }\\r\\n    \\r\\n    function endTournament(address streamerAddress, uint256 eventId, EventType eventType) public onlyTournamentCreator {\\r\\n        require(!tournament.isActive, \\\"Tournament still active.\\\");\\r\\n        require(tournament.isPayoutClaimable, \\\"Winner payouts already stopped.\\\");\\r\\n        if(tournament.vipPooledEth > 0) {\\r\\n            // if funds remain after claims close, split remaining funds between streamer and protocol\\r\\n            bytes32 winningBadge = generateKey(streamerAddress, eventId, eventType);\\r\\n            require(tournament.winningBadge == winningBadge, \\\"Winning badge parameters must match set badge.\\\");\\r\\n            \\r\\n            uint256 remainingPooledEth = tournament.vipPooledEth;\\r\\n            tournament.vipPooledEth = 0;\\r\\n\\r\\n            uint256 streamerFee = remainingPooledEth / 2;\\r\\n            uint256 protocolFee = remainingPooledEth - streamerFee;\\r\\n            (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n            (bool success2, ) = streamerAddress.call{value: streamerFee}(\\\"\\\");\\r\\n            require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        }\\r\\n        tournament.isPayoutClaimable = false;\\r\\n        tournament.winningBadge = bytes32(0);\\r\\n    }\\r\\n\\r\\n    function buyVIPBadge(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public payable validEventType(eventType) {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        require(amount > 0, \\\"Cannot buy zero badges\\\");\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        require(!winningBadges[key], \\\"Winning badges cannot be purchased.\\\");\\r\\n        uint256 price = getPrice(vipBadgeSupply[key], amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? (price * tournamentFeePercent / 1 ether) : 0;  // Assume tournamentFeePercent is defined\\r\\n        require(msg.value >= price + protocolFee + subjectFee + tournamentFee, \\\"Insufficient payment\\\");\\r\\n\\r\\n        if(msg.value > (price + protocolFee + subjectFee + tournamentFee)) {\\r\\n            msg.sender.call{value: msg.value - (price + protocolFee + subjectFee + tournamentFee)}(\\\"\\\");\\r\\n        }\\r\\n\\r\\n        // Update the contract state\\r\\n        vipBadgeSupply[key] += amount;\\r\\n        vipBadgeBalance[key][msg.sender] += amount;\\r\\n        tournament.vipPooledEth += tournamentFee;\\r\\n\\r\\n        TradeInfo memory tradeInfo = TradeInfo({\\r\\n            trader: msg.sender,\\r\\n            eventByte: key,\\r\\n            isBuy: true,\\r\\n            badgeAmount: amount,\\r\\n            ethAmount: price,\\r\\n            protocolEthAmount: protocolFee,\\r\\n            subjectEthAmount: subjectFee,\\r\\n            tournamentEthAmount: tournamentFee,\\r\\n            supply: vipBadgeSupply[key],\\r\\n            pooledEth: tournament.vipPooledEth\\r\\n        });\\r\\n\\r\\n        emit Trade(tradeInfo);\\r\\n\\r\\n        // Send protocol and subject fees\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n\\r\\n    function sellVIPBadge(address streamerAddress, uint256 eventId, EventType eventType, uint256 amount) public validEventType(eventType) nonReentrant {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        require(amount > 0, \\\"Cannot buy zero badges\\\");\\r\\n        bytes32 key = generateKey(streamerAddress, eventId, eventType);\\r\\n        require(vipBadgeBalance[key][msg.sender] >= amount, \\\"Insufficient badges\\\");\\r\\n        require(!winningBadges[key], \\\"Winning badges cannot be sold\\\");\\r\\n        uint256 price = getPrice(vipBadgeSupply[key] - amount, amount);\\r\\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\\r\\n        uint256 tournamentFee = tournament.isActive ? (price * tournamentFeePercent / 1 ether) : 0;  // Assume tournamentFeePercent is defined\\r\\n\\r\\n        // Update the contract state\\r\\n        vipBadgeSupply[key] -= amount;\\r\\n        vipBadgeBalance[key][msg.sender] -= amount;\\r\\n        tournament.vipPooledEth += tournamentFee;\\r\\n\\r\\n        TradeInfo memory tradeInfo = TradeInfo({\\r\\n            trader: msg.sender,\\r\\n            eventByte: key,\\r\\n            isBuy: false,\\r\\n            badgeAmount: amount,\\r\\n            ethAmount: price,\\r\\n            protocolEthAmount: protocolFee,\\r\\n            subjectEthAmount: subjectFee,\\r\\n            tournamentEthAmount: tournamentFee,\\r\\n            supply: vipBadgeSupply[key],\\r\\n            pooledEth: tournament.vipPooledEth\\r\\n        });\\r\\n\\r\\n        emit Trade(tradeInfo);\\r\\n\\r\\n        // Send protocol and subject fees\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        // Send the remaining amount to the seller\\r\\n        uint256 netAmount = price - protocolFee - subjectFee - tournamentFee;\\r\\n        (bool success3, ) = msg.sender.call{value: netAmount}(\\\"\\\");\\r\\n        require(success3, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n\\r\\n    function claimTournamentPayout() public nonReentrant {\\r\\n        require(tournament.isPayoutClaimable, \\\"Winner payout not allowed right now\\\");\\r\\n        require(vipBadgeBalance[tournament.winningBadge][msg.sender] > 0, \\\"No VIP badges to claim payout for.\\\");\\r\\n        uint256 totalPool = tournament.vipPooledEth;\\r\\n        uint256 totalWinningShares = vipBadgeSupply[tournament.winningBadge];\\r\\n        uint256 userPayout = totalWinningShares == 0 ? 0 : (totalPool * vipBadgeBalance[tournament.winningBadge][msg.sender] / totalWinningShares);\\r\\n        require(userPayout > 0, \\\"No payout for user\\\");\\r\\n\\r\\n        // Reset user's shares after distributing\\r\\n        vipBadgeSupply[tournament.winningBadge] -= vipBadgeBalance[tournament.winningBadge][msg.sender];\\r\\n        vipBadgeBalance[tournament.winningBadge][msg.sender] = 0;\\r\\n\\r\\n        // Deduct the user's payout from the sharesSubject's pool\\r\\n        tournament.vipPooledEth -= userPayout;\\r\\n\\r\\n        emit Payout(msg.sender, userPayout);\\r\\n        (bool success, ) = msg.sender.call{value: userPayout}(\\\"\\\");\\r\\n        require(success, \\\"Unable to send funds\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcd9c2e5b6f87cd6f200a3f963c7074dc303d0c3b4ed23212770739a17d23b5bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200003262000026620000c160201b60201c565b620000c960201b60201c565b600180819055506001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555066b1a2bc2ec5000060068190555066b1a2bc2ec5000060078190555066b1a2bc2ec500006008819055506200018d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613fee806200019d6000396000f3fe6080604052600436106101e35760003560e01c8063775c1e5d11610102578063c94892f011610095578063effb67e611610064578063effb67e614610720578063f2fde38b14610749578063fbe5323414610772578063fcebcf5e1461079b576101e3565b8063c94892f01461063e578063d6e6eb9f1461067b578063d87986fe146106a6578063e8b9af51146106e3576101e3565b8063a4983421116100d1578063a498342114610598578063ac210a5d146105c1578063bb47380a146105ea578063bf559d1114610627576101e3565b8063775c1e5d146104f05780637788c25f1461052d5780638da5cb5b146105445780639802978c1461056f576101e3565b806348c2dde81161017a5780635ad92eea116101495780635ad92eea146104365780635cf4ee911461045f578063715018a61461049c57806372641ecd146104b3576101e3565b806348c2dde81461037c5780634ce7957c146103a55780635564285d146103d05780635a8a764e1461040d576101e3565b80632ffd5d85116101b65780632ffd5d85146102bb5780633aecedd2146102f8578063451aea5014610335578063483ccffe14610351576101e3565b80630d734519146101e857806317798d01146102255780631e0197e21461026257806324dc441d14610290575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190612d05565b6107d8565b60405161021c9190612d71565b60405180910390f35b34801561023157600080fd5b5061024c60048036038101906102479190612d8c565b6108bb565b6040516102599190612e02565b60405180910390f35b34801561026e57600080fd5b50610277610962565b6040516102879493929190612e38565b60405180910390f35b34801561029c57600080fd5b506102a561099a565b6040516102b29190612e02565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190612ea9565b6109a0565b6040516102ef9190612ed6565b60405180910390f35b34801561030457600080fd5b5061031f600480360381019061031a9190612d8c565b6109c0565b60405161032c9190612e02565b60405180910390f35b61034f600480360381019061034a9190612d8c565b610af8565b005b34801561035d57600080fd5b50610366611125565b6040516103739190612e02565b60405180910390f35b34801561038857600080fd5b506103a3600480360381019061039e9190612d8c565b61112b565b005b3480156103b157600080fd5b506103ba6117b7565b6040516103c79190612f00565b60405180910390f35b3480156103dc57600080fd5b506103f760048036038101906103f29190612f1b565b6117dd565b6040516104049190612e02565b60405180910390f35b34801561041957600080fd5b50610434600480360381019061042f9190612f82565b6118b2565b005b34801561044257600080fd5b5061045d60048036038101906104589190612d05565b6118c4565b005b34801561046b57600080fd5b5061048660048036038101906104819190612faf565b611b1c565b6040516104939190612e02565b60405180910390f35b3480156104a857600080fd5b506104b1611c6f565b005b3480156104bf57600080fd5b506104da60048036038101906104d59190612fef565b611c83565b6040516104e79190612e02565b60405180910390f35b3480156104fc57600080fd5b5061051760048036038101906105129190612d05565b611d56565b6040516105249190612e02565b60405180910390f35b34801561053957600080fd5b50610542611ded565b005b34801561055057600080fd5b506105596121c9565b6040516105669190612f00565b60405180910390f35b34801561057b57600080fd5b5061059660048036038101906105919190612d05565b6121f2565b005b3480156105a457600080fd5b506105bf60048036038101906105ba9190612f82565b612534565b005b3480156105cd57600080fd5b506105e860048036038101906105e39190613048565b612546565b005b3480156105f657600080fd5b50610611600480360381019061060c9190612d8c565b6125a9565b60405161061e9190612e02565b60405180910390f35b34801561063357600080fd5b5061063c61266f565b005b34801561064a57600080fd5b5061066560048036038101906106609190612fef565b612827565b6040516106729190612ed6565b60405180910390f35b34801561068757600080fd5b50610690612847565b60405161069d9190612e02565b60405180910390f35b3480156106b257600080fd5b506106cd60048036038101906106c89190612ea9565b61284d565b6040516106da9190612e02565b60405180910390f35b3480156106ef57600080fd5b5061070a60048036038101906107059190612d8c565b612865565b6040516107179190612e02565b60405180910390f35b34801561072c57600080fd5b5061074760048036038101906107429190612f82565b61299d565b005b34801561075557600080fd5b50610770600480360381019061076b9190612fef565b6129af565b005b34801561077e57600080fd5b5061079960048036038101906107949190612fef565b612a33565b005b3480156107a757600080fd5b506107c260048036038101906107bd9190613088565b612a7f565b6040516107cf9190612e02565b60405180910390f35b6000816001808111156107ee576107ed6130c8565b5b816001811115610801576108006130c8565b5b14610841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083890613154565b60405180910390fd5b620f42408410610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d906131c0565b60405180910390fd5b84848460405160200161089b939291906132b8565b604051602081830303815290604052805190602001209150509392505050565b6000826001808111156108d1576108d06130c8565b5b8160018111156108e4576108e36130c8565b5b14610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b90613154565b60405180910390fd5b60006109318787876107d8565b90506000600960008381526020019081526020016000205490506109558186611b1c565b9350505050949350505050565b60028060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154908060020154905084565b60075481565b600b6020528060005260406000206000915054906101000a900460ff1681565b6000826001808111156109d6576109d56130c8565b5b8160018111156109e9576109e86130c8565b5b14610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2090613154565b60405180910390fd5b6000610a37878787876125a9565b90506000670de0b6b3a764000060065483610a529190613324565b610a5c91906133ad565b90506000670de0b6b3a764000060075484610a779190613324565b610a8191906133ad565b90506000600260000160009054906101000a900460ff16610aa3576000610ac5565b670de0b6b3a764000060085485610aba9190613324565b610ac491906133ad565b5b905080828486610ad591906133de565b610adf91906133de565b610ae991906133de565b95505050505050949350505050565b81600180811115610b0c57610b0b6130c8565b5b816001811115610b1f57610b1e6130c8565b5b14610b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5690613154565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be890613484565b60405180910390fd5b60008211610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b906134f0565b60405180910390fd5b6000610c418686866107d8565b9050600b600082815260200190815260200160002060009054906101000a900460ff1615610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90613582565b60405180910390fd5b6000610cc3600960008481526020019081526020016000205485611b1c565b90506000670de0b6b3a764000060065483610cde9190613324565b610ce891906133ad565b90506000670de0b6b3a764000060075484610d039190613324565b610d0d91906133ad565b90506000600260000160009054906101000a900460ff16610d2f576000610d51565b670de0b6b3a764000060085485610d469190613324565b610d5091906133ad565b5b905080828486610d6191906135a2565b610d6b91906135a2565b610d7591906135a2565b341015610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae90613644565b60405180910390fd5b80828486610dc591906135a2565b610dcf91906135a2565b610dd991906135a2565b341115610e76573373ffffffffffffffffffffffffffffffffffffffff1681838587610e0591906135a2565b610e0f91906135a2565b610e1991906135a2565b34610e2491906133de565b604051610e3090613695565b60006040518083038185875af1925050503d8060008114610e6d576040519150601f19603f3d011682016040523d82523d6000602084013e610e72565b606091505b5050505b86600960008781526020019081526020016000206000828254610e9991906135a2565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f0091906135a2565b9250508190555080600280016000828254610f1b91906135a2565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160011515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf81604051610fcb91906137b2565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168560405161101b90613695565b60006040518083038185875af1925050503d8060008114611058576040519150601f19603f3d011682016040523d82523d6000602084013e61105d565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff168560405161108790613695565b60006040518083038185875af1925050503d80600081146110c4576040519150601f19603f3d011682016040523d82523d6000602084013e6110c9565b606091505b505090508180156110d75750805b611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110d9061381a565b60405180910390fd5b50505050505050505050505050565b60085481565b8160018081111561113f5761113e6130c8565b5b816001811115611152576111516130c8565b5b14611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990613154565b60405180910390fd5b61119a612aa4565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390613484565b60405180910390fd5b6000821161126f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611266906134f0565b60405180910390fd5b600061127c8686866107d8565b905082600a600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130890613886565b60405180910390fd5b600b600082815260200190815260200160002060009054906101000a900460ff1615611372576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611369906138f2565b60405180910390fd5b600061139c84600960008581526020019081526020016000205461139691906133de565b85611b1c565b90506000670de0b6b3a7640000600654836113b79190613324565b6113c191906133ad565b90506000670de0b6b3a7640000600754846113dc9190613324565b6113e691906133ad565b90506000600260000160009054906101000a900460ff1661140857600061142a565b670de0b6b3a76400006008548561141f9190613324565b61142991906133ad565b5b90508660096000878152602001908152602001600020600082825461144f91906133de565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b691906133de565b92505081905550806002800160008282546114d191906135a2565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160001515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf8160405161158191906137b2565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16856040516115d190613695565b60006040518083038185875af1925050503d806000811461160e576040519150601f19603f3d011682016040523d82523d6000602084013e611613565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff168560405161163d90613695565b60006040518083038185875af1925050503d806000811461167a576040519150601f19603f3d011682016040523d82523d6000602084013e61167f565b606091505b5050905081801561168d5750805b6116cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c39061381a565b60405180910390fd5b60008486888a6116dc91906133de565b6116e691906133de565b6116f091906133de565b905060003373ffffffffffffffffffffffffffffffffffffffff168260405161171890613695565b60006040518083038185875af1925050503d8060008114611755576040519150601f19603f3d011682016040523d82523d6000602084013e61175a565b606091505b505090508061179e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117959061381a565b60405180910390fd5b505050505050505050506117b0612af4565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000826001808111156117f3576117f26130c8565b5b816001811115611806576118056130c8565b5b14611846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183d90613154565b60405180910390fd5b60006118538787876107d8565b9050600a600082815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505050949350505050565b6118ba612afd565b8060078190555050565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194790613984565b60405180910390fd5b80600180811115611964576119636130c8565b5b816001811115611977576119766130c8565b5b146119b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ae90613154565b60405180910390fd5b600260000160009054906101000a900460ff16611a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a00906139f0565b60405180910390fd5b600260000160019054906101000a900460ff1615611a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5390613a5c565b60405180910390fd5b6000611a698585856107d8565b9050806002600101819055506001600260000160016101000a81548160ff0219169083151502179055506000600260000160006101000a81548160ff0219169083151502179055506001600b600083815260200190815260200160002060006101000a81548160ff021916908315150217905550611afb60006009600084815260200190815260200160002054611b1c565b600280016000828254611b0e91906135a2565b925050819055505050505050565b60008083148015611b2d5750600082145b15611b3b5760009050611c69565b6000808414611b9b57600660018086611b5491906133de565b6002611b609190613324565b611b6a91906135a2565b85600187611b7891906133de565b611b829190613324565b611b8c9190613324565b611b9691906133ad565b611b9e565b60005b905060008085148015611bb15750600184145b611c2d5760066001808787611bc691906135a2565b611bd091906133de565b6002611bdc9190613324565b611be691906135a2565b8587611bf291906135a2565b60018888611c0091906135a2565b611c0a91906133de565b611c149190613324565b611c1e9190613324565b611c2891906133ad565b611c30565b60005b905060008282611c4091906133de565b9050617d00670de0b6b3a764000082611c599190613324565b611c6391906133ad565b93505050505b92915050565b611c77612afd565b611c816000612b7b565b565b6000600260000160019054906101000a900460ff16611ca55760009050611d51565b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611d455781600a6000600260010154815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611d369190613324565b611d4091906133ad565b611d48565b60005b90508093505050505b919050565b600081600180811115611d6c57611d6b6130c8565b5b816001811115611d7f57611d7e6130c8565b5b14611dbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db690613154565b60405180910390fd5b6000611dcc8686866107d8565b90506009600082815260200190815260200160002054925050509392505050565b611df5612aa4565b600260000160019054906101000a900460ff16611e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3e90613aee565b60405180910390fd5b6000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed690613b80565b60405180910390fd5b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611f7f5781600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611f709190613324565b611f7a91906133ad565b611f82565b60005b905060008111611fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbe90613bec565b60405180910390fd5b600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600960006002600101548152602001908152602001600020600082825461204491906133de565b925050819055506000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806002800160008282546120ba91906133de565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a6826040516121079190612e02565b60405180910390a260003373ffffffffffffffffffffffffffffffffffffffff168260405161213590613695565b60006040518083038185875af1925050503d8060008114612172576040519150601f19603f3d011682016040523d82523d6000602084013e612177565b606091505b50509050806121bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b29061381a565b60405180910390fd5b505050506121c7612af4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661227e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227590613984565b60405180910390fd5b600260000160009054906101000a900460ff16156122d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c890613c58565b60405180910390fd5b600260000160019054906101000a900460ff16612323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231a90613cc4565b60405180910390fd5b60006002800154111561250457600061233d8484846107d8565b90508060026001015414612386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237d90613d56565b60405180910390fd5b6000600280015490506000600280018190555060006002826123a891906133ad565b9050600081836123b891906133de565b90506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161240290613695565b60006040518083038185875af1925050503d806000811461243f576040519150601f19603f3d011682016040523d82523d6000602084013e612444565b606091505b5050905060008873ffffffffffffffffffffffffffffffffffffffff168460405161246e90613695565b60006040518083038185875af1925050503d80600081146124ab576040519150601f19603f3d011682016040523d82523d6000602084013e6124b0565b606091505b505090508180156124be5750805b6124fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f49061381a565b60405180910390fd5b5050505050505b6000600260000160016101000a81548160ff0219169083151502179055506000801b600260010181905550505050565b61253c612afd565b8060068190555050565b61254e612afd565b80600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000826001808111156125bf576125be6130c8565b5b8160018111156125d2576125d16130c8565b5b14612612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260990613154565b60405180910390fd5b600061261f8787876107d8565b90506000600960008381526020019081526020016000205490508481101561264c57600093505050612666565b612661858261265b91906133de565b86611b1c565b935050505b50949350505050565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166126fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f290613984565b60405180910390fd5b600260000160009054906101000a900460ff161561274e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274590613dc2565b60405180910390fd5b600260000160019054906101000a900460ff16156127a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279890613e2e565b60405180910390fd5b60405180608001604052806001151581526020016000151581526020016000801b81526020016000815250600260008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001015560608201518160020155905050565b600c6020528060005260406000206000915054906101000a900460ff1681565b60065481565b60096020528060005260406000206000915090505481565b60008260018081111561287b5761287a6130c8565b5b81600181111561288e5761288d6130c8565b5b146128ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c590613154565b60405180910390fd5b60006128dc878787876108bb565b90506000670de0b6b3a7640000600654836128f79190613324565b61290191906133ad565b90506000670de0b6b3a76400006007548461291c9190613324565b61292691906133ad565b90506000600260000160009054906101000a900460ff1661294857600061296a565b670de0b6b3a76400006008548561295f9190613324565b61296991906133ad565b5b90508082848661297a91906135a2565b61298491906135a2565b61298e91906135a2565b95505050505050949350505050565b6129a5612afd565b8060088190555050565b6129b7612afd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1e90613ec0565b60405180910390fd5b612a3081612b7b565b50565b612a3b612afd565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a602052816000526040600020602052806000526040600020600091509150505481565b60026001541415612aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae190613f2c565b60405180910390fd5b6002600181905550565b60018081905550565b612b05612c3f565b73ffffffffffffffffffffffffffffffffffffffff16612b236121c9565b73ffffffffffffffffffffffffffffffffffffffff1614612b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7090613f98565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c7782612c4c565b9050919050565b612c8781612c6c565b8114612c9257600080fd5b50565b600081359050612ca481612c7e565b92915050565b6000819050919050565b612cbd81612caa565b8114612cc857600080fd5b50565b600081359050612cda81612cb4565b92915050565b60028110612ced57600080fd5b50565b600081359050612cff81612ce0565b92915050565b600080600060608486031215612d1e57612d1d612c47565b5b6000612d2c86828701612c95565b9350506020612d3d86828701612ccb565b9250506040612d4e86828701612cf0565b9150509250925092565b6000819050919050565b612d6b81612d58565b82525050565b6000602082019050612d866000830184612d62565b92915050565b60008060008060808587031215612da657612da5612c47565b5b6000612db487828801612c95565b9450506020612dc587828801612ccb565b9350506040612dd687828801612cf0565b9250506060612de787828801612ccb565b91505092959194509250565b612dfc81612caa565b82525050565b6000602082019050612e176000830184612df3565b92915050565b60008115159050919050565b612e3281612e1d565b82525050565b6000608082019050612e4d6000830187612e29565b612e5a6020830186612e29565b612e676040830185612d62565b612e746060830184612df3565b95945050505050565b612e8681612d58565b8114612e9157600080fd5b50565b600081359050612ea381612e7d565b92915050565b600060208284031215612ebf57612ebe612c47565b5b6000612ecd84828501612e94565b91505092915050565b6000602082019050612eeb6000830184612e29565b92915050565b612efa81612c6c565b82525050565b6000602082019050612f156000830184612ef1565b92915050565b60008060008060808587031215612f3557612f34612c47565b5b6000612f4387828801612c95565b9450506020612f5487828801612ccb565b9350506040612f6587828801612cf0565b9250506060612f7687828801612c95565b91505092959194509250565b600060208284031215612f9857612f97612c47565b5b6000612fa684828501612ccb565b91505092915050565b60008060408385031215612fc657612fc5612c47565b5b6000612fd485828601612ccb565b9250506020612fe585828601612ccb565b9150509250929050565b60006020828403121561300557613004612c47565b5b600061301384828501612c95565b91505092915050565b61302581612e1d565b811461303057600080fd5b50565b6000813590506130428161301c565b92915050565b6000806040838503121561305f5761305e612c47565b5b600061306d85828601612c95565b925050602061307e85828601613033565b9150509250929050565b6000806040838503121561309f5761309e612c47565b5b60006130ad85828601612e94565b92505060206130be85828601612c95565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f496e76616c6964206576656e7420747970650000000000000000000000000000600082015250565b600061313e6012836130f7565b915061314982613108565b602082019050919050565b6000602082019050818103600083015261316d81613131565b9050919050565b7f4944206d757374206265206c657373207468616e2031206d696c6c696f6e0000600082015250565b60006131aa601e836130f7565b91506131b582613174565b602082019050919050565b600060208201905081810360008301526131d98161319d565b9050919050565b60008160601b9050919050565b60006131f8826131e0565b9050919050565b600061320a826131ed565b9050919050565b61322261321d82612c6c565b6131ff565b82525050565b6000819050919050565b61324361323e82612caa565b613228565b82525050565b6002811061325a576132596130c8565b5b50565b600081905061326b82613249565b919050565b600061327b8261325d565b9050919050565b60008160f81b9050919050565b600061329a82613282565b9050919050565b6132b26132ad82613270565b61328f565b82525050565b60006132c48286613211565b6014820191506132d48285613232565b6020820191506132e482846132a1565b600182019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061332f82612caa565b915061333a83612caa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613373576133726132f5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133b882612caa565b91506133c383612caa565b9250826133d3576133d261337e565b5b828204905092915050565b60006133e982612caa565b91506133f483612caa565b925082821015613407576134066132f5565b5b828203905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600061346e602a836130f7565b915061347982613412565b604082019050919050565b6000602082019050818103600083015261349d81613461565b9050919050565b7f43616e6e6f7420627579207a65726f2062616467657300000000000000000000600082015250565b60006134da6016836130f7565b91506134e5826134a4565b602082019050919050565b60006020820190508181036000830152613509816134cd565b9050919050565b7f57696e6e696e67206261646765732063616e6e6f74206265207075726368617360008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b600061356c6023836130f7565b915061357782613510565b604082019050919050565b6000602082019050818103600083015261359b8161355f565b9050919050565b60006135ad82612caa565b91506135b883612caa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156135ed576135ec6132f5565b5b828201905092915050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b600061362e6014836130f7565b9150613639826135f8565b602082019050919050565b6000602082019050818103600083015261365d81613621565b9050919050565b600081905092915050565b50565b600061367f600083613664565b915061368a8261366f565b600082019050919050565b60006136a082613672565b9150819050919050565b6136b381612c6c565b82525050565b6136c281612d58565b82525050565b6136d181612e1d565b82525050565b6136e081612caa565b82525050565b610140820160008201516136fd60008501826136aa565b50602082015161371060208501826136b9565b50604082015161372360408501826136c8565b50606082015161373660608501826136d7565b50608082015161374960808501826136d7565b5060a082015161375c60a08501826136d7565b5060c082015161376f60c08501826136d7565b5060e082015161378260e08501826136d7565b506101008201516137976101008501826136d7565b506101208201516137ac6101208501826136d7565b50505050565b6000610140820190506137c860008301846136e6565b92915050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b60006138046014836130f7565b915061380f826137ce565b602082019050919050565b60006020820190508181036000830152613833816137f7565b9050919050565b7f496e73756666696369656e742062616467657300000000000000000000000000600082015250565b60006138706013836130f7565b915061387b8261383a565b602082019050919050565b6000602082019050818103600083015261389f81613863565b9050919050565b7f57696e6e696e67206261646765732063616e6e6f7420626520736f6c64000000600082015250565b60006138dc601d836130f7565b91506138e7826138a6565b602082019050919050565b6000602082019050818103600083015261390b816138cf565b9050919050565b7f43616c6c6572206973206e6f74206120746f75726e616d656e7420637265617460008201527f6f72000000000000000000000000000000000000000000000000000000000000602082015250565b600061396e6022836130f7565b915061397982613912565b604082019050919050565b6000602082019050818103600083015261399d81613961565b9050919050565b7f546f75726e616d656e74206973206e6f74206163746976652e00000000000000600082015250565b60006139da6019836130f7565b91506139e5826139a4565b602082019050919050565b60006020820190508181036000830152613a09816139cd565b9050919050565b7f57696e6e6572207061796f75747320616c726561647920616c6c6f7765642e00600082015250565b6000613a46601f836130f7565b9150613a5182613a10565b602082019050919050565b60006020820190508181036000830152613a7581613a39565b9050919050565b7f57696e6e6572207061796f7574206e6f7420616c6c6f7765642072696768742060008201527f6e6f770000000000000000000000000000000000000000000000000000000000602082015250565b6000613ad86023836130f7565b9150613ae382613a7c565b604082019050919050565b60006020820190508181036000830152613b0781613acb565b9050919050565b7f4e6f205649502062616467657320746f20636c61696d207061796f757420666f60008201527f722e000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b6a6022836130f7565b9150613b7582613b0e565b604082019050919050565b60006020820190508181036000830152613b9981613b5d565b9050919050565b7f4e6f207061796f757420666f7220757365720000000000000000000000000000600082015250565b6000613bd66012836130f7565b9150613be182613ba0565b602082019050919050565b60006020820190508181036000830152613c0581613bc9565b9050919050565b7f546f75726e616d656e74207374696c6c206163746976652e0000000000000000600082015250565b6000613c426018836130f7565b9150613c4d82613c0c565b602082019050919050565b60006020820190508181036000830152613c7181613c35565b9050919050565b7f57696e6e6572207061796f75747320616c72656164792073746f707065642e00600082015250565b6000613cae601f836130f7565b9150613cb982613c78565b602082019050919050565b60006020820190508181036000830152613cdd81613ca1565b9050919050565b7f57696e6e696e6720626164676520706172616d6574657273206d757374206d6160008201527f746368207365742062616467652e000000000000000000000000000000000000602082015250565b6000613d40602e836130f7565b9150613d4b82613ce4565b604082019050919050565b60006020820190508181036000830152613d6f81613d33565b9050919050565b7f546f75726e616d656e7420697320616c7265616479206163746976652e000000600082015250565b6000613dac601d836130f7565b9150613db782613d76565b602082019050919050565b60006020820190508181036000830152613ddb81613d9f565b9050919050565b7f57696e6e6572207061796f757473207374696c6c20616c6c6f7765642e000000600082015250565b6000613e18601d836130f7565b9150613e2382613de2565b602082019050919050565b60006020820190508181036000830152613e4781613e0b565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613eaa6026836130f7565b9150613eb582613e4e565b604082019050919050565b60006020820190508181036000830152613ed981613e9d565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613f16601f836130f7565b9150613f2182613ee0565b602082019050919050565b60006020820190508181036000830152613f4581613f09565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f826020836130f7565b9150613f8d82613f4c565b602082019050919050565b60006020820190508181036000830152613fb181613f75565b905091905056fea2646970667358221220ead28ce90c52dcc70d98b23e9a53ade1eb54bf8d85dfc0e1d2ee522a0e22d08e64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063775c1e5d11610102578063c94892f011610095578063effb67e611610064578063effb67e614610720578063f2fde38b14610749578063fbe5323414610772578063fcebcf5e1461079b576101e3565b8063c94892f01461063e578063d6e6eb9f1461067b578063d87986fe146106a6578063e8b9af51146106e3576101e3565b8063a4983421116100d1578063a498342114610598578063ac210a5d146105c1578063bb47380a146105ea578063bf559d1114610627576101e3565b8063775c1e5d146104f05780637788c25f1461052d5780638da5cb5b146105445780639802978c1461056f576101e3565b806348c2dde81161017a5780635ad92eea116101495780635ad92eea146104365780635cf4ee911461045f578063715018a61461049c57806372641ecd146104b3576101e3565b806348c2dde81461037c5780634ce7957c146103a55780635564285d146103d05780635a8a764e1461040d576101e3565b80632ffd5d85116101b65780632ffd5d85146102bb5780633aecedd2146102f8578063451aea5014610335578063483ccffe14610351576101e3565b80630d734519146101e857806317798d01146102255780631e0197e21461026257806324dc441d14610290575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190612d05565b6107d8565b60405161021c9190612d71565b60405180910390f35b34801561023157600080fd5b5061024c60048036038101906102479190612d8c565b6108bb565b6040516102599190612e02565b60405180910390f35b34801561026e57600080fd5b50610277610962565b6040516102879493929190612e38565b60405180910390f35b34801561029c57600080fd5b506102a561099a565b6040516102b29190612e02565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190612ea9565b6109a0565b6040516102ef9190612ed6565b60405180910390f35b34801561030457600080fd5b5061031f600480360381019061031a9190612d8c565b6109c0565b60405161032c9190612e02565b60405180910390f35b61034f600480360381019061034a9190612d8c565b610af8565b005b34801561035d57600080fd5b50610366611125565b6040516103739190612e02565b60405180910390f35b34801561038857600080fd5b506103a3600480360381019061039e9190612d8c565b61112b565b005b3480156103b157600080fd5b506103ba6117b7565b6040516103c79190612f00565b60405180910390f35b3480156103dc57600080fd5b506103f760048036038101906103f29190612f1b565b6117dd565b6040516104049190612e02565b60405180910390f35b34801561041957600080fd5b50610434600480360381019061042f9190612f82565b6118b2565b005b34801561044257600080fd5b5061045d60048036038101906104589190612d05565b6118c4565b005b34801561046b57600080fd5b5061048660048036038101906104819190612faf565b611b1c565b6040516104939190612e02565b60405180910390f35b3480156104a857600080fd5b506104b1611c6f565b005b3480156104bf57600080fd5b506104da60048036038101906104d59190612fef565b611c83565b6040516104e79190612e02565b60405180910390f35b3480156104fc57600080fd5b5061051760048036038101906105129190612d05565b611d56565b6040516105249190612e02565b60405180910390f35b34801561053957600080fd5b50610542611ded565b005b34801561055057600080fd5b506105596121c9565b6040516105669190612f00565b60405180910390f35b34801561057b57600080fd5b5061059660048036038101906105919190612d05565b6121f2565b005b3480156105a457600080fd5b506105bf60048036038101906105ba9190612f82565b612534565b005b3480156105cd57600080fd5b506105e860048036038101906105e39190613048565b612546565b005b3480156105f657600080fd5b50610611600480360381019061060c9190612d8c565b6125a9565b60405161061e9190612e02565b60405180910390f35b34801561063357600080fd5b5061063c61266f565b005b34801561064a57600080fd5b5061066560048036038101906106609190612fef565b612827565b6040516106729190612ed6565b60405180910390f35b34801561068757600080fd5b50610690612847565b60405161069d9190612e02565b60405180910390f35b3480156106b257600080fd5b506106cd60048036038101906106c89190612ea9565b61284d565b6040516106da9190612e02565b60405180910390f35b3480156106ef57600080fd5b5061070a60048036038101906107059190612d8c565b612865565b6040516107179190612e02565b60405180910390f35b34801561072c57600080fd5b5061074760048036038101906107429190612f82565b61299d565b005b34801561075557600080fd5b50610770600480360381019061076b9190612fef565b6129af565b005b34801561077e57600080fd5b5061079960048036038101906107949190612fef565b612a33565b005b3480156107a757600080fd5b506107c260048036038101906107bd9190613088565b612a7f565b6040516107cf9190612e02565b60405180910390f35b6000816001808111156107ee576107ed6130c8565b5b816001811115610801576108006130c8565b5b14610841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083890613154565b60405180910390fd5b620f42408410610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d906131c0565b60405180910390fd5b84848460405160200161089b939291906132b8565b604051602081830303815290604052805190602001209150509392505050565b6000826001808111156108d1576108d06130c8565b5b8160018111156108e4576108e36130c8565b5b14610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b90613154565b60405180910390fd5b60006109318787876107d8565b90506000600960008381526020019081526020016000205490506109558186611b1c565b9350505050949350505050565b60028060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154908060020154905084565b60075481565b600b6020528060005260406000206000915054906101000a900460ff1681565b6000826001808111156109d6576109d56130c8565b5b8160018111156109e9576109e86130c8565b5b14610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2090613154565b60405180910390fd5b6000610a37878787876125a9565b90506000670de0b6b3a764000060065483610a529190613324565b610a5c91906133ad565b90506000670de0b6b3a764000060075484610a779190613324565b610a8191906133ad565b90506000600260000160009054906101000a900460ff16610aa3576000610ac5565b670de0b6b3a764000060085485610aba9190613324565b610ac491906133ad565b5b905080828486610ad591906133de565b610adf91906133de565b610ae991906133de565b95505050505050949350505050565b81600180811115610b0c57610b0b6130c8565b5b816001811115610b1f57610b1e6130c8565b5b14610b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5690613154565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be890613484565b60405180910390fd5b60008211610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b906134f0565b60405180910390fd5b6000610c418686866107d8565b9050600b600082815260200190815260200160002060009054906101000a900460ff1615610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90613582565b60405180910390fd5b6000610cc3600960008481526020019081526020016000205485611b1c565b90506000670de0b6b3a764000060065483610cde9190613324565b610ce891906133ad565b90506000670de0b6b3a764000060075484610d039190613324565b610d0d91906133ad565b90506000600260000160009054906101000a900460ff16610d2f576000610d51565b670de0b6b3a764000060085485610d469190613324565b610d5091906133ad565b5b905080828486610d6191906135a2565b610d6b91906135a2565b610d7591906135a2565b341015610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae90613644565b60405180910390fd5b80828486610dc591906135a2565b610dcf91906135a2565b610dd991906135a2565b341115610e76573373ffffffffffffffffffffffffffffffffffffffff1681838587610e0591906135a2565b610e0f91906135a2565b610e1991906135a2565b34610e2491906133de565b604051610e3090613695565b60006040518083038185875af1925050503d8060008114610e6d576040519150601f19603f3d011682016040523d82523d6000602084013e610e72565b606091505b5050505b86600960008781526020019081526020016000206000828254610e9991906135a2565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f0091906135a2565b9250508190555080600280016000828254610f1b91906135a2565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160011515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf81604051610fcb91906137b2565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168560405161101b90613695565b60006040518083038185875af1925050503d8060008114611058576040519150601f19603f3d011682016040523d82523d6000602084013e61105d565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff168560405161108790613695565b60006040518083038185875af1925050503d80600081146110c4576040519150601f19603f3d011682016040523d82523d6000602084013e6110c9565b606091505b505090508180156110d75750805b611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110d9061381a565b60405180910390fd5b50505050505050505050505050565b60085481565b8160018081111561113f5761113e6130c8565b5b816001811115611152576111516130c8565b5b14611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990613154565b60405180910390fd5b61119a612aa4565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390613484565b60405180910390fd5b6000821161126f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611266906134f0565b60405180910390fd5b600061127c8686866107d8565b905082600a600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130890613886565b60405180910390fd5b600b600082815260200190815260200160002060009054906101000a900460ff1615611372576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611369906138f2565b60405180910390fd5b600061139c84600960008581526020019081526020016000205461139691906133de565b85611b1c565b90506000670de0b6b3a7640000600654836113b79190613324565b6113c191906133ad565b90506000670de0b6b3a7640000600754846113dc9190613324565b6113e691906133ad565b90506000600260000160009054906101000a900460ff1661140857600061142a565b670de0b6b3a76400006008548561141f9190613324565b61142991906133ad565b5b90508660096000878152602001908152602001600020600082825461144f91906133de565b9250508190555086600a600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b691906133de565b92505081905550806002800160008282546114d191906135a2565b9250508190555060006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160001515815260200189815260200186815260200185815260200184815260200183815260200160096000898152602001908152602001600020548152602001600280015481525090507f1fe0d033a8ccb2084a43d40a54418cd64c5ac77badfaea9dd5a849bf6f7a2adf8160405161158191906137b2565b60405180910390a16000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16856040516115d190613695565b60006040518083038185875af1925050503d806000811461160e576040519150601f19603f3d011682016040523d82523d6000602084013e611613565b606091505b5050905060008c73ffffffffffffffffffffffffffffffffffffffff168560405161163d90613695565b60006040518083038185875af1925050503d806000811461167a576040519150601f19603f3d011682016040523d82523d6000602084013e61167f565b606091505b5050905081801561168d5750805b6116cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c39061381a565b60405180910390fd5b60008486888a6116dc91906133de565b6116e691906133de565b6116f091906133de565b905060003373ffffffffffffffffffffffffffffffffffffffff168260405161171890613695565b60006040518083038185875af1925050503d8060008114611755576040519150601f19603f3d011682016040523d82523d6000602084013e61175a565b606091505b505090508061179e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117959061381a565b60405180910390fd5b505050505050505050506117b0612af4565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000826001808111156117f3576117f26130c8565b5b816001811115611806576118056130c8565b5b14611846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183d90613154565b60405180910390fd5b60006118538787876107d8565b9050600a600082815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505050949350505050565b6118ba612afd565b8060078190555050565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194790613984565b60405180910390fd5b80600180811115611964576119636130c8565b5b816001811115611977576119766130c8565b5b146119b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ae90613154565b60405180910390fd5b600260000160009054906101000a900460ff16611a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a00906139f0565b60405180910390fd5b600260000160019054906101000a900460ff1615611a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5390613a5c565b60405180910390fd5b6000611a698585856107d8565b9050806002600101819055506001600260000160016101000a81548160ff0219169083151502179055506000600260000160006101000a81548160ff0219169083151502179055506001600b600083815260200190815260200160002060006101000a81548160ff021916908315150217905550611afb60006009600084815260200190815260200160002054611b1c565b600280016000828254611b0e91906135a2565b925050819055505050505050565b60008083148015611b2d5750600082145b15611b3b5760009050611c69565b6000808414611b9b57600660018086611b5491906133de565b6002611b609190613324565b611b6a91906135a2565b85600187611b7891906133de565b611b829190613324565b611b8c9190613324565b611b9691906133ad565b611b9e565b60005b905060008085148015611bb15750600184145b611c2d5760066001808787611bc691906135a2565b611bd091906133de565b6002611bdc9190613324565b611be691906135a2565b8587611bf291906135a2565b60018888611c0091906135a2565b611c0a91906133de565b611c149190613324565b611c1e9190613324565b611c2891906133ad565b611c30565b60005b905060008282611c4091906133de565b9050617d00670de0b6b3a764000082611c599190613324565b611c6391906133ad565b93505050505b92915050565b611c77612afd565b611c816000612b7b565b565b6000600260000160019054906101000a900460ff16611ca55760009050611d51565b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611d455781600a6000600260010154815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611d369190613324565b611d4091906133ad565b611d48565b60005b90508093505050505b919050565b600081600180811115611d6c57611d6b6130c8565b5b816001811115611d7f57611d7e6130c8565b5b14611dbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db690613154565b60405180910390fd5b6000611dcc8686866107d8565b90506009600082815260200190815260200160002054925050509392505050565b611df5612aa4565b600260000160019054906101000a900460ff16611e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3e90613aee565b60405180910390fd5b6000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed690613b80565b60405180910390fd5b60006002800154905060006009600060026001015481526020019081526020016000205490506000808214611f7f5781600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611f709190613324565b611f7a91906133ad565b611f82565b60005b905060008111611fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbe90613bec565b60405180910390fd5b600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600960006002600101548152602001908152602001600020600082825461204491906133de565b925050819055506000600a6000600260010154815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806002800160008282546120ba91906133de565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a6826040516121079190612e02565b60405180910390a260003373ffffffffffffffffffffffffffffffffffffffff168260405161213590613695565b60006040518083038185875af1925050503d8060008114612172576040519150601f19603f3d011682016040523d82523d6000602084013e612177565b606091505b50509050806121bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b29061381a565b60405180910390fd5b505050506121c7612af4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661227e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227590613984565b60405180910390fd5b600260000160009054906101000a900460ff16156122d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c890613c58565b60405180910390fd5b600260000160019054906101000a900460ff16612323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231a90613cc4565b60405180910390fd5b60006002800154111561250457600061233d8484846107d8565b90508060026001015414612386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237d90613d56565b60405180910390fd5b6000600280015490506000600280018190555060006002826123a891906133ad565b9050600081836123b891906133de565b90506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161240290613695565b60006040518083038185875af1925050503d806000811461243f576040519150601f19603f3d011682016040523d82523d6000602084013e612444565b606091505b5050905060008873ffffffffffffffffffffffffffffffffffffffff168460405161246e90613695565b60006040518083038185875af1925050503d80600081146124ab576040519150601f19603f3d011682016040523d82523d6000602084013e6124b0565b606091505b505090508180156124be5750805b6124fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f49061381a565b60405180910390fd5b5050505050505b6000600260000160016101000a81548160ff0219169083151502179055506000801b600260010181905550505050565b61253c612afd565b8060068190555050565b61254e612afd565b80600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000826001808111156125bf576125be6130c8565b5b8160018111156125d2576125d16130c8565b5b14612612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260990613154565b60405180910390fd5b600061261f8787876107d8565b90506000600960008381526020019081526020016000205490508481101561264c57600093505050612666565b612661858261265b91906133de565b86611b1c565b935050505b50949350505050565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166126fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f290613984565b60405180910390fd5b600260000160009054906101000a900460ff161561274e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274590613dc2565b60405180910390fd5b600260000160019054906101000a900460ff16156127a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279890613e2e565b60405180910390fd5b60405180608001604052806001151581526020016000151581526020016000801b81526020016000815250600260008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001015560608201518160020155905050565b600c6020528060005260406000206000915054906101000a900460ff1681565b60065481565b60096020528060005260406000206000915090505481565b60008260018081111561287b5761287a6130c8565b5b81600181111561288e5761288d6130c8565b5b146128ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c590613154565b60405180910390fd5b60006128dc878787876108bb565b90506000670de0b6b3a7640000600654836128f79190613324565b61290191906133ad565b90506000670de0b6b3a76400006007548461291c9190613324565b61292691906133ad565b90506000600260000160009054906101000a900460ff1661294857600061296a565b670de0b6b3a76400006008548561295f9190613324565b61296991906133ad565b5b90508082848661297a91906135a2565b61298491906135a2565b61298e91906135a2565b95505050505050949350505050565b6129a5612afd565b8060088190555050565b6129b7612afd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1e90613ec0565b60405180910390fd5b612a3081612b7b565b50565b612a3b612afd565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a602052816000526040600020602052806000526040600020600091509150505481565b60026001541415612aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae190613f2c565b60405180910390fd5b6002600181905550565b60018081905550565b612b05612c3f565b73ffffffffffffffffffffffffffffffffffffffff16612b236121c9565b73ffffffffffffffffffffffffffffffffffffffff1614612b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7090613f98565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c7782612c4c565b9050919050565b612c8781612c6c565b8114612c9257600080fd5b50565b600081359050612ca481612c7e565b92915050565b6000819050919050565b612cbd81612caa565b8114612cc857600080fd5b50565b600081359050612cda81612cb4565b92915050565b60028110612ced57600080fd5b50565b600081359050612cff81612ce0565b92915050565b600080600060608486031215612d1e57612d1d612c47565b5b6000612d2c86828701612c95565b9350506020612d3d86828701612ccb565b9250506040612d4e86828701612cf0565b9150509250925092565b6000819050919050565b612d6b81612d58565b82525050565b6000602082019050612d866000830184612d62565b92915050565b60008060008060808587031215612da657612da5612c47565b5b6000612db487828801612c95565b9450506020612dc587828801612ccb565b9350506040612dd687828801612cf0565b9250506060612de787828801612ccb565b91505092959194509250565b612dfc81612caa565b82525050565b6000602082019050612e176000830184612df3565b92915050565b60008115159050919050565b612e3281612e1d565b82525050565b6000608082019050612e4d6000830187612e29565b612e5a6020830186612e29565b612e676040830185612d62565b612e746060830184612df3565b95945050505050565b612e8681612d58565b8114612e9157600080fd5b50565b600081359050612ea381612e7d565b92915050565b600060208284031215612ebf57612ebe612c47565b5b6000612ecd84828501612e94565b91505092915050565b6000602082019050612eeb6000830184612e29565b92915050565b612efa81612c6c565b82525050565b6000602082019050612f156000830184612ef1565b92915050565b60008060008060808587031215612f3557612f34612c47565b5b6000612f4387828801612c95565b9450506020612f5487828801612ccb565b9350506040612f6587828801612cf0565b9250506060612f7687828801612c95565b91505092959194509250565b600060208284031215612f9857612f97612c47565b5b6000612fa684828501612ccb565b91505092915050565b60008060408385031215612fc657612fc5612c47565b5b6000612fd485828601612ccb565b9250506020612fe585828601612ccb565b9150509250929050565b60006020828403121561300557613004612c47565b5b600061301384828501612c95565b91505092915050565b61302581612e1d565b811461303057600080fd5b50565b6000813590506130428161301c565b92915050565b6000806040838503121561305f5761305e612c47565b5b600061306d85828601612c95565b925050602061307e85828601613033565b9150509250929050565b6000806040838503121561309f5761309e612c47565b5b60006130ad85828601612e94565b92505060206130be85828601612c95565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f496e76616c6964206576656e7420747970650000000000000000000000000000600082015250565b600061313e6012836130f7565b915061314982613108565b602082019050919050565b6000602082019050818103600083015261316d81613131565b9050919050565b7f4944206d757374206265206c657373207468616e2031206d696c6c696f6e0000600082015250565b60006131aa601e836130f7565b91506131b582613174565b602082019050919050565b600060208201905081810360008301526131d98161319d565b9050919050565b60008160601b9050919050565b60006131f8826131e0565b9050919050565b600061320a826131ed565b9050919050565b61322261321d82612c6c565b6131ff565b82525050565b6000819050919050565b61324361323e82612caa565b613228565b82525050565b6002811061325a576132596130c8565b5b50565b600081905061326b82613249565b919050565b600061327b8261325d565b9050919050565b60008160f81b9050919050565b600061329a82613282565b9050919050565b6132b26132ad82613270565b61328f565b82525050565b60006132c48286613211565b6014820191506132d48285613232565b6020820191506132e482846132a1565b600182019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061332f82612caa565b915061333a83612caa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613373576133726132f5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133b882612caa565b91506133c383612caa565b9250826133d3576133d261337e565b5b828204905092915050565b60006133e982612caa565b91506133f483612caa565b925082821015613407576134066132f5565b5b828203905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600061346e602a836130f7565b915061347982613412565b604082019050919050565b6000602082019050818103600083015261349d81613461565b9050919050565b7f43616e6e6f7420627579207a65726f2062616467657300000000000000000000600082015250565b60006134da6016836130f7565b91506134e5826134a4565b602082019050919050565b60006020820190508181036000830152613509816134cd565b9050919050565b7f57696e6e696e67206261646765732063616e6e6f74206265207075726368617360008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b600061356c6023836130f7565b915061357782613510565b604082019050919050565b6000602082019050818103600083015261359b8161355f565b9050919050565b60006135ad82612caa565b91506135b883612caa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156135ed576135ec6132f5565b5b828201905092915050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b600061362e6014836130f7565b9150613639826135f8565b602082019050919050565b6000602082019050818103600083015261365d81613621565b9050919050565b600081905092915050565b50565b600061367f600083613664565b915061368a8261366f565b600082019050919050565b60006136a082613672565b9150819050919050565b6136b381612c6c565b82525050565b6136c281612d58565b82525050565b6136d181612e1d565b82525050565b6136e081612caa565b82525050565b610140820160008201516136fd60008501826136aa565b50602082015161371060208501826136b9565b50604082015161372360408501826136c8565b50606082015161373660608501826136d7565b50608082015161374960808501826136d7565b5060a082015161375c60a08501826136d7565b5060c082015161376f60c08501826136d7565b5060e082015161378260e08501826136d7565b506101008201516137976101008501826136d7565b506101208201516137ac6101208501826136d7565b50505050565b6000610140820190506137c860008301846136e6565b92915050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b60006138046014836130f7565b915061380f826137ce565b602082019050919050565b60006020820190508181036000830152613833816137f7565b9050919050565b7f496e73756666696369656e742062616467657300000000000000000000000000600082015250565b60006138706013836130f7565b915061387b8261383a565b602082019050919050565b6000602082019050818103600083015261389f81613863565b9050919050565b7f57696e6e696e67206261646765732063616e6e6f7420626520736f6c64000000600082015250565b60006138dc601d836130f7565b91506138e7826138a6565b602082019050919050565b6000602082019050818103600083015261390b816138cf565b9050919050565b7f43616c6c6572206973206e6f74206120746f75726e616d656e7420637265617460008201527f6f72000000000000000000000000000000000000000000000000000000000000602082015250565b600061396e6022836130f7565b915061397982613912565b604082019050919050565b6000602082019050818103600083015261399d81613961565b9050919050565b7f546f75726e616d656e74206973206e6f74206163746976652e00000000000000600082015250565b60006139da6019836130f7565b91506139e5826139a4565b602082019050919050565b60006020820190508181036000830152613a09816139cd565b9050919050565b7f57696e6e6572207061796f75747320616c726561647920616c6c6f7765642e00600082015250565b6000613a46601f836130f7565b9150613a5182613a10565b602082019050919050565b60006020820190508181036000830152613a7581613a39565b9050919050565b7f57696e6e6572207061796f7574206e6f7420616c6c6f7765642072696768742060008201527f6e6f770000000000000000000000000000000000000000000000000000000000602082015250565b6000613ad86023836130f7565b9150613ae382613a7c565b604082019050919050565b60006020820190508181036000830152613b0781613acb565b9050919050565b7f4e6f205649502062616467657320746f20636c61696d207061796f757420666f60008201527f722e000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b6a6022836130f7565b9150613b7582613b0e565b604082019050919050565b60006020820190508181036000830152613b9981613b5d565b9050919050565b7f4e6f207061796f757420666f7220757365720000000000000000000000000000600082015250565b6000613bd66012836130f7565b9150613be182613ba0565b602082019050919050565b60006020820190508181036000830152613c0581613bc9565b9050919050565b7f546f75726e616d656e74207374696c6c206163746976652e0000000000000000600082015250565b6000613c426018836130f7565b9150613c4d82613c0c565b602082019050919050565b60006020820190508181036000830152613c7181613c35565b9050919050565b7f57696e6e6572207061796f75747320616c72656164792073746f707065642e00600082015250565b6000613cae601f836130f7565b9150613cb982613c78565b602082019050919050565b60006020820190508181036000830152613cdd81613ca1565b9050919050565b7f57696e6e696e6720626164676520706172616d6574657273206d757374206d6160008201527f746368207365742062616467652e000000000000000000000000000000000000602082015250565b6000613d40602e836130f7565b9150613d4b82613ce4565b604082019050919050565b60006020820190508181036000830152613d6f81613d33565b9050919050565b7f546f75726e616d656e7420697320616c7265616479206163746976652e000000600082015250565b6000613dac601d836130f7565b9150613db782613d76565b602082019050919050565b60006020820190508181036000830152613ddb81613d9f565b9050919050565b7f57696e6e6572207061796f757473207374696c6c20616c6c6f7765642e000000600082015250565b6000613e18601d836130f7565b9150613e2382613de2565b602082019050919050565b60006020820190508181036000830152613e4781613e0b565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613eaa6026836130f7565b9150613eb582613e4e565b604082019050919050565b60006020820190508181036000830152613ed981613e9d565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613f16601f836130f7565b9150613f2182613ee0565b602082019050919050565b60006020820190508181036000830152613f4581613f09565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f826020836130f7565b9150613f8d82613f4c565b602082019050919050565b60006020820190508181036000830152613fb181613f75565b905091905056fea2646970667358221220ead28ce90c52dcc70d98b23e9a53ade1eb54bf8d85dfc0e1d2ee522a0e22d08e64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 79,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 224,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "tournament",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Tournament)200_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "protocolFeeDestination",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 228,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "protocolFeePercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 230,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "subjectFeePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 232,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "tournamentFeePercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 247,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "vipBadgeSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 253,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "vipBadgeBalance",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 257,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "winningBadges",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 261,
        "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
        "label": "isTournamentCreator",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Tournament)200_storage": {
        "encoding": "inplace",
        "label": "struct UnlonelyTournament.Tournament",
        "members": [
          {
            "astId": 193,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 195,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "isPayoutClaimable",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 197,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "winningBadge",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 199,
            "contract": "contracts/UnlonelyTournament.sol:UnlonelyTournament",
            "label": "vipPooledEth",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}