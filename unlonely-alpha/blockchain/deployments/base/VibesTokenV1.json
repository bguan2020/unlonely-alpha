{
  "address": "0xbc82454027d2a12700adC2370148Ccb3BD759Cae",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maximumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BurnAmountTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "EtherTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "streamerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_streamerAddress",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnProceedsAfterFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_streamerAddress",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintCostAfterFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "setFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setStreamerFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamerFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n_",
          "type": "uint256"
        }
      ],
      "name": "sumOfPriceToNTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe2374f7c038f14a6cecd1f24ff449bb3ae5d6c191120dcce75cbf9d83212452",
  "receipt": {
    "to": null,
    "from": "0x4F3d3f2F895Db524AC3944BDd17fE632473bCa4a",
    "contractAddress": "0xbc82454027d2a12700adC2370148Ccb3BD759Cae",
    "transactionIndex": 4,
    "gasUsed": "2712170",
    "logsBloom": "0x
    "blockHash": "0x8ba8e4f5b71c4f8f8ad024638b26323dfe69f1f7e3bff21be0e45f17e6c5df67",
    "transactionHash": "0xfe2374f7c038f14a6cecd1f24ff449bb3ae5d6c191120dcce75cbf9d83212452",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 8973423,
        "transactionHash": "0xfe2374f7c038f14a6cecd1f24ff449bb3ae5d6c191120dcce75cbf9d83212452",
        "address": "0xbc82454027d2a12700adC2370148Ccb3BD759Cae",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f3d3f2f895db524ac3944bdd17fe632473bca4a"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x8ba8e4f5b71c4f8f8ad024638b26323dfe69f1f7e3bff21be0e45f17e6c5df67"
      }
    ],
    "blockNumber": 8973423,
    "cumulativeGasUsed": "3489869",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Vibes",
    "VIBES"
  ],
  "numDeployments": 2,
  "solcInputHash": "15838439acc68a684ca15bc246b6ca65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EtherTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_streamerAddress\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnProceedsAfterFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_streamerAddress\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintCostAfterFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setStreamerFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamerFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n_\",\"type\":\"uint256\"}],\"name\":\"sumOfPriceToNTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VibesTokenV1.sol\":\"VibesTokenV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VibesTokenV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract VibesTokenV1 is ERC20, Ownable {\\r\\n    address public protocolFeeDestination;\\r\\n    uint256 public protocolFeePercent;\\r\\n    uint256 public streamerFeePercent;\\r\\n\\r\\n    event Mint(address indexed account, uint256 amount, address indexed streamerAddress, uint256 indexed totalSupply);\\r\\n    event Burn(address indexed account, uint256 amount, address indexed streamerAddress, uint256 indexed totalSupply);\\r\\n\\r\\n    error InsufficientValue(uint256 minimumValue, uint256 value);\\r\\n    error BurnAmountTooHigh(uint256 maximumAmount, uint256 amount);\\r\\n    error EtherTransferFailed(address to, uint256 value);\\r\\n\\r\\n    modifier requireFeeDestination() {\\r\\n        require(protocolFeeDestination != address(0), \\\"protocolFeeDestination is the zero address\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\r\\n        protocolFeePercent = 2 * 10**16; // 2%\\r\\n        streamerFeePercent = 2 * 10**16;  // 2%\\r\\n    }\\r\\n\\r\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\r\\n        protocolFeeDestination = _feeDestination;\\r\\n    }\\r\\n\\r\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        protocolFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function setStreamerFeePercent(uint256 _feePercent) public onlyOwner {\\r\\n        streamerFeePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _amount, address _streamerAddress) external payable requireFeeDestination {\\r\\n        require(_streamerAddress != address(0), \\\"_streamerAddress is a zero address\\\");\\r\\n        uint256 cost = mintCost(_amount);\\r\\n        uint256 protocolFee = cost * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = cost * streamerFeePercent / 1 ether;\\r\\n        uint256 totalCost = cost + protocolFee + subjectFee;\\r\\n\\r\\n        if (msg.value < totalCost) {\\r\\n            revert InsufficientValue(totalCost, msg.value);\\r\\n        }\\r\\n\\r\\n        _mint(msg.sender, _amount);\\r\\n\\r\\n        if(msg.value > totalCost) {\\r\\n            (bool sent,) = msg.sender.call{value: msg.value - totalCost}(\\\"\\\");\\r\\n            if (!sent) {\\r\\n                revert EtherTransferFailed(msg.sender, msg.value - totalCost);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = _streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        emit Mint(msg.sender, _amount, _streamerAddress, totalSupply());\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _amount, address _streamerAddress) external requireFeeDestination {\\r\\n        require(_streamerAddress != address(0), \\\"_streamerAddress is a zero address\\\");\\r\\n        if (_amount > balanceOf(msg.sender)) {\\r\\n            revert BurnAmountTooHigh(balanceOf(msg.sender), _amount);\\r\\n        }\\r\\n\\r\\n        // Calculate refund before burn, to use the totalSupply before the burn\\r\\n        uint256 proceeds = burnProceeds(_amount);\\r\\n        uint256 protocolFee = proceeds * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = proceeds * streamerFeePercent / 1 ether;\\r\\n\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        (bool sent,) = msg.sender.call{value: proceeds - protocolFee - subjectFee}(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert EtherTransferFailed(msg.sender, proceeds - protocolFee - subjectFee);\\r\\n        }\\r\\n\\r\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\r\\n        (bool success2, ) = _streamerAddress.call{value: subjectFee}(\\\"\\\");\\r\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\r\\n\\r\\n        emit Burn(msg.sender, _amount, _streamerAddress, totalSupply());\\r\\n    }\\r\\n\\r\\n    function mintCost(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all tokens already minted\\r\\n        uint256 sumPricesCurrentTotalSupply = sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens already minted + the tokens to be newly minted\\r\\n        uint256 sumPricesNewTotalSupply = sumOfPriceToNTokens(totalSupply() + _amount);\\r\\n\\r\\n        return sumPricesNewTotalSupply - sumPricesCurrentTotalSupply;\\r\\n    }\\r\\n    \\r\\n    function mintCostAfterFees(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all tokens already minted\\r\\n        uint256 sumPricesCurrentTotalSupply = sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens already minted + the tokens to be newly minted\\r\\n        uint256 sumPricesNewTotalSupply = sumOfPriceToNTokens(totalSupply() + _amount);\\r\\n        uint256 sumDiff = sumPricesNewTotalSupply - sumPricesCurrentTotalSupply;\\r\\n\\r\\n        uint256 protocolFee = sumDiff * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = sumDiff * streamerFeePercent / 1 ether;\\r\\n        uint256 totalCost = sumDiff + protocolFee + subjectFee;\\r\\n\\r\\n        return totalCost;\\r\\n    }\\r\\n\\r\\n    function burnProceeds(uint256 _amount) public view returns (uint256) {\\r\\n        // The sum of the prices of all the tokens already minted\\r\\n        uint256 sumBeforeBurn = sumOfPriceToNTokens(totalSupply());\\r\\n        // The sum of the prices of all the tokens after burning _amount\\r\\n        uint256 sumAfterBurn = sumOfPriceToNTokens(totalSupply() - _amount);\\r\\n\\r\\n        return sumBeforeBurn - sumAfterBurn;\\r\\n    }\\r\\n\\r\\n    function burnProceedsAfterFees(uint256 _amount) public view returns (uint256) {\\r\\n        if (_amount > totalSupply()) {\\r\\n            // If the amount to burn exceeds total supply, return 0 or some error value\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 sumBeforeBurn = sumOfPriceToNTokens(totalSupply());\\r\\n        uint256 sumAfterBurn = sumOfPriceToNTokens(totalSupply() - _amount);\\r\\n\\r\\n        uint256 sumDiff = sumBeforeBurn - sumAfterBurn;\\r\\n\\r\\n        uint256 protocolFee = sumDiff * protocolFeePercent / 1 ether;\\r\\n        uint256 subjectFee = sumDiff * streamerFeePercent / 1 ether;\\r\\n\\r\\n        // Check if sumDiff is less than the total fees\\r\\n        if (sumDiff < protocolFee + subjectFee) {\\r\\n            // Handle the scenario, such as returning 0 or a specific error value\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 proceeds = sumDiff - protocolFee - subjectFee;\\r\\n        return proceeds;\\r\\n    }\\r\\n\\r\\n    function decimals() pure public override returns (uint8) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    // The price of *all* tokens from number 1 to n.\\r\\n    function sumOfPriceToNTokens(uint256 n_) pure public returns (uint256) {\\r\\n        return n_ * (n_ + 1) * (2 * n_ + 1) / 6;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xeb5fc3d212adc19387ec55d7eec3cc85648cc2092d496dd3a8dfb0877e79a1f8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620032b2380380620032b28339818101604052810190620000379190620003cc565b81818160039080519060200190620000519291906200017f565b5080600490805190602001906200006a9291906200017f565b5050506200008d62000081620000b160201b60201c565b620000b960201b60201c565b66470de4df82000060078190555066470de4df8200006008819055505050620004b6565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200018d9062000480565b90600052602060002090601f016020900481019282620001b15760008555620001fd565b82601f10620001cc57805160ff1916838001178555620001fd565b82800160010185558215620001fd579182015b82811115620001fc578251825591602001919060010190620001df565b5b5090506200020c919062000210565b5090565b5b808211156200022b57600081600090555060010162000211565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000298826200024d565b810181811067ffffffffffffffff82111715620002ba57620002b96200025e565b5b80604052505050565b6000620002cf6200022f565b9050620002dd82826200028d565b919050565b600067ffffffffffffffff8211156200030057620002ff6200025e565b5b6200030b826200024d565b9050602081019050919050565b60005b83811015620003385780820151818401526020810190506200031b565b8381111562000348576000848401525b50505050565b6000620003656200035f84620002e2565b620002c3565b90508281526020810184848401111562000384576200038362000248565b5b6200039184828562000318565b509392505050565b600082601f830112620003b157620003b062000243565b5b8151620003c38482602086016200034e565b91505092915050565b60008060408385031215620003e657620003e562000239565b5b600083015167ffffffffffffffff8111156200040757620004066200023e565b5b620004158582860162000399565b925050602083015167ffffffffffffffff8111156200043957620004386200023e565b5b620004478582860162000399565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049957607f821691505b60208210811415620004b057620004af62000451565b5b50919050565b612dec80620004c66000396000f3fe60806040526004361061019c5760003560e01c80638da5cb5b116100ec578063d6e6eb9f1161008a578063f2fde38b11610064578063f2fde38b1461062f578063f46d932414610658578063fbe5323414610683578063fcd3533c146106ac5761019c565b8063d6e6eb9f1461058a578063d7e89466146105b5578063dd62ed3e146105f25761019c565b8063a457c2d7116100c6578063a457c2d7146104aa578063a4983421146104e7578063a9059cbb14610510578063c5a1d5e21461054d5761019c565b80638da5cb5b1461043857806394bf804d1461046357806395d89b411461047f5761019c565b806338cb037a116101595780634ce7957c116101335780634ce7957c1461039057806370a08231146103bb578063715018a6146103f85780637a31c1851461040f5761019c565b806338cb037a146102d957806339509351146103165780634768e885146103535761019c565b806306fdde03146101a1578063095ea7b3146101cc57806318160ddd1461020957806323b872dd1461023457806327de8f2714610271578063313ce567146102ae575b600080fd5b3480156101ad57600080fd5b506101b66106d5565b6040516101c3919061206b565b60405180910390f35b3480156101d857600080fd5b506101f360048036038101906101ee9190612126565b610767565b6040516102009190612181565b60405180910390f35b34801561021557600080fd5b5061021e61078a565b60405161022b91906121ab565b60405180910390f35b34801561024057600080fd5b5061025b600480360381019061025691906121c6565b610794565b6040516102689190612181565b60405180910390f35b34801561027d57600080fd5b5061029860048036038101906102939190612219565b6107c3565b6040516102a591906121ab565b60405180910390f35b3480156102ba57600080fd5b506102c361080c565b6040516102d09190612262565b60405180910390f35b3480156102e557600080fd5b5061030060048036038101906102fb9190612219565b610811565b60405161030d91906121ab565b60405180910390f35b34801561032257600080fd5b5061033d60048036038101906103389190612126565b6108c8565b60405161034a9190612181565b60405180910390f35b34801561035f57600080fd5b5061037a60048036038101906103759190612219565b6108ff565b60405161038791906121ab565b60405180910390f35b34801561039c57600080fd5b506103a561094f565b6040516103b2919061228c565b60405180910390f35b3480156103c757600080fd5b506103e260048036038101906103dd91906122a7565b610975565b6040516103ef91906121ab565b60405180910390f35b34801561040457600080fd5b5061040d6109bd565b005b34801561041b57600080fd5b5061043660048036038101906104319190612219565b6109d1565b005b34801561044457600080fd5b5061044d6109e3565b60405161045a919061228c565b60405180910390f35b61047d600480360381019061047891906122d4565b610a0d565b005b34801561048b57600080fd5b50610494610e5c565b6040516104a1919061206b565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc9190612126565b610eee565b6040516104de9190612181565b60405180910390f35b3480156104f357600080fd5b5061050e60048036038101906105099190612219565b610f65565b005b34801561051c57600080fd5b5061053760048036038101906105329190612126565b610f77565b6040516105449190612181565b60405180910390f35b34801561055957600080fd5b50610574600480360381019061056f9190612219565b610f9a565b60405161058191906121ab565b60405180910390f35b34801561059657600080fd5b5061059f61108c565b6040516105ac91906121ab565b60405180910390f35b3480156105c157600080fd5b506105dc60048036038101906105d79190612219565b611092565b6040516105e991906121ab565b60405180910390f35b3480156105fe57600080fd5b5061061960048036038101906106149190612314565b6110db565b60405161062691906121ab565b60405180910390f35b34801561063b57600080fd5b50610656600480360381019061065191906122a7565b611162565b005b34801561066457600080fd5b5061066d6111e6565b60405161067a91906121ab565b60405180910390f35b34801561068f57600080fd5b506106aa60048036038101906106a591906122a7565b6111ec565b005b3480156106b857600080fd5b506106d360048036038101906106ce91906122d4565b611238565b005b6060600380546106e490612383565b80601f016020809104026020016040519081016040528092919081815260200182805461071090612383565b801561075d5780601f106107325761010080835404028352916020019161075d565b820191906000526020600020905b81548152906001019060200180831161074057829003601f168201915b5050505050905090565b600080610772611688565b905061077f818585611690565b600191505092915050565b6000600254905090565b60008061079f611688565b90506107ac85828561185b565b6107b78585856118e7565b60019150509392505050565b6000806107d66107d161078a565b6108ff565b905060006107f5846107e661078a565b6107f091906123e4565b6108ff565b90508181610803919061243a565b92505050919050565b600090565b60008061082461081f61078a565b6108ff565b905060006108438461083461078a565b61083e91906123e4565b6108ff565b905060008282610853919061243a565b90506000670de0b6b3a76400006007548361086e919061246e565b61087891906124f7565b90506000670de0b6b3a764000060085484610893919061246e565b61089d91906124f7565b905060008183856108ae91906123e4565b6108b891906123e4565b9050809650505050505050919050565b6000806108d3611688565b90506108f48185856108e585896110db565b6108ef91906123e4565b611690565b600191505092915050565b600060066001836002610912919061246e565b61091c91906123e4565b60018461092991906123e4565b84610934919061246e565b61093e919061246e565b61094891906124f7565b9050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109c5611b5f565b6109cf6000611bdd565b565b6109d9611b5f565b8060088190555050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a969061259a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b069061262c565b60405180910390fd5b6000610b1a836107c3565b90506000670de0b6b3a764000060075483610b35919061246e565b610b3f91906124f7565b90506000670de0b6b3a764000060085484610b5a919061246e565b610b6491906124f7565b90506000818385610b7591906123e4565b610b7f91906123e4565b905080341015610bc85780346040517f7040b58c000000000000000000000000000000000000000000000000000000008152600401610bbf92919061264c565b60405180910390fd5b610bd23387611ca3565b80341115610ca25760003373ffffffffffffffffffffffffffffffffffffffff168234610bff919061243a565b604051610c0b906126a6565b60006040518083038185875af1925050503d8060008114610c48576040519150601f19603f3d011682016040523d82523d6000602084013e610c4d565b606091505b5050905080610ca057338234610c63919061243a565b6040517f2c6a51e2000000000000000000000000000000000000000000000000000000008152600401610c979291906126bb565b60405180910390fd5b505b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610cea906126a6565b60006040518083038185875af1925050503d8060008114610d27576040519150601f19603f3d011682016040523d82523d6000602084013e610d2c565b606091505b5050905060008673ffffffffffffffffffffffffffffffffffffffff1684604051610d56906126a6565b60006040518083038185875af1925050503d8060008114610d93576040519150601f19603f3d011682016040523d82523d6000602084013e610d98565b606091505b50509050818015610da65750805b610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90612730565b60405180910390fd5b610ded61078a565b8773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff3f9b81b1aa7af42b83e33d01a22621ecf67d5ebeb4587a4d63e3737276076818b604051610e4a91906121ab565b60405180910390a45050505050505050565b606060048054610e6b90612383565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9790612383565b8015610ee45780601f10610eb957610100808354040283529160200191610ee4565b820191906000526020600020905b815481529060010190602001808311610ec757829003601f168201915b5050505050905090565b600080610ef9611688565b90506000610f0782866110db565b905083811015610f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f43906127c2565b60405180910390fd5b610f598286868403611690565b60019250505092915050565b610f6d611b5f565b8060078190555050565b600080610f82611688565b9050610f8f8185856118e7565b600191505092915050565b6000610fa461078a565b821115610fb45760009050611087565b6000610fc6610fc161078a565b6108ff565b90506000610fe584610fd661078a565b610fe0919061243a565b6108ff565b905060008183610ff5919061243a565b90506000670de0b6b3a764000060075483611010919061246e565b61101a91906124f7565b90506000670de0b6b3a764000060085484611035919061246e565b61103f91906124f7565b9050808261104d91906123e4565b83101561106257600095505050505050611087565b6000818385611071919061243a565b61107b919061243a565b90508096505050505050505b919050565b60075481565b6000806110a56110a061078a565b6108ff565b905060006110c4846110b561078a565b6110bf919061243a565b6108ff565b905080826110d2919061243a565b92505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61116a611b5f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d190612854565b60405180910390fd5b6111e381611bdd565b50565b60085481565b6111f4611b5f565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c19061259a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561133a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113319061262c565b60405180910390fd5b61134333610975565b8211156113915761135333610975565b826040517f59efbd2000000000000000000000000000000000000000000000000000000000815260040161138892919061264c565b60405180910390fd5b600061139c83611092565b90506000670de0b6b3a7640000600754836113b7919061246e565b6113c191906124f7565b90506000670de0b6b3a7640000600854846113dc919061246e565b6113e691906124f7565b90506113f23386611dfa565b60003373ffffffffffffffffffffffffffffffffffffffff16828486611418919061243a565b611422919061243a565b60405161142e906126a6565b60006040518083038185875af1925050503d806000811461146b576040519150601f19603f3d011682016040523d82523d6000602084013e611470565b606091505b50509050806114ce5733828486611487919061243a565b611491919061243a565b6040517f2c6a51e20000000000000000000000000000000000000000000000000000000081526004016114c59291906126bb565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051611516906126a6565b60006040518083038185875af1925050503d8060008114611553576040519150601f19603f3d011682016040523d82523d6000602084013e611558565b606091505b5050905060008673ffffffffffffffffffffffffffffffffffffffff1684604051611582906126a6565b60006040518083038185875af1925050503d80600081146115bf576040519150601f19603f3d011682016040523d82523d6000602084013e6115c4565b606091505b505090508180156115d25750805b611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160890612730565b60405180910390fd5b61161961078a565b8773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9eaa2feeb3b37bf70a72e15de2e6e61b6f2060b2fb40839961c26bbc238dd2028b60405161167691906121ab565b60405180910390a45050505050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f7906128e6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611770576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176790612978565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161184e91906121ab565b60405180910390a3505050565b600061186784846110db565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146118e157818110156118d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ca906129e4565b60405180910390fd5b6118e08484848403611690565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611957576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194e90612a76565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119be90612b08565b60405180910390fd5b6119d2838383611fc8565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4f90612b9a565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b4691906121ab565b60405180910390a3611b59848484611fcd565b50505050565b611b67611688565b73ffffffffffffffffffffffffffffffffffffffff16611b856109e3565b73ffffffffffffffffffffffffffffffffffffffff1614611bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd290612c06565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0a90612c72565b60405180910390fd5b611d1f60008383611fc8565b8060026000828254611d3191906123e4565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611de291906121ab565b60405180910390a3611df660008383611fcd565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6190612d04565b60405180910390fd5b611e7682600083611fc8565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef390612d96565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611faf91906121ab565b60405180910390a3611fc383600084611fcd565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561200c578082015181840152602081019050611ff1565b8381111561201b576000848401525b50505050565b6000601f19601f8301169050919050565b600061203d82611fd2565b6120478185611fdd565b9350612057818560208601611fee565b61206081612021565b840191505092915050565b600060208201905081810360008301526120858184612032565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120bd82612092565b9050919050565b6120cd816120b2565b81146120d857600080fd5b50565b6000813590506120ea816120c4565b92915050565b6000819050919050565b612103816120f0565b811461210e57600080fd5b50565b600081359050612120816120fa565b92915050565b6000806040838503121561213d5761213c61208d565b5b600061214b858286016120db565b925050602061215c85828601612111565b9150509250929050565b60008115159050919050565b61217b81612166565b82525050565b60006020820190506121966000830184612172565b92915050565b6121a5816120f0565b82525050565b60006020820190506121c0600083018461219c565b92915050565b6000806000606084860312156121df576121de61208d565b5b60006121ed868287016120db565b93505060206121fe868287016120db565b925050604061220f86828701612111565b9150509250925092565b60006020828403121561222f5761222e61208d565b5b600061223d84828501612111565b91505092915050565b600060ff82169050919050565b61225c81612246565b82525050565b60006020820190506122776000830184612253565b92915050565b612286816120b2565b82525050565b60006020820190506122a1600083018461227d565b92915050565b6000602082840312156122bd576122bc61208d565b5b60006122cb848285016120db565b91505092915050565b600080604083850312156122eb576122ea61208d565b5b60006122f985828601612111565b925050602061230a858286016120db565b9150509250929050565b6000806040838503121561232b5761232a61208d565b5b6000612339858286016120db565b925050602061234a858286016120db565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061239b57607f821691505b602082108114156123af576123ae612354565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006123ef826120f0565b91506123fa836120f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561242f5761242e6123b5565b5b828201905092915050565b6000612445826120f0565b9150612450836120f0565b925082821015612463576124626123b5565b5b828203905092915050565b6000612479826120f0565b9150612484836120f0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124bd576124bc6123b5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612502826120f0565b915061250d836120f0565b92508261251d5761251c6124c8565b5b828204905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612584602a83611fdd565b915061258f82612528565b604082019050919050565b600060208201905081810360008301526125b381612577565b9050919050565b7f5f73747265616d6572416464726573732069732061207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612616602283611fdd565b9150612621826125ba565b604082019050919050565b6000602082019050818103600083015261264581612609565b9050919050565b6000604082019050612661600083018561219c565b61266e602083018461219c565b9392505050565b600081905092915050565b50565b6000612690600083612675565b915061269b82612680565b600082019050919050565b60006126b182612683565b9150819050919050565b60006040820190506126d0600083018561227d565b6126dd602083018461219c565b9392505050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b600061271a601483611fdd565b9150612725826126e4565b602082019050919050565b600060208201905081810360008301526127498161270d565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006127ac602583611fdd565b91506127b782612750565b604082019050919050565b600060208201905081810360008301526127db8161279f565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061283e602683611fdd565b9150612849826127e2565b604082019050919050565b6000602082019050818103600083015261286d81612831565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006128d0602483611fdd565b91506128db82612874565b604082019050919050565b600060208201905081810360008301526128ff816128c3565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612962602283611fdd565b915061296d82612906565b604082019050919050565b6000602082019050818103600083015261299181612955565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006129ce601d83611fdd565b91506129d982612998565b602082019050919050565b600060208201905081810360008301526129fd816129c1565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612a60602583611fdd565b9150612a6b82612a04565b604082019050919050565b60006020820190508181036000830152612a8f81612a53565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612af2602383611fdd565b9150612afd82612a96565b604082019050919050565b60006020820190508181036000830152612b2181612ae5565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612b84602683611fdd565b9150612b8f82612b28565b604082019050919050565b60006020820190508181036000830152612bb381612b77565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612bf0602083611fdd565b9150612bfb82612bba565b602082019050919050565b60006020820190508181036000830152612c1f81612be3565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612c5c601f83611fdd565b9150612c6782612c26565b602082019050919050565b60006020820190508181036000830152612c8b81612c4f565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612cee602183611fdd565b9150612cf982612c92565b604082019050919050565b60006020820190508181036000830152612d1d81612ce1565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d80602283611fdd565b9150612d8b82612d24565b604082019050919050565b60006020820190508181036000830152612daf81612d73565b905091905056fea2646970667358221220d5f05af40133726ac3296ed2b57f45669386edf458fccdbc66c008f6fa02f8d164736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80638da5cb5b116100ec578063d6e6eb9f1161008a578063f2fde38b11610064578063f2fde38b1461062f578063f46d932414610658578063fbe5323414610683578063fcd3533c146106ac5761019c565b8063d6e6eb9f1461058a578063d7e89466146105b5578063dd62ed3e146105f25761019c565b8063a457c2d7116100c6578063a457c2d7146104aa578063a4983421146104e7578063a9059cbb14610510578063c5a1d5e21461054d5761019c565b80638da5cb5b1461043857806394bf804d1461046357806395d89b411461047f5761019c565b806338cb037a116101595780634ce7957c116101335780634ce7957c1461039057806370a08231146103bb578063715018a6146103f85780637a31c1851461040f5761019c565b806338cb037a146102d957806339509351146103165780634768e885146103535761019c565b806306fdde03146101a1578063095ea7b3146101cc57806318160ddd1461020957806323b872dd1461023457806327de8f2714610271578063313ce567146102ae575b600080fd5b3480156101ad57600080fd5b506101b66106d5565b6040516101c3919061206b565b60405180910390f35b3480156101d857600080fd5b506101f360048036038101906101ee9190612126565b610767565b6040516102009190612181565b60405180910390f35b34801561021557600080fd5b5061021e61078a565b60405161022b91906121ab565b60405180910390f35b34801561024057600080fd5b5061025b600480360381019061025691906121c6565b610794565b6040516102689190612181565b60405180910390f35b34801561027d57600080fd5b5061029860048036038101906102939190612219565b6107c3565b6040516102a591906121ab565b60405180910390f35b3480156102ba57600080fd5b506102c361080c565b6040516102d09190612262565b60405180910390f35b3480156102e557600080fd5b5061030060048036038101906102fb9190612219565b610811565b60405161030d91906121ab565b60405180910390f35b34801561032257600080fd5b5061033d60048036038101906103389190612126565b6108c8565b60405161034a9190612181565b60405180910390f35b34801561035f57600080fd5b5061037a60048036038101906103759190612219565b6108ff565b60405161038791906121ab565b60405180910390f35b34801561039c57600080fd5b506103a561094f565b6040516103b2919061228c565b60405180910390f35b3480156103c757600080fd5b506103e260048036038101906103dd91906122a7565b610975565b6040516103ef91906121ab565b60405180910390f35b34801561040457600080fd5b5061040d6109bd565b005b34801561041b57600080fd5b5061043660048036038101906104319190612219565b6109d1565b005b34801561044457600080fd5b5061044d6109e3565b60405161045a919061228c565b60405180910390f35b61047d600480360381019061047891906122d4565b610a0d565b005b34801561048b57600080fd5b50610494610e5c565b6040516104a1919061206b565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc9190612126565b610eee565b6040516104de9190612181565b60405180910390f35b3480156104f357600080fd5b5061050e60048036038101906105099190612219565b610f65565b005b34801561051c57600080fd5b5061053760048036038101906105329190612126565b610f77565b6040516105449190612181565b60405180910390f35b34801561055957600080fd5b50610574600480360381019061056f9190612219565b610f9a565b60405161058191906121ab565b60405180910390f35b34801561059657600080fd5b5061059f61108c565b6040516105ac91906121ab565b60405180910390f35b3480156105c157600080fd5b506105dc60048036038101906105d79190612219565b611092565b6040516105e991906121ab565b60405180910390f35b3480156105fe57600080fd5b5061061960048036038101906106149190612314565b6110db565b60405161062691906121ab565b60405180910390f35b34801561063b57600080fd5b50610656600480360381019061065191906122a7565b611162565b005b34801561066457600080fd5b5061066d6111e6565b60405161067a91906121ab565b60405180910390f35b34801561068f57600080fd5b506106aa60048036038101906106a591906122a7565b6111ec565b005b3480156106b857600080fd5b506106d360048036038101906106ce91906122d4565b611238565b005b6060600380546106e490612383565b80601f016020809104026020016040519081016040528092919081815260200182805461071090612383565b801561075d5780601f106107325761010080835404028352916020019161075d565b820191906000526020600020905b81548152906001019060200180831161074057829003601f168201915b5050505050905090565b600080610772611688565b905061077f818585611690565b600191505092915050565b6000600254905090565b60008061079f611688565b90506107ac85828561185b565b6107b78585856118e7565b60019150509392505050565b6000806107d66107d161078a565b6108ff565b905060006107f5846107e661078a565b6107f091906123e4565b6108ff565b90508181610803919061243a565b92505050919050565b600090565b60008061082461081f61078a565b6108ff565b905060006108438461083461078a565b61083e91906123e4565b6108ff565b905060008282610853919061243a565b90506000670de0b6b3a76400006007548361086e919061246e565b61087891906124f7565b90506000670de0b6b3a764000060085484610893919061246e565b61089d91906124f7565b905060008183856108ae91906123e4565b6108b891906123e4565b9050809650505050505050919050565b6000806108d3611688565b90506108f48185856108e585896110db565b6108ef91906123e4565b611690565b600191505092915050565b600060066001836002610912919061246e565b61091c91906123e4565b60018461092991906123e4565b84610934919061246e565b61093e919061246e565b61094891906124f7565b9050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109c5611b5f565b6109cf6000611bdd565b565b6109d9611b5f565b8060088190555050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a969061259a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b069061262c565b60405180910390fd5b6000610b1a836107c3565b90506000670de0b6b3a764000060075483610b35919061246e565b610b3f91906124f7565b90506000670de0b6b3a764000060085484610b5a919061246e565b610b6491906124f7565b90506000818385610b7591906123e4565b610b7f91906123e4565b905080341015610bc85780346040517f7040b58c000000000000000000000000000000000000000000000000000000008152600401610bbf92919061264c565b60405180910390fd5b610bd23387611ca3565b80341115610ca25760003373ffffffffffffffffffffffffffffffffffffffff168234610bff919061243a565b604051610c0b906126a6565b60006040518083038185875af1925050503d8060008114610c48576040519150601f19603f3d011682016040523d82523d6000602084013e610c4d565b606091505b5050905080610ca057338234610c63919061243a565b6040517f2c6a51e2000000000000000000000000000000000000000000000000000000008152600401610c979291906126bb565b60405180910390fd5b505b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610cea906126a6565b60006040518083038185875af1925050503d8060008114610d27576040519150601f19603f3d011682016040523d82523d6000602084013e610d2c565b606091505b5050905060008673ffffffffffffffffffffffffffffffffffffffff1684604051610d56906126a6565b60006040518083038185875af1925050503d8060008114610d93576040519150601f19603f3d011682016040523d82523d6000602084013e610d98565b606091505b50509050818015610da65750805b610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90612730565b60405180910390fd5b610ded61078a565b8773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff3f9b81b1aa7af42b83e33d01a22621ecf67d5ebeb4587a4d63e3737276076818b604051610e4a91906121ab565b60405180910390a45050505050505050565b606060048054610e6b90612383565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9790612383565b8015610ee45780601f10610eb957610100808354040283529160200191610ee4565b820191906000526020600020905b815481529060010190602001808311610ec757829003601f168201915b5050505050905090565b600080610ef9611688565b90506000610f0782866110db565b905083811015610f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f43906127c2565b60405180910390fd5b610f598286868403611690565b60019250505092915050565b610f6d611b5f565b8060078190555050565b600080610f82611688565b9050610f8f8185856118e7565b600191505092915050565b6000610fa461078a565b821115610fb45760009050611087565b6000610fc6610fc161078a565b6108ff565b90506000610fe584610fd661078a565b610fe0919061243a565b6108ff565b905060008183610ff5919061243a565b90506000670de0b6b3a764000060075483611010919061246e565b61101a91906124f7565b90506000670de0b6b3a764000060085484611035919061246e565b61103f91906124f7565b9050808261104d91906123e4565b83101561106257600095505050505050611087565b6000818385611071919061243a565b61107b919061243a565b90508096505050505050505b919050565b60075481565b6000806110a56110a061078a565b6108ff565b905060006110c4846110b561078a565b6110bf919061243a565b6108ff565b905080826110d2919061243a565b92505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61116a611b5f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d190612854565b60405180910390fd5b6111e381611bdd565b50565b60085481565b6111f4611b5f565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c19061259a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561133a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113319061262c565b60405180910390fd5b61134333610975565b8211156113915761135333610975565b826040517f59efbd2000000000000000000000000000000000000000000000000000000000815260040161138892919061264c565b60405180910390fd5b600061139c83611092565b90506000670de0b6b3a7640000600754836113b7919061246e565b6113c191906124f7565b90506000670de0b6b3a7640000600854846113dc919061246e565b6113e691906124f7565b90506113f23386611dfa565b60003373ffffffffffffffffffffffffffffffffffffffff16828486611418919061243a565b611422919061243a565b60405161142e906126a6565b60006040518083038185875af1925050503d806000811461146b576040519150601f19603f3d011682016040523d82523d6000602084013e611470565b606091505b50509050806114ce5733828486611487919061243a565b611491919061243a565b6040517f2c6a51e20000000000000000000000000000000000000000000000000000000081526004016114c59291906126bb565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051611516906126a6565b60006040518083038185875af1925050503d8060008114611553576040519150601f19603f3d011682016040523d82523d6000602084013e611558565b606091505b5050905060008673ffffffffffffffffffffffffffffffffffffffff1684604051611582906126a6565b60006040518083038185875af1925050503d80600081146115bf576040519150601f19603f3d011682016040523d82523d6000602084013e6115c4565b606091505b505090508180156115d25750805b611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160890612730565b60405180910390fd5b61161961078a565b8773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9eaa2feeb3b37bf70a72e15de2e6e61b6f2060b2fb40839961c26bbc238dd2028b60405161167691906121ab565b60405180910390a45050505050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f7906128e6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611770576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176790612978565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161184e91906121ab565b60405180910390a3505050565b600061186784846110db565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146118e157818110156118d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ca906129e4565b60405180910390fd5b6118e08484848403611690565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611957576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194e90612a76565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119be90612b08565b60405180910390fd5b6119d2838383611fc8565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4f90612b9a565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b4691906121ab565b60405180910390a3611b59848484611fcd565b50505050565b611b67611688565b73ffffffffffffffffffffffffffffffffffffffff16611b856109e3565b73ffffffffffffffffffffffffffffffffffffffff1614611bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd290612c06565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0a90612c72565b60405180910390fd5b611d1f60008383611fc8565b8060026000828254611d3191906123e4565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611de291906121ab565b60405180910390a3611df660008383611fcd565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6190612d04565b60405180910390fd5b611e7682600083611fc8565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef390612d96565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611faf91906121ab565b60405180910390a3611fc383600084611fcd565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561200c578082015181840152602081019050611ff1565b8381111561201b576000848401525b50505050565b6000601f19601f8301169050919050565b600061203d82611fd2565b6120478185611fdd565b9350612057818560208601611fee565b61206081612021565b840191505092915050565b600060208201905081810360008301526120858184612032565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120bd82612092565b9050919050565b6120cd816120b2565b81146120d857600080fd5b50565b6000813590506120ea816120c4565b92915050565b6000819050919050565b612103816120f0565b811461210e57600080fd5b50565b600081359050612120816120fa565b92915050565b6000806040838503121561213d5761213c61208d565b5b600061214b858286016120db565b925050602061215c85828601612111565b9150509250929050565b60008115159050919050565b61217b81612166565b82525050565b60006020820190506121966000830184612172565b92915050565b6121a5816120f0565b82525050565b60006020820190506121c0600083018461219c565b92915050565b6000806000606084860312156121df576121de61208d565b5b60006121ed868287016120db565b93505060206121fe868287016120db565b925050604061220f86828701612111565b9150509250925092565b60006020828403121561222f5761222e61208d565b5b600061223d84828501612111565b91505092915050565b600060ff82169050919050565b61225c81612246565b82525050565b60006020820190506122776000830184612253565b92915050565b612286816120b2565b82525050565b60006020820190506122a1600083018461227d565b92915050565b6000602082840312156122bd576122bc61208d565b5b60006122cb848285016120db565b91505092915050565b600080604083850312156122eb576122ea61208d565b5b60006122f985828601612111565b925050602061230a858286016120db565b9150509250929050565b6000806040838503121561232b5761232a61208d565b5b6000612339858286016120db565b925050602061234a858286016120db565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061239b57607f821691505b602082108114156123af576123ae612354565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006123ef826120f0565b91506123fa836120f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561242f5761242e6123b5565b5b828201905092915050565b6000612445826120f0565b9150612450836120f0565b925082821015612463576124626123b5565b5b828203905092915050565b6000612479826120f0565b9150612484836120f0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124bd576124bc6123b5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612502826120f0565b915061250d836120f0565b92508261251d5761251c6124c8565b5b828204905092915050565b7f70726f746f636f6c46656544657374696e6174696f6e20697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612584602a83611fdd565b915061258f82612528565b604082019050919050565b600060208201905081810360008301526125b381612577565b9050919050565b7f5f73747265616d6572416464726573732069732061207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612616602283611fdd565b9150612621826125ba565b604082019050919050565b6000602082019050818103600083015261264581612609565b9050919050565b6000604082019050612661600083018561219c565b61266e602083018461219c565b9392505050565b600081905092915050565b50565b6000612690600083612675565b915061269b82612680565b600082019050919050565b60006126b182612683565b9150819050919050565b60006040820190506126d0600083018561227d565b6126dd602083018461219c565b9392505050565b7f556e61626c6520746f2073656e642066756e6473000000000000000000000000600082015250565b600061271a601483611fdd565b9150612725826126e4565b602082019050919050565b600060208201905081810360008301526127498161270d565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006127ac602583611fdd565b91506127b782612750565b604082019050919050565b600060208201905081810360008301526127db8161279f565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061283e602683611fdd565b9150612849826127e2565b604082019050919050565b6000602082019050818103600083015261286d81612831565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006128d0602483611fdd565b91506128db82612874565b604082019050919050565b600060208201905081810360008301526128ff816128c3565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612962602283611fdd565b915061296d82612906565b604082019050919050565b6000602082019050818103600083015261299181612955565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006129ce601d83611fdd565b91506129d982612998565b602082019050919050565b600060208201905081810360008301526129fd816129c1565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612a60602583611fdd565b9150612a6b82612a04565b604082019050919050565b60006020820190508181036000830152612a8f81612a53565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612af2602383611fdd565b9150612afd82612a96565b604082019050919050565b60006020820190508181036000830152612b2181612ae5565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612b84602683611fdd565b9150612b8f82612b28565b604082019050919050565b60006020820190508181036000830152612bb381612b77565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612bf0602083611fdd565b9150612bfb82612bba565b602082019050919050565b60006020820190508181036000830152612c1f81612be3565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612c5c601f83611fdd565b9150612c6782612c26565b602082019050919050565b60006020820190508181036000830152612c8b81612c4f565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612cee602183611fdd565b9150612cf982612c92565b604082019050919050565b60006020820190508181036000830152612d1d81612ce1565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d80602283611fdd565b9150612d8b82612d24565b604082019050919050565b60006020820190508181036000830152612daf81612d73565b905091905056fea2646970667358221220d5f05af40133726ac3296ed2b57f45669386edf458fccdbc66c008f6fa02f8d164736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 128,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 834,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "protocolFeeDestination",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 836,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "protocolFeePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 838,
        "contract": "contracts/VibesTokenV1.sol:VibesTokenV1",
        "label": "streamerFeePercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}